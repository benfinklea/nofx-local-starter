{
  "info": {
    "name": "NOFX Smoke Tests",
    "description": "Critical functionality validation for NOFX Control Plane - executes in under 30 seconds",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_postman_id": "smoke-tests-collection",
    "version": {
      "major": 1,
      "minor": 0,
      "patch": 0
    }
  },
  "item": [
    {
      "name": "1. Health Check",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/api/health",
          "host": ["{{baseUrl}}"],
          "path": ["api", "health"]
        },
        "description": "Verify API is responding and database is connected"
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('API is healthy', () => {",
              "    pm.response.to.have.status(200);",
              "    const response = pm.response.json();",
              "    pm.expect(response.status).to.eql('ok');",
              "});",
              "",
              "pm.test('Response time is acceptable', () => {",
              "    pm.expect(pm.response.responseTime).to.be.below(5000);",
              "});",
              "",
              "pm.test('Database is connected', () => {",
              "    const response = pm.response.json();",
              "    pm.expect(response).to.have.property('timestamp');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "2. Admin Authentication",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"password\": \"{{adminPassword}}\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/ui/login",
          "host": ["{{baseUrl}}"],
          "path": ["ui", "login"]
        },
        "description": "Verify admin authentication works"
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Admin login successful', () => {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Admin cookie set', () => {",
              "    const cookies = pm.cookies.toObject();",
              "    pm.expect(cookies).to.have.property('admin');",
              "    pm.globals.set('adminCookie', cookies.admin);",
              "});",
              "",
              "pm.test('Response contains success indicator', () => {",
              "    const responseText = pm.response.text();",
              "    pm.expect(responseText).to.include('admin');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "3. Create Simple Run",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Cookie",
            "value": "admin={{adminCookie}}"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{{smokeTestRun}}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/runs",
          "host": ["{{baseUrl}}"],
          "path": ["api", "runs"]
        },
        "description": "Create a simple test run to verify core functionality"
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Run created successfully', () => {",
              "    pm.response.to.have.status(200);",
              "    const response = pm.response.json();",
              "    pm.expect(response.success).to.be.true;",
              "});",
              "",
              "pm.test('Run has valid ID', () => {",
              "    const response = pm.response.json();",
              "    const runId = response.data.id;",
              "    pm.expect(runId).to.match(/^run_[a-zA-Z0-9]+$/);",
              "    pm.globals.set('smokeRunId', runId);",
              "});",
              "",
              "pm.test('Run has expected structure', () => {",
              "    const response = pm.response.json();",
              "    pm.expect(response.data).to.have.property('status');",
              "    pm.expect(response.data).to.have.property('goal');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "4. Verify Run Status",
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Cookie",
            "value": "admin={{adminCookie}}"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/api/runs/{{smokeRunId}}",
          "host": ["{{baseUrl}}"],
          "path": ["api", "runs", "{{smokeRunId}}"]
        },
        "description": "Verify we can retrieve run status"
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Run status accessible', () => {",
              "    pm.response.to.have.status(200);",
              "    const response = pm.response.json();",
              "    pm.expect(response.id).to.eql(pm.globals.get('smokeRunId'));",
              "});",
              "",
              "pm.test('Run has valid status', () => {",
              "    const response = pm.response.json();",
              "    const validStatuses = ['pending', 'running', 'succeeded', 'failed', 'cancelled'];",
              "    pm.expect(validStatuses).to.include(response.status);",
              "});",
              "",
              "pm.test('Run metadata is present', () => {",
              "    const response = pm.response.json();",
              "    pm.expect(response).to.have.property('created_at');",
              "    pm.expect(response).to.have.property('goal');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "5. Projects List",
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Cookie",
            "value": "admin={{adminCookie}}"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/api/projects",
          "host": ["{{baseUrl}}"],
          "path": ["api", "projects"]
        },
        "description": "Verify projects endpoint is accessible"
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Projects endpoint accessible', () => {",
              "    pm.response.to.have.status(200);",
              "    const response = pm.response.json();",
              "    pm.expect(response).to.have.property('projects');",
              "});",
              "",
              "pm.test('Projects response is array', () => {",
              "    const response = pm.response.json();",
              "    pm.expect(response.projects).to.be.an('array');",
              "});",
              "",
              "pm.test('Response time acceptable', () => {",
              "    pm.expect(pm.response.responseTime).to.be.below(10000);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "6. Models Availability",
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Cookie",
            "value": "admin={{adminCookie}}"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/api/models",
          "host": ["{{baseUrl}}"],
          "path": ["api", "models"]
        },
        "description": "Verify model router is accessible"
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Models endpoint accessible', () => {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Models response has expected structure', () => {",
              "    const response = pm.response.json();",
              "    pm.expect(response).to.have.property('models');",
              "});",
              "",
              "pm.test('At least one model available', () => {",
              "    const response = pm.response.json();",
              "    pm.expect(response.models.length).to.be.above(0);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "exec": [
          "// Set default timeout for all requests",
          "pm.timeout = 10000;",
          "",
          "// Log test execution",
          "console.log(`Running smoke test: ${pm.info.requestName}`);"
        ],
        "type": "text/javascript"
      }
    },
    {
      "listen": "test",
      "script": {
        "exec": [
          "// Global test cleanup",
          "pm.test('Response format is valid', () => {",
          "    pm.expect(pm.response.headers.get('Content-Type')).to.include('json');",
          "});",
          "",
          "// Log completion",
          "console.log(`Completed: ${pm.info.requestName} - ${pm.response.status}`);"
        ],
        "type": "text/javascript"
      }
    }
  ],
  "variable": [
    {
      "key": "testStartTime",
      "value": "",
      "type": "string"
    },
    {
      "key": "smokeRunId",
      "value": "",
      "type": "string"
    },
    {
      "key": "adminCookie",
      "value": "",
      "type": "string"
    }
  ]
}