{
  "info": {
    "name": "NOFX API Tests",
    "description": "Comprehensive API testing for all 28 NOFX Control Plane endpoints",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_postman_id": "api-tests-collection",
    "version": {
      "major": 1,
      "minor": 0,
      "patch": 0
    }
  },
  "item": [
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Login",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"password\": \"{{adminPassword}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/ui/login",
              "host": ["{{baseUrl}}"],
              "path": ["ui", "login"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Login successful', () => {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// Store admin cookie for subsequent requests",
                  "const cookies = pm.cookies.toObject();",
                  "if (cookies.admin) {",
                  "    pm.globals.set('adminCookie', cookies.admin);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Core API",
      "item": [
        {
          "name": "Health Check",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/api/health",
              "host": ["{{baseUrl}}"],
              "path": ["api", "health"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Health check returns 200', () => {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Health response has correct structure', () => {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.status).to.eql('ok');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Runs Management",
      "item": [
        {
          "name": "Create Run",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Cookie",
                "value": "admin={{adminCookie}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"plan\": {\n    \"goal\": \"API Test Run\",\n    \"steps\": [\n      {\n        \"name\": \"test-step\",\n        \"tool\": \"codegen\",\n        \"inputs\": {\n          \"prompt\": \"Generate a simple hello world function\"\n        }\n      }\n    ]\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/runs",
              "host": ["{{baseUrl}}"],
              "path": ["api", "runs"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Run created successfully', () => {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "});",
                  "",
                  "pm.test('Run ID is valid format', () => {",
                  "    const response = pm.response.json();",
                  "    const runId = response.data.id;",
                  "    pm.expect(runId).to.match(/^run_[a-zA-Z0-9]+$/);",
                  "    pm.globals.set('testRunId', runId);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Run",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Cookie",
                "value": "admin={{adminCookie}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/runs/{{testRunId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "runs", "{{testRunId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Run retrieved successfully', () => {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Run has correct ID', () => {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.id).to.eql(pm.globals.get('testRunId'));",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "List Runs",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Cookie",
                "value": "admin={{adminCookie}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/runs",
              "host": ["{{baseUrl}}"],
              "path": ["api", "runs"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Runs list retrieved', () => {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains runs array', () => {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('runs');",
                  "    pm.expect(response.runs).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Projects Management",
      "item": [
        {
          "name": "List Projects",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Cookie",
                "value": "admin={{adminCookie}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/projects",
              "host": ["{{baseUrl}}"],
              "path": ["api", "projects"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Projects retrieved successfully', () => {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Projects response structure', () => {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('projects');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Create Project",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Cookie",
                "value": "admin={{adminCookie}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Project {{$timestamp}}\",\n  \"description\": \"API test project\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/projects",
              "host": ["{{baseUrl}}"],
              "path": ["api", "projects"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Project created successfully', () => {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Project has ID', () => {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.globals.set('testProjectId', response.id);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Models",
      "item": [
        {
          "name": "List Models",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Cookie",
                "value": "admin={{adminCookie}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/models",
              "host": ["{{baseUrl}}"],
              "path": ["api", "models"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Models retrieved successfully', () => {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Models response structure', () => {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('models');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Settings",
      "item": [
        {
          "name": "Get Settings",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Cookie",
                "value": "admin={{adminCookie}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/settings",
              "host": ["{{baseUrl}}"],
              "path": ["api", "settings"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Settings retrieved successfully', () => {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Settings response structure', () => {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('settings');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "exec": [
          "// Set request timeout",
          "pm.timeout = 30000;",
          "",
          "// Log request details",
          "console.log(`API Test: ${pm.info.requestName}`);"
        ],
        "type": "text/javascript"
      }
    },
    {
      "listen": "test",
      "script": {
        "exec": [
          "// Global assertions",
          "pm.test('Response time is reasonable', () => {",
          "    pm.expect(pm.response.responseTime).to.be.below(15000);",
          "});",
          "",
          "pm.test('Response has proper content type', () => {",
          "    if (pm.response.status === 200) {",
          "        pm.expect(pm.response.headers.get('Content-Type')).to.include('json');",
          "    }",
          "});"
        ],
        "type": "text/javascript"
      }
    }
  ],
  "variable": [
    {
      "key": "testRunId",
      "value": "",
      "type": "string"
    },
    {
      "key": "testProjectId",
      "value": "",
      "type": "string"
    },
    {
      "key": "adminCookie",
      "value": "",
      "type": "string"
    }
  ]
}