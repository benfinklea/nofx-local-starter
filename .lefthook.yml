# Lefthook FAST Configuration - Quick but SAFE checks
# Catches dangerous stuff without the 2-minute wait

pre-commit:
  parallel: true
  commands:
    # Check for secrets and dangerous patterns
    danger-check:
      glob: "*"
      run: |
        for file in {staged_files}; do
          # Skip binary files
          if file "$file" | grep -q "binary"; then
            continue
          fi

          # Check for various types of secrets
          if grep -E "(password|passwd|pwd|secret|api[_-]?key|token|auth|credential|private[_-]?key)" "$file" | grep -E "(\"|'|=|\:)\s*[\"']?[A-Za-z0-9+/]{20,}" | grep -v "example\|dummy\|fake\|test\|TODO\|FIXME\|placeholder" > /dev/null 2>&1; then
            echo "‚ö†Ô∏è  Potential hardcoded secret in $file"
            echo "   Use environment variables instead!"
            exit 1
          fi

          # AWS credentials
          if grep -E "AKIA[0-9A-Z]{16}" "$file" > /dev/null 2>&1; then
            echo "üö® AWS Access Key detected in $file"
            exit 1
          fi

          # Private keys
          if grep -E "-----BEGIN (RSA |EC |DSA |OPENSSH )?PRIVATE KEY-----" "$file" > /dev/null 2>&1; then
            echo "üîë Private key detected in $file"
            exit 1
          fi

          # Database connection strings with passwords
          if grep -E "(mongodb|postgres|mysql|redis)://[^:]+:[^@]+@" "$file" > /dev/null 2>&1; then
            echo "üóÑÔ∏è  Database credentials detected in $file"
            exit 1
          fi

          # Common API keys patterns
          if grep -E "(sk-[a-zA-Z0-9]{48}|ghp_[a-zA-Z0-9]{36}|ghs_[a-zA-Z0-9]{36}|npm_[a-zA-Z0-9]{36})" "$file" > /dev/null 2>&1; then
            echo "üîê API key detected in $file"
            exit 1
          fi

          # Check for dangerous code patterns
          if grep -E "(eval\(|exec\(|Function\(|setTimeout\(['\"]|setInterval\(['\"])" "$file" > /dev/null 2>&1; then
            if ! grep -E "// eslint-disable|/\* eslint-disable|@ts-ignore" "$file" > /dev/null 2>&1; then
              echo "‚ö†Ô∏è  Potentially dangerous code pattern in $file (eval/exec/Function constructor)"
              echo "   If intentional, add an eslint-disable comment"
            fi
          fi

          # SQL injection vulnerabilities
          if grep -E "(query|execute)\(.*(\\$\{|\" \+|\' \+)" "$file" | grep -v "prepared\|parameterized\|template" > /dev/null 2>&1; then
            echo "üíâ Potential SQL injection vulnerability in $file"
            echo "   Use parameterized queries instead"
          fi

          # Check for console.log in production code
          if [[ "$file" == *.ts || "$file" == *.tsx || "$file" == *.js || "$file" == *.jsx ]]; then
            if grep -E "console\.(log|debug|info)" "$file" | grep -v "// eslint-disable\|/\* eslint-disable\|// TODO\|// DEBUG" > /dev/null 2>&1; then
              echo "üìù console.log detected in $file"
              echo "   Use proper logging (logger.info) instead"
            fi
          fi
        done
        exit 0

    # Quick lint on staged TypeScript/JavaScript files only
    lint-staged:
      glob: "*.{ts,tsx,js,jsx}"
      run: npx eslint --fix --max-warnings 10 {staged_files} && git add {staged_files}

pre-push:
  parallel: true
  commands:
    # TypeScript check - catches type errors before they hit CI
    typecheck:
      run: npm run typecheck
    # Run tests related to changed files only
    test-related:
      run: |
        # Try to run only related tests, fall back to quick smoke test
        npm run test:unit -- --bail --findRelatedTests {push_files} 2>/dev/null || \
        npm run test:unit -- --bail --testTimeout=5000 --maxWorkers=2 2>/dev/null || \
        echo "‚ö†Ô∏è  Tests skipped - run 'npm test' manually"

commit-msg:
  commands:
    conventional:
      run: |
        # Basic commit message validation
        if ! grep -qE "^(feat|fix|docs|style|refactor|perf|test|chore|build|ci|revert)(\(.+\))?: .{1,100}" "{1}"; then
          echo "‚ùå Commit message must follow conventional format:"
          echo "   type(scope?): description"
          echo "   Example: feat: add new feature"
          echo "   Types: feat|fix|docs|style|refactor|perf|test|chore|build|ci|revert"
          exit 1
        fi

post-commit:
  commands:
    celebrate:
      run: echo "‚úÖ Safe commit!"