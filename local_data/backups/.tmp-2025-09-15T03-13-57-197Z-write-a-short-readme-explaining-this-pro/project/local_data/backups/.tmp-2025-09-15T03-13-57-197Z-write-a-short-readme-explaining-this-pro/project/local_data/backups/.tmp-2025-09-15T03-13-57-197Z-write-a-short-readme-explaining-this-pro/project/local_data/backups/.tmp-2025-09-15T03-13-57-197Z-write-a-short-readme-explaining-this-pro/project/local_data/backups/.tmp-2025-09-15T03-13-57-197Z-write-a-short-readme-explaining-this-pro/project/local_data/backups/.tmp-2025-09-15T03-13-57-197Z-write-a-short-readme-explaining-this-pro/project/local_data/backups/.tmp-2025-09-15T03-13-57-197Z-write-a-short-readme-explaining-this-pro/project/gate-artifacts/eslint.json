[{"filePath":"/Volumes/Development/nofx-local-starter/src/api/loader.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Volumes/Development/nofx-local-starter/src/api/main.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Volumes/Development/nofx-local-starter/src/api/planBuilder.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Volumes/Development/nofx-local-starter/src/api/routes/auth.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Volumes/Development/nofx-local-starter/src/api/routes/backups.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Volumes/Development/nofx-local-starter/src/api/routes/dev.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Volumes/Development/nofx-local-starter/src/api/routes/gates.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Volumes/Development/nofx-local-starter/src/api/routes/metrics.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Volumes/Development/nofx-local-starter/src/api/routes/models.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Volumes/Development/nofx-local-starter/src/api/routes/queue.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Volumes/Development/nofx-local-starter/src/api/routes/settings.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Volumes/Development/nofx-local-starter/src/api/routes/ui.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Volumes/Development/nofx-local-starter/src/lib/artifacts.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Volumes/Development/nofx-local-starter/src/lib/auth.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Volumes/Development/nofx-local-starter/src/lib/autobackup.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Volumes/Development/nofx-local-starter/src/lib/backup.ts","messages":[{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\..","line":83,"column":60,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":83,"endColumn":61,"suggestions":[{"messageId":"removeEscape","fix":{"range":[3085,3086],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[3085,3085],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import fs from 'node:fs';\nimport fsp from 'node:fs/promises';\nimport path from 'node:path';\nimport { spawnSync } from 'node:child_process';\nimport { store } from './store';\nimport { supabase, ARTIFACT_BUCKET } from './supabase';\nimport { query } from './db';\n\nexport type BackupMeta = {\n  id: string;\n  created_at: string;\n  title: string;\n  note?: string;\n  size_bytes?: number;\n  kind: 'fs'|'db';\n  scope?: BackupScope;\n  cloud?: { uploaded?: boolean; path?: string; error?: string };\n};\n\nexport type BackupScope = 'data'|'with-project'|'project-only';\n\nconst ROOT = path.join(process.cwd(), 'local_data');\nconst BACKUP_DIR = path.join(ROOT, 'backups');\n\nfunction ensureDir(p: string){ if (!fs.existsSync(p)) fs.mkdirSync(p, { recursive: true }); }\n\nexport async function listBackups(): Promise<BackupMeta[]> {\n  ensureDir(BACKUP_DIR);\n  const metas: BackupMeta[] = [];\n  const files = await fsp.readdir(BACKUP_DIR).catch(()=>[] as string[]);\n  for (const f of files) {\n    if (!f.endsWith('.json')) continue;\n    try {\n      const j = JSON.parse(await fsp.readFile(path.join(BACKUP_DIR, f), 'utf8')) as BackupMeta;\n      metas.push(j);\n    } catch {}\n  }\n  metas.sort((a,b)=> (a.created_at < b.created_at ? 1 : -1));\n  return metas;\n}\n\nfunction safeSlug(s: string){ return s.toLowerCase().replace(/[^a-z0-9]+/g,'-').replace(/^-+|-+$/g,'').slice(0,40); }\n\nexport async function createBackup(note?: string, scope: BackupScope = 'data'): Promise<BackupMeta> {\n  ensureDir(BACKUP_DIR);\n  const now = new Date().toISOString();\n  const latestList = await store.listRuns(1);\n  const latest = latestList && latestList.length ? (latestList[0] as { id: string; title?: string }) : undefined;\n  let title = latest?.title || 'auto backup';\n  if (!title && latest?.id) title = `run ${latest.id}`;\n  const id = `${now.replace(/[:.]/g,'-')}-${safeSlug(title || 'nofx') || 'nofx'}`;\n  const kind: 'fs'|'db' = (store.driver === 'db') ? 'db' : 'fs';\n  const metaPath = path.join(BACKUP_DIR, `${id}.json`);\n  const tarPath = path.join(BACKUP_DIR, `${id}.tar.gz`);\n\n  const tmp = path.join(BACKUP_DIR, `.tmp-${id}`);\n  ensureDir(tmp);\n  if (kind === 'fs') {\n    // stage NOFX data\n    if (scope !== 'project-only') {\n      const dataDst = path.join(tmp, 'nofx_data');\n      await copyDir(ROOT, dataDst, ['backups']);\n    }\n  } else {\n    // stage DB export\n    if (scope !== 'project-only') {\n      const dump: Record<string, unknown> = {};\n      try {\n        const tables = ['nofx.run','nofx.step','nofx.event','nofx.gate','nofx.artifact','nofx.settings','nofx.model'];\n        for (const t of tables) {\n          try {\n            const rows = await query<Record<string, unknown>>(`select * from ${t}`);\n            dump[t] = rows.rows;\n          } catch {}\n        }\n        await fsp.writeFile(path.join(tmp, 'db.json'), JSON.stringify(dump, null, 2));\n      } catch {}\n    }\n  }\n  // optionally include the project working tree\n  if (scope === 'with-project' || scope === 'project-only') {\n    const projDst = path.join(tmp, 'project');\n    await copyDir(process.cwd(), projDst, ['node_modules','\\.git','local_data/backups','coverage','test-results','trash']);\n  }\n  // tar the staged tmp\n  const res = spawnSync('tar', ['-czf', tarPath, '-C', tmp, '.']);\n  if (res.status !== 0) throw new Error('tar failed');\n  try { await fsp.rm(tmp, { recursive: true, force: true }); } catch {}\n  const stat = await fsp.stat(tarPath).catch(()=>({ size: 0 } as fs.Stats));\n  const meta: BackupMeta = { id, created_at: now, title, note, size_bytes: stat.size, kind, scope };\n\n  // Try cloud upload to Supabase Storage if configured\n  try {\n    const u8 = await fsp.readFile(tarPath);\n    const key = `backups/${path.basename(tarPath)}`;\n    const { error } = await supabase.storage.from(ARTIFACT_BUCKET).upload(key, new Blob([u8]), { upsert: true, contentType: 'application/gzip' });\n    meta.cloud = error ? { uploaded: false, error: error.message } : { uploaded: true, path: key };\n  } catch (e: unknown) {\n    const msg = e instanceof Error ? e.message : String(e);\n    meta.cloud = { uploaded: false, error: msg };\n  }\n\n  await fsp.writeFile(metaPath, JSON.stringify(meta, null, 2));\n  return meta;\n}\n\nexport async function restoreBackup(id: string): Promise<BackupMeta> {\n  ensureDir(BACKUP_DIR);\n  const metaPath = path.join(BACKUP_DIR, `${id}.json`);\n  const tarPath = path.join(BACKUP_DIR, `${id}.tar.gz`);\n  const meta = JSON.parse(await fsp.readFile(metaPath, 'utf8')) as BackupMeta;\n  if (!fs.existsSync(tarPath)) throw new Error('snapshot missing tar');\n  // Always snapshot current state before restore\n  await createBackup(`auto-pre-restore:${id}`);\n  const tmp = path.join(BACKUP_DIR, `.restore-${id}`);\n  ensureDir(tmp);\n  const ext = spawnSync('tar', ['-xzf', tarPath, '-C', tmp]);\n  if (ext.status !== 0) throw new Error('restore extract failed');\n  if (meta.kind === 'fs') {\n    // Restore local_data from staged nofx_data if present\n    const staged = path.join(tmp, 'nofx_data');\n    if (fs.existsSync(staged)) {\n      await copyDir(staged, ROOT, []);\n    }\n    try { await fsp.rm(tmp, { recursive: true, force: true }); } catch {}\n    return meta;\n  }\n  // DB restore: read db.json and import\n  const dbFile = path.join(tmp, 'db.json');\n  if (!fs.existsSync(dbFile)) throw new Error('db.json not found in snapshot');\n  const dump = JSON.parse(await fsp.readFile(dbFile, 'utf8')) as Record<string, Record<string, unknown>[]>;\n  await restoreDbFromJson(dump);\n  try { await fsp.rm(tmp, { recursive: true, force: true }); } catch {}\n  return meta;\n}\n\nasync function restoreDbFromJson(dump: Record<string, Record<string, unknown>[]>) {\n  // Order matters due to FKs; delete children first\n  const delOrder = ['nofx.artifact','nofx.event','nofx.gate','nofx.step','nofx.run','nofx.model','nofx.settings'];\n  const insOrder = ['nofx.settings','nofx.model','nofx.run','nofx.step','nofx.artifact','nofx.event','nofx.gate'];\n  await query('begin');\n  try {\n    for (const t of delOrder) { try { await query(`delete from ${t}`); } catch {} }\n    for (const t of insOrder) {\n      const rows = dump[t] || [];\n      if (!rows.length) continue;\n      // Build dynamic insert\n      const cols = Object.keys(rows[0]);\n      const placeholders: string[] = [];\n      const values: unknown[] = [];\n      const chunk = 100;\n      for (let i=0;i<rows.length;i+=chunk){\n        const part = rows.slice(i, i+chunk);\n        placeholders.length = 0; values.length = 0;\n        part.forEach((r, idx) => {\n          const ps = cols.map((_, cidx) => `$${idx*cols.length + cidx + 1}`);\n          placeholders.push(`(${ps.join(',')})`);\n          values.push(...cols.map(k => r[k]));\n        });\n        const sql = `insert into ${t} (${cols.map(c=>`\"${c}\"`).join(',')}) values ${placeholders.join(',')}`;\n        await query(sql, values).catch(()=>{});\n      }\n    }\n    await query('commit');\n  } catch (e) {\n    await query('rollback').catch(()=>{});\n    throw e;\n  }\n}\n\nasync function copyDir(src: string, dst: string, exclude: string[]) {\n  ensureDir(dst);\n  const ents = await fsp.readdir(src, { withFileTypes: true });\n  for (const ent of ents) {\n    const name = ent.name;\n    if (exclude.some(pat => {\n      const p = String(pat).replace(/\\\\\\./g, '.');\n      return p === name;\n    })) continue;\n    const s = path.join(src, name);\n    const d = path.join(dst, name);\n    if (ent.isDirectory()) {\n      await copyDir(s, d, exclude);\n    } else if (ent.isFile()) {\n      await fsp.mkdir(path.dirname(d), { recursive: true });\n      await fsp.copyFile(s, d);\n    }\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Volumes/Development/nofx-local-starter/src/lib/cache.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":20,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[595,598],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[595,598],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":35,"column":68,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":35,"endColumn":71,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1088,1091],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1088,1091],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import fs from 'node:fs';\nimport fsp from 'node:fs/promises';\nimport path from 'node:path';\nimport crypto from 'node:crypto';\n\nconst ROOT = path.join(process.cwd(), 'local_data', 'cache');\n\nfunction ensureDirSync(p: string) {\n  if (!fs.existsSync(p)) fs.mkdirSync(p, { recursive: true });\n}\n\nfunction fileFor(ns: string, key: string) {\n  const safeNs = ns.replace(/[^a-z0-9_.:-]/gi, '_');\n  const h = crypto.createHash('sha256').update(key).digest('hex');\n  const dir = path.join(ROOT, safeNs);\n  ensureDirSync(dir);\n  return path.join(dir, `${h}.json`);\n}\n\nexport async function getCacheJSON<T=any>(ns: string, key: string): Promise<T | null> {\n  try {\n    const file = fileFor(ns, key);\n    const s = await fsp.readFile(file, 'utf8');\n    const data = JSON.parse(s);\n    const exp = Number(data?.expiresAt || 0);\n    if (exp && Date.now() > exp) {\n      // expired; best-effort unlink\n      try { await fsp.unlink(file); } catch {}\n      return null;\n    }\n    return data?.value ?? null;\n  } catch { return null; }\n}\n\nexport async function setCacheJSON(ns: string, key: string, value: any, ttlMs: number): Promise<void> {\n  const file = fileFor(ns, key);\n  const expiresAt = Date.now() + Math.max(0, Number(ttlMs || 0));\n  const data = { expiresAt, value };\n  await fsp.writeFile(file, JSON.stringify(data));\n}\n\nexport async function invalidateNamespace(ns: string): Promise<number> {\n  const dir = path.join(ROOT, ns);\n  try {\n    const files = await fsp.readdir(dir);\n    let n = 0;\n    for (const f of files) {\n      try { await fsp.unlink(path.join(dir, f)); n++; } catch {}\n    }\n    return n;\n  } catch { return 0; }\n}\n\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Volumes/Development/nofx-local-starter/src/lib/db.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":11,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[256,259],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[256,259],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":11,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[284,287],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[284,287],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Pool } from \"pg\";\nimport dotenv from \"dotenv\";\ndotenv.config();\nimport { metrics } from './metrics';\nimport { log } from './logger';\n\nexport const pool = new Pool({\n  connectionString: process.env.DATABASE_URL\n});\n\nexport async function query<T = any>(text: string, params?: any[]) {\n  const start = Date.now();\n  try {\n    const res = await pool.query(text, params);\n    const latencyMs = Date.now() - start;\n    try { metrics.dbQueryDuration.observe({ op: 'query' }, latencyMs); } catch {}\n    // Avoid logging SQL text to prevent leaking sensitive data\n    log.debug({ status: 'ok', latencyMs }, 'db.query');\n    return res as { rows: T[] };\n  } catch (err) {\n    const latencyMs = Date.now() - start;\n    try { metrics.dbQueryDuration.observe({ op: 'query' }, latencyMs); } catch {}\n    log.error({ status: 'error', latencyMs, err }, 'db.query.error');\n    throw err;\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Volumes/Development/nofx-local-starter/src/lib/events.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":3,"column":73,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":3,"endColumn":76,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[106,109],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[106,109],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { store } from \"./store\";\n\nexport async function recordEvent(runId: string, type: string, payload: any = {}, stepId?: string) {\n  await store.recordEvent(runId, type, payload, stepId);\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Volumes/Development/nofx-local-starter/src/lib/logger.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Volumes/Development/nofx-local-starter/src/lib/metrics.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Volumes/Development/nofx-local-starter/src/lib/modelImporters.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Volumes/Development/nofx-local-starter/src/lib/models.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":16,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[329,332],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[329,332],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":21,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":21,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[526,529],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[526,529],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":25,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[754,757],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[754,757],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":35,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":35,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1767,1770],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1767,1770],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { query } from './db';\n\nexport type ModelRow = {\n  id: string;\n  tenant_id: string;\n  name: string;\n  display_name?: string;\n  provider: string;\n  kind: string;\n  base_url?: string;\n  input_per_1m?: number;\n  output_per_1m?: number;\n  context_tokens?: number;\n  max_output_tokens?: number;\n  active: boolean;\n  metadata?: any;\n};\n\nexport async function listModels(): Promise<ModelRow[]> {\n  const r = await query<ModelRow>(`select * from nofx.model where tenant_id='local' order by provider, name`);\n  return r.rows as any;\n}\nexport async function getModelByName(name: string): Promise<ModelRow | undefined> {\n  const r = await query<ModelRow>(`select * from nofx.model where tenant_id='local' and name=$1 limit 1`, [name]);\n  return r.rows[0] as any;\n}\nexport async function upsertModel(m: Partial<ModelRow>): Promise<ModelRow> {\n  const r = await query<ModelRow>(\n    `insert into nofx.model (tenant_id, name, display_name, provider, kind, base_url, input_per_1m, output_per_1m, context_tokens, max_output_tokens, active, metadata)\n     values ('local', $1,$2,$3,$4,$5,$6,$7,$8,$9, coalesce($10,true), coalesce($11,'{}'::jsonb))\n     on conflict (tenant_id, provider, name) do update set display_name=excluded.display_name, kind=excluded.kind, base_url=excluded.base_url, input_per_1m=excluded.input_per_1m, output_per_1m=excluded.output_per_1m, context_tokens=excluded.context_tokens, max_output_tokens=excluded.max_output_tokens, active=excluded.active, metadata=excluded.metadata\n     returning *`,\n    [m.name, m.display_name || null, m.provider, m.kind || 'openai', m.base_url || null, m.input_per_1m || null, m.output_per_1m || null, m.context_tokens || null, m.max_output_tokens || null, m.active ?? true, m.metadata || {}]\n  );\n  return r.rows[0] as any;\n}\nexport async function deleteModel(id: string): Promise<void> {\n  await query(`delete from nofx.model where id=$1 and tenant_id='local'`, [id]);\n}\n\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Volumes/Development/nofx-local-starter/src/lib/observability.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Volumes/Development/nofx-local-starter/src/lib/queue.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Volumes/Development/nofx-local-starter/src/lib/queue/MemoryAdapter.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":4,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":4,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[106,109],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[106,109],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":7,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[225,228],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[225,228],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":38,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":38,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1803,1806],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1803,1806],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":53,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":53,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2422,2425],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2422,2425],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-constant-condition","severity":2,"message":"Unexpected constant condition.","line":72,"column":12,"nodeType":"Literal","messageId":"unexpected","endLine":72,"endColumn":16}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { log } from \"../logger\";\nimport { metrics } from \"../metrics\";\n\ntype Job = { id: number; payload: any; runAt: number; enqueuedAt: number };\n\nexport class MemoryQueueAdapter {\n  private subs = new Map<string, Array<(p:any)=>Promise<void>>>();\n  private queues = new Map<string, Job[]>();\n  private active = new Map<string, number>();\n  private counts = new Map<string, { waiting:number; active:number; completed:number; failed:number; delayed:number; paused:number }>();\n  private idSeq = 1;\n  private dlq = new Map<string, Job[]>();\n  private readonly backoffScheduleMs = [0, 2000, 5000, 10000];\n  private maxConcurrent = Math.max(1, Number(process.env.WORKER_CONCURRENCY || process.env.NOFX_WORKER_CONCURRENCY || 4));\n\n  private ensure(topic: string) {\n    if (!this.queues.has(topic)) this.queues.set(topic, []);\n    if (!this.counts.has(topic)) this.counts.set(topic, { waiting: 0, active: 0, completed: 0, failed: 0, delayed: 0, paused: 0 });\n    if (!this.active.has(topic)) this.active.set(topic, 0);\n  }\n\n  private updateGauges(topic: string) {\n    try {\n      const c = this.counts.get(topic)!;\n      metrics.queueDepth.set({ topic, state: 'waiting' }, c.waiting);\n      metrics.queueDepth.set({ topic, state: 'active' }, c.active);\n      metrics.queueDepth.set({ topic, state: 'completed' }, c.completed);\n      metrics.queueDepth.set({ topic, state: 'failed' }, c.failed);\n      metrics.queueDepth.set({ topic, state: 'delayed' }, c.delayed);\n      metrics.queueDepth.set({ topic, state: 'paused' }, c.paused);\n      const dlqSize = (this.dlq.get(topic) || []).length;\n      metrics.dlqSize.set({ topic }, dlqSize);\n      const oldest = this.getOldestAgeMs(topic) || 0;\n      metrics.queueOldestAgeMs.set({ topic }, oldest);\n    } catch {}\n  }\n\n  async enqueue(topic: string, payload: any, options?: { delay?: number }) {\n    this.ensure(topic);\n    const delay = Math.max(0, Number(options?.delay || 0));\n    const now = Date.now();\n    const runAt = now + delay;\n    const job: Job = { id: this.idSeq++, payload, runAt, enqueuedAt: now };\n    const q = this.queues.get(topic)!;\n    q.push(job);\n    const c = this.counts.get(topic)!;\n    if (delay > 0) c.delayed += 1; else c.waiting += 1;\n    log.info({ topic, payload, delay }, 'memq.enqueued');\n    this.updateGauges(topic);\n    setTimeout(() => this.drain(topic), Math.max(0, runAt - Date.now()));\n  }\n\n  subscribe(topic: string, handler: (payload:any)=>Promise<void>) {\n    const arr = this.subs.get(topic) || [];\n    arr.push(handler);\n    this.subs.set(topic, arr);\n    log.info({ topic }, 'memq.subscribed');\n    // kick off any waiting jobs\n    this.drain(topic);\n  }\n\n  private async drain(topic: string) {\n    this.ensure(topic);\n    const subs = this.subs.get(topic) || [];\n    if (subs.length === 0) return;\n    const handler = subs[0];\n    const q = this.queues.get(topic)!;\n    const c = this.counts.get(topic)!;\n    const now = Date.now();\n\n    // Launch up to maxConcurrent jobs that are ready\n    while (true) {\n      const active = this.active.get(topic) || 0;\n      if (active >= this.maxConcurrent) break;\n      const readyIdx = q.findIndex(j => j.runAt <= now);\n      if (readyIdx === -1) break;\n      const job = q.splice(readyIdx, 1)[0];\n      if (job.runAt > now) { c.delayed = Math.max(0, c.delayed - 1); } else { c.waiting = Math.max(0, c.waiting - 1); }\n      this.active.set(topic, active + 1);\n      c.active += 1;\n      this.updateGauges(topic);\n      (async () => {\n        try {\n          await handler(job.payload);\n          c.completed += 1;\n          log.info({ topic, jobId: job.id, status: 'completed' }, 'memq.completed');\n        } catch (err) {\n          c.failed += 1;\n          log.error({ topic, jobId: job.id, status: 'failed', err }, 'memq.failed');\n          // retry with backoff schedule; on max, move to DLQ\n          const attempt = Number(job.payload?.__attempt || 1);\n          const nextIndex = attempt; // index into backoffSchedule for next delay\n          const nextDelay = this.backoffScheduleMs[nextIndex];\n          if (Number.isFinite(nextDelay)) {\n            const nextPayload = { ...job.payload, __attempt: attempt + 1 };\n            await this.enqueue(topic, nextPayload, { delay: nextDelay });\n            try { metrics.retriesTotal.inc({ provider: String(job.payload?.provider || 'queue') }); } catch {}\n          } else {\n            const dlqTopic = (topic === 'step.ready') ? 'step.dlq' : `${topic}.dlq`;\n            const dlqs = this.dlq.get(dlqTopic) || [];\n            dlqs.push({ id: this.idSeq++, payload: job.payload, runAt: Date.now(), enqueuedAt: Date.now() } as Job);\n            this.dlq.set(dlqTopic, dlqs);\n            log.warn({ topic, jobId: job.id, attempts: attempt, dlqTopic }, 'memq.to_dlq');\n          }\n        } finally {\n          c.active = Math.max(0, c.active - 1);\n          this.active.set(topic, Math.max(0, (this.active.get(topic) || 1) - 1));\n          this.updateGauges(topic);\n          if (this.queues.get(topic)!.length) setImmediate(() => this.drain(topic));\n        }\n      })();\n    }\n  }\n\n  async getCounts(topic: string) {\n    this.ensure(topic);\n    return this.counts.get(topic)!;\n  }\n\n  hasSubscribers(topic: string): boolean {\n    const arr = this.subs.get(topic) || [];\n    return arr.length > 0;\n  }\n\n  async listDlq(topic: string) {\n    return (this.dlq.get(topic) || []).map(j => j.payload);\n  }\n  async rehydrateDlq(topic: string, max = 50) {\n    const arr = this.dlq.get(topic) || [];\n    const take = arr.splice(0, Math.max(0, Math.min(max, arr.length)));\n    this.dlq.set(topic, arr);\n    for (const job of take) {\n      const payload = { ...job.payload, __attempt: 1 };\n      const from = topic.endsWith('.dlq') ? topic.replace(/\\.dlq$/, '.ready') : topic;\n      await this.enqueue(from, payload, { delay: 0 });\n    }\n    return take.length;\n  }\n\n  /** Oldest waiting job age in ms (excludes delayed jobs not yet due). */\n  getOldestAgeMs(topic: string): number | null {\n    this.ensure(topic);\n    const q = this.queues.get(topic)!;\n    const now = Date.now();\n    let oldest: number | null = null;\n    for (const j of q) {\n      if (j.runAt > now) continue; // not yet due\n      const age = now - j.enqueuedAt;\n      if (oldest == null || age > oldest) oldest = age;\n    }\n    return oldest;\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Volumes/Development/nofx-local-starter/src/lib/queue/RedisAdapter.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":35,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":35,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1520,1523],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1520,1523],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":38,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":38,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1659,1662],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1659,1662],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":48,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":48,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2027,2030],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2027,2030],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":53,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":53,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2243,2246],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2243,2246],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Queue, Worker, JobsOptions, Job } from \"bullmq\";\nimport IORedis from \"ioredis\";\nimport { log } from \"../logger\";\nimport { metrics } from \"../metrics\";\n\nexport class RedisQueueAdapter {\n  connection = new IORedis(process.env.REDIS_URL || \"redis://localhost:6379\", {\n    maxRetriesPerRequest: null\n  });\n  queues = new Map<string, Queue>();\n  private readonly backoffScheduleMs = [0, 2000, 5000, 10000];\n  private readonly DLQ_TOPIC = 'step.dlq';\n\n  private getQueue(topic: string) {\n    if (!this.queues.has(topic)) {\n      const q = new Queue(topic, { connection: this.connection });\n      this.queues.set(topic, q);\n    }\n    return this.queues.get(topic)!;\n  }\n  private async updateGauges(topic: string) {\n    try {\n      const q = this.getQueue(topic);\n      const c = await q.getJobCounts('waiting','active','completed','failed','delayed','paused');\n      metrics.queueDepth.set({ topic, state: 'waiting' }, c.waiting || 0);\n      metrics.queueDepth.set({ topic, state: 'active' }, c.active || 0);\n      metrics.queueDepth.set({ topic, state: 'completed' }, c.completed || 0);\n      metrics.queueDepth.set({ topic, state: 'failed' }, c.failed || 0);\n      metrics.queueDepth.set({ topic, state: 'delayed' }, c.delayed || 0);\n      metrics.queueDepth.set({ topic, state: 'paused' }, c.paused || 0);\n      metrics.dlqSize.set({ topic }, c.failed || 0);\n      // Oldest waiting job age (approximate, scans up to 20 waiting jobs)\n      try {\n        const now = Date.now();\n        const waiting = await (q as any).getWaiting(0, 19) as Job[];\n        let oldestTs: number | null = null;\n        for (const j of waiting) {\n          const ts = (j as any).timestamp as number | undefined;\n          if (typeof ts === 'number') {\n            if (oldestTs == null || ts < oldestTs) oldestTs = ts;\n          }\n        }\n        const age = oldestTs != null ? Math.max(0, now - oldestTs) : 0;\n        metrics.queueOldestAgeMs.set({ topic }, age);\n      } catch {}\n    } catch {}\n  }\n  async enqueue(topic: string, payload: any, options?: JobsOptions) {\n    await this.getQueue(topic).add(\"job\", payload, options);\n    log.info({ topic, payload }, \"enqueued\");\n    this.updateGauges(topic);\n  }\n  subscribe(topic: string, handler: (payload:any)=>Promise<void>) {\n    const concurrency = Math.max(1, Number(process.env.WORKER_CONCURRENCY || process.env.NOFX_WORKER_CONCURRENCY || 1));\n    const w = new Worker(topic, async (job) => {\n      await handler(job.data);\n    }, { connection: this.connection, concurrency });\n    w.on('ready', () => { log.info({ topic }, 'worker.ready'); this.updateGauges(topic); });\n    w.on('active', (job) => { log.info({ topic, jobId: job.id }, 'worker.active'); this.updateGauges(topic); });\n    w.on('completed', (job) => { log.info({ topic, jobId: job.id, status: 'completed' }, 'worker.completed'); this.updateGauges(topic); });\n    w.on('failed', async (job, err) => {\n      log.error({ topic, jobId: job?.id, status: 'failed', err }, 'worker.failed');\n      try {\n        if (!job) return;\n        const data = job.data || {};\n        const attempt = Number(data.__attempt || 1);\n        const nextDelay = this.backoffScheduleMs[attempt];\n        if (Number.isFinite(nextDelay)) {\n          const nextPayload = { ...data, __attempt: attempt + 1 };\n          await this.getQueue(topic).add('job', nextPayload, { delay: nextDelay });\n          try { metrics.retriesTotal.inc({ provider: String(data?.provider || 'queue') }); } catch {}\n        } else {\n          await this.getQueue(this.DLQ_TOPIC).add('job', data, { delay: 0 });\n          log.warn({ topic, jobId: job.id, attempts: attempt }, 'redis.to_dlq');\n        }\n      } catch (e) {\n        log.error({ e }, 'redis.failed-handler.error');\n      }\n      this.updateGauges(topic);\n    });\n    log.info({ topic }, \"subscribed\");\n  }\n\n  async getCounts(topic: string) {\n    const q = this.getQueue(topic);\n    return q.getJobCounts('waiting','active','completed','failed','delayed','paused');\n  }\n\n  constructor() {\n    this.connection.on('connect', () => log.info('redis.connect'));\n    this.connection.on('ready', () => log.info('redis.ready'));\n    this.connection.on('error', (err) => log.error({ err }, 'redis.error'));\n    this.connection.on('reconnecting', () => log.warn('redis.reconnecting'));\n    this.connection.on('end', () => log.warn('redis.end'));\n  }\n\n  async listDlq(topic: string) {\n    const q = this.getQueue(topic);\n    const jobs: Job[] = await q.getJobs(['waiting','delayed']);\n    return jobs.map(j => j.data);\n  }\n  async rehydrateDlq(topic: string, max = 50) {\n    const q = this.getQueue(topic);\n    const jobs: Job[] = await q.getJobs(['waiting','delayed']);\n    const take = jobs.slice(0, max);\n    let n = 0;\n    for (const j of take) {\n      await this.getQueue('step.ready').add('job', { ...j.data, __attempt: 1 }, { delay: 0 });\n      await j.remove();\n      n += 1;\n    }\n    return n;\n  }\n\n  // Not easily available without scanning Redis sorted sets; return null for now\n  getOldestAgeMs(_topic: string): number | null {\n    return null;\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Volumes/Development/nofx-local-starter/src/lib/queue/index.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":5,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":5,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[228,231],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[228,231],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":9,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[419,422],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[419,422],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":10,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[536,539],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[536,539],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { RedisQueueAdapter } from \"./RedisAdapter\";\nimport { MemoryQueueAdapter } from \"./MemoryAdapter\";\nimport type { JobsOptions } from \"bullmq\";\nconst DRIVER = (process.env.QUEUE_DRIVER || 'memory').toLowerCase();\nlet impl: any;\nif (DRIVER === 'redis') impl = new RedisQueueAdapter();\nelse impl = new MemoryQueueAdapter();\nexport const STEP_READY_TOPIC = \"step.ready\";\nexport const enqueue = (topic:string, payload:any, options?: JobsOptions)=>impl.enqueue(topic,payload,options);\nexport const subscribe = (topic:string, handler:(p:any)=>Promise<void>)=>impl.subscribe(topic,handler);\nexport const getCounts = (topic:string)=>impl.getCounts(topic);\nexport const hasSubscribers = (topic:string)=>typeof impl.hasSubscribers === 'function' ? impl.hasSubscribers(topic) : true;\nexport const STEP_DLQ_TOPIC = \"step.dlq\";\nexport const OUTBOX_TOPIC = \"event.out\";\nexport const listDlq = (topic:string)=> typeof impl.listDlq === 'function' ? impl.listDlq(topic) : Promise.resolve([]);\nexport const rehydrateDlq = (topic:string, max=50)=> typeof impl.rehydrateDlq === 'function' ? impl.rehydrateDlq(topic, max) : Promise.resolve(0);\nexport const getOldestAgeMs = (topic:string): number | null => typeof impl.getOldestAgeMs === 'function' ? impl.getOldestAgeMs(topic) : null;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Volumes/Development/nofx-local-starter/src/lib/secrets.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":11,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[304,307],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[304,307],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import fs from 'node:fs';\nimport path from 'node:path';\n\nexport type SecretOptions = {\n  runId: string;\n  scope?: string; // e.g., 'github', 'llm', 'deploy'\n  allowEnv?: boolean;\n  envAllowed?: string[]; // whitelist of env names when falling back to process.env\n};\n\nfunction readJsonSafe(file: string): any {\n  try { return JSON.parse(fs.readFileSync(file, 'utf8')); } catch { return {}; }\n}\n\nfunction loadScopedSecrets(runId: string, scope?: string): Record<string,string> {\n  const base = path.join(process.cwd(), 'local_data', 'secrets');\n  const out: Record<string,string> = {};\n  if (!scope) return out;\n  const files = [\n    path.join(base, `${runId}.${scope}.json`), // most specific (per-run)\n    path.join(base, `${scope}.json`)          // default for scope\n  ];\n  for (const f of files) {\n    if (fs.existsSync(f)) {\n      const obj = readJsonSafe(f) || {};\n      for (const k of Object.keys(obj)) {\n        if (typeof obj[k] === 'string' && !(k in out)) out[k] = String(obj[k]);\n      }\n    }\n  }\n  return out;\n}\n\nexport function getSecret(name: string, opts: SecretOptions): string | undefined {\n  const scoped = loadScopedSecrets(opts.runId, opts.scope);\n  if (scoped && typeof scoped[name] === 'string') return scoped[name];\n  if (opts.allowEnv) {\n    if (Array.isArray(opts.envAllowed) && opts.envAllowed.length > 0) {\n      if (!opts.envAllowed.includes(name)) return undefined;\n    }\n    return process.env[name];\n  }\n  return undefined;\n}\n\nexport function buildMinimalEnv(envAllowed?: string[]): NodeJS.ProcessEnv {\n  const baseAllow = new Set(['PATH','HOME','USER','SHELL','TMP','TEMP','PWD','NODE_ENV','TZ','LANG','LC_ALL']);\n  const allow = new Set([...(envAllowed || []), ...baseAllow]);\n  const out: NodeJS.ProcessEnv = {};\n  for (const k of allow) {\n    const v = process.env[String(k)];\n    if (v != null) out[String(k)] = v;\n  }\n  return out;\n}\n\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Volumes/Development/nofx-local-starter/src/lib/settings.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":66,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":66,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1924,1927],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1924,1927],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":66,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":66,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1936,1939],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1936,1939],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":66,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":66,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1946,1949],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1946,1949],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":66,"column":72,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":66,"endColumn":75,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1956,1959],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1956,1959],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":100,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":100,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3425,3428],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3425,3428],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":101,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":101,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3509,3512],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3509,3512],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":102,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":102,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3592,3595],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3592,3595],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":105,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":105,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3694,3697],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3694,3697],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":106,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":106,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3789,3792],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3789,3792],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":107,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":107,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3892,3895],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3892,3895],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":109,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":109,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3999,4002],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3999,4002],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":110,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":110,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4093,4096],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4093,4096],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":113,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":113,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4194,4197],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4194,4197],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":124,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":124,"endColumn":13},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":136,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":136,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5048,5051],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5048,5051],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":147,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":147,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5612,5615],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5612,5615],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { query } from './db';\n\nexport type ApprovalsSettings = {\n  dbWrites: 'none'|'dangerous'|'all';\n  allowWaive: boolean;\n};\nexport type GatesSettings = {\n  typecheck: boolean;\n  lint: boolean;\n  unit: boolean;\n  coverageThreshold: number; // 0..1\n  sast?: boolean;\n  audit?: boolean;\n  secrets?: boolean;\n};\nexport type Settings = {\n  approvals: ApprovalsSettings;\n  gates: GatesSettings;\n  llm: LlmSettings;\n  ops?: OpsSettings;\n};\n\nexport type LlmSettings = {\n  order: {\n    codegen: Array<'openai'|'anthropic'|'gemini'>;\n    reasoning: Array<'openai'|'anthropic'|'gemini'>;\n    docs: Array<'openai'|'anthropic'|'gemini'>;\n  };\n  modelOrder?: { docs?: string[]; reasoning?: string[]; codegen?: string[] };\n  providers?: Record<string, { kind: 'openai-compatible'|'http'; baseUrl?: string }>;\n  pricing?: Record<string, { inputPer1M?: number; outputPer1M?: number }>;\n};\n\nexport type OpsSettings = {\n  backupIntervalMin?: number; // 0 disables periodic backups\n};\n\nconst DEFAULTS: Settings = {\n  approvals: { dbWrites: 'dangerous', allowWaive: true },\n  gates: { typecheck: true, lint: true, unit: true, coverageThreshold: 0.9, sast: true, audit: true, secrets: true },\n  llm: {\n    order: {\n      codegen: ['openai','anthropic','gemini'],\n      reasoning: ['anthropic','openai','gemini'],\n      docs: ['gemini','anthropic','openai']\n    },\n    modelOrder: { docs: [], reasoning: [], codegen: [] },\n    providers: {},\n    pricing: {}\n  },\n  ops: { backupIntervalMin: 0 }\n};\n\nasync function ensureSettingsSchema() {\n  try {\n    await query(`alter table nofx.settings add column if not exists llm jsonb not null default '{}'::jsonb`);\n  } catch {}\n  try {\n    await query(`alter table nofx.settings add column if not exists ops jsonb not null default '{}'::jsonb`);\n  } catch {}\n}\n\nexport async function getSettings(): Promise<Settings> {\n  try {\n    await ensureSettingsSchema();\n    const r = await query<{ approvals: any; gates: any; llm: any; ops: any }>(`select approvals, gates, llm, ops from nofx.settings where id='default' limit 1`);\n    if (!r.rows[0]) return DEFAULTS;\n    const approvals = { ...DEFAULTS.approvals, ...(r.rows[0].approvals || {}) };\n    const gates = { ...DEFAULTS.gates, ...(r.rows[0].gates || {}) };\n    const llm: LlmSettings = {\n      order: {\n        codegen: (r.rows[0].llm?.order?.codegen || DEFAULTS.llm.order.codegen),\n        reasoning: (r.rows[0].llm?.order?.reasoning || DEFAULTS.llm.order.reasoning),\n        docs: (r.rows[0].llm?.order?.docs || DEFAULTS.llm.order.docs)\n      },\n      modelOrder: {\n        docs: r.rows[0].llm?.modelOrder?.docs || [],\n        reasoning: r.rows[0].llm?.modelOrder?.reasoning || [],\n        codegen: r.rows[0].llm?.modelOrder?.codegen || []\n      },\n      providers: r.rows[0].llm?.providers || {},\n      pricing: r.rows[0].llm?.pricing || {}\n    };\n    const ops: OpsSettings = {\n      backupIntervalMin: r.rows[0].ops?.backupIntervalMin ?? DEFAULTS.ops?.backupIntervalMin\n    };\n    return { approvals, gates, llm, ops };\n  } catch {\n    return DEFAULTS; // schema may not be migrated yet; fail-safe defaults\n  }\n}\n\nexport async function updateSettings(patch: Partial<Settings>): Promise<Settings> {\n  const current = await getSettings();\n  const next: Settings = {\n    approvals: { ...current.approvals, ...(patch.approvals || {}) },\n    gates: { ...current.gates, ...(patch.gates || {}) },\n    llm: {\n      order: {\n        codegen: (patch as any).llm?.order?.codegen || current.llm.order.codegen,\n        reasoning: (patch as any).llm?.order?.reasoning || current.llm.order.reasoning,\n        docs: (patch as any).llm?.order?.docs || current.llm.order.docs,\n      },\n      modelOrder: {\n        docs: (patch as any).llm?.modelOrder?.docs || current.llm.modelOrder?.docs || [],\n        reasoning: (patch as any).llm?.modelOrder?.reasoning || current.llm.modelOrder?.reasoning || [],\n        codegen: (patch as any).llm?.modelOrder?.codegen || current.llm.modelOrder?.codegen || []\n      },\n      providers: (patch as any).llm?.providers || current.llm.providers || {},\n      pricing: normalizePricing((patch as any).llm?.pricing || current.llm.pricing || {})\n    },\n    ops: {\n      backupIntervalMin: (patch as any).ops?.backupIntervalMin ?? current.ops?.backupIntervalMin ?? DEFAULTS.ops?.backupIntervalMin\n    }\n  };\n  try {\n    await ensureSettingsSchema();\n    await query(\n      `insert into nofx.settings (id, approvals, gates, llm, ops)\n       values ('default', $1, $2, $3, $4)\n       on conflict(id) do update set approvals=excluded.approvals, gates=excluded.gates, llm=excluded.llm, ops=excluded.ops, updated_at=now()`,\n      [next.approvals, next.gates, next.llm, next.ops]\n    );\n  } catch (e) {\n    // fallback for older schema without llm\n    await query(\n      `insert into nofx.settings (id, approvals, gates)\n       values ('default', $1, $2)\n       on conflict(id) do update set approvals=excluded.approvals, gates=excluded.gates, updated_at=now()`,\n      [next.approvals, next.gates]\n    );\n  }\n  return next;\n}\n\nfunction normalizePricing(input: any): LlmSettings['pricing'] {\n  const out: LlmSettings['pricing'] = {};\n  const keys = input ? Object.keys(input) : [];\n  for (const provider of keys) {\n    const p = input?.[provider] || {};\n    let inPer1M = p.inputPer1M;\n    let outPer1M = p.outputPer1M;\n    // Backward-compat: convert per 1K to per 1M if present\n    if ((inPer1M == null) && p.inputPer1K != null) inPer1M = Number(p.inputPer1K) * 1000;\n    if ((outPer1M == null) && p.outputPer1K != null) outPer1M = Number(p.outputPer1K) * 1000;\n    if (inPer1M != null || outPer1M != null) {\n      (out as any)[provider] = { inputPer1M: inPer1M, outputPer1M: outPer1M };\n    }\n  }\n  return out;\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Volumes/Development/nofx-local-starter/src/lib/store.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":7,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[227,230],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[227,230],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":8,"column":83,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":86,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[355,358],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[355,358],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":8,"column":98,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":101,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[370,373],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[370,373],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":9,"column":88,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":91,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[566,569],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[566,569],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":11,"column":90,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":93,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[845,848],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[845,848],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":20,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1254,1257],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1254,1257],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":55,"column":81,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":55,"endColumn":84,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3088,3091],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3088,3091],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":63,"column":147,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":63,"endColumn":150,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3586,3589],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3586,3589],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":85,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":85,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4636,4639],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4636,4639],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":112,"column":68,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":112,"endColumn":71,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5934,5937],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5934,5937],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":137,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":137,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7417,7420],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7417,7420],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":158,"column":84,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":158,"endColumn":87,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8569,8572],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8569,8572],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":181,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":181,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9802,9805],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9802,9805],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":182,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":182,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9895,9898],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9895,9898],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":204,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":204,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10949,10952],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10949,10952],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":205,"column":131,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":205,"endColumn":134,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11108,11111],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11108,11111],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":211,"column":124,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":211,"endColumn":127,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11495,11498],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11495,11498],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":211,"column":147,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":211,"endColumn":150,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11518,11521],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11518,11521],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":214,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":214,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11639,11642],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11639,11642],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":217,"column":70,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":217,"endColumn":73,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11877,11880],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11877,11880],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":223,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":223,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12247,12250],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12247,12250],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":232,"column":191,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":232,"endColumn":194,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12994,12997],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12994,12997],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":232,"column":214,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":232,"endColumn":217,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13017,13020],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13017,13020],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":232,"column":241,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":232,"endColumn":244,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13044,13047],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13044,13047],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":232,"column":266,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":232,"endColumn":269,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13069,13072],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13069,13072],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":241,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":241,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13672,13675],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13672,13675],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":249,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":249,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14211,14214],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14211,14214],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":252,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":252,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14517,14520],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14517,14520],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":255,"column":189,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":255,"endColumn":192,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14971,14974],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14971,14974],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":255,"column":212,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":255,"endColumn":215,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14994,14997],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14994,14997],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":261,"column":73,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":261,"endColumn":76,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15349,15352],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15349,15352],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":265,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":265,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15649,15652],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15649,15652],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":269,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":269,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15918,15921],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15918,15921],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":272,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":272,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16103,16106],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16103,16106],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":276,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":276,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16340,16343],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16340,16343],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":35,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import fs from 'node:fs';\nimport fsp from 'node:fs/promises';\nimport path from 'node:path';\nimport { randomUUID } from 'node:crypto';\nimport { query as pgQuery } from './db';\n\ntype RunRow = { id: string; status: string; plan?: any; created_at: string; ended_at?: string };\ntype StepRow = { id: string; run_id: string; name: string; tool: string; inputs?: any; outputs?: any; status: string; created_at: string; started_at?: string; ended_at?: string; idempotency_key?: string };\ntype EventRow = { id: string; run_id: string; step_id?: string; type: string; payload: any; created_at: string };\ntype GateRow = { id: string; run_id: string; step_id: string; gate_type: string; status: string; created_at: string; approved_by?: string; approved_at?: string };\ntype ArtifactRow = { id: string; step_id: string; type: string; path: string; metadata?: any; created_at: string };\n\nconst DATA_DRIVER = (process.env.DATA_DRIVER || (process.env.QUEUE_DRIVER === 'memory' ? 'fs' : 'db')).toLowerCase();\nconst ROOT = path.join(process.cwd(), 'local_data');\nconst FS_INBOX_KEYS = new Set<string>();\n\nfunction ensureDirSync(p: string) { if (!fs.existsSync(p)) fs.mkdirSync(p, { recursive: true }); }\n\n// ---------- FS DRIVER ----------\nasync function fsCreateRun(plan: any): Promise<RunRow> {\n  ensureDirSync(ROOT);\n  const id = randomUUID();\n  const created_at = new Date().toISOString();\n  const run: RunRow = { id, status: 'queued', plan, created_at };\n  const dir = path.join(ROOT, 'runs', id);\n  ensureDirSync(dir);\n  await fsp.writeFile(path.join(dir, 'run.json'), JSON.stringify(run, null, 2));\n  // index\n  const idxDir = path.join(ROOT, 'runs'); ensureDirSync(idxDir);\n  await fsp.writeFile(path.join(idxDir, 'index.json'), JSON.stringify(await fsListRuns(100), null, 2)).catch(()=>{});\n  return run;\n}\nasync function fsGetRun(id: string): Promise<RunRow | undefined> {\n  try { const s = await fsp.readFile(path.join(ROOT, 'runs', id, 'run.json'), 'utf8'); return JSON.parse(s); } catch { return undefined; }\n}\nasync function fsUpdateRun(id: string, patch: Partial<RunRow>): Promise<void> {\n  const run = await fsGetRun(id); if (!run) return;\n  Object.assign(run, patch); await fsp.writeFile(path.join(ROOT, 'runs', id, 'run.json'), JSON.stringify(run, null, 2));\n}\nasync function fsListRuns(limit = 100): Promise<Array<Pick<RunRow,'id'|'status'|'created_at'> & { title?: string }>> {\n  const dir = path.join(ROOT, 'runs'); ensureDirSync(dir);\n  const ids = (await fsp.readdir(dir)).filter(d => d !== 'index.json');\n  const rows: Array<Pick<RunRow,'id'|'status'|'created_at'> & { title?: string }> = [];\n  for (const id of ids) {\n    try {\n      const s = await fsp.readFile(path.join(dir, id, 'run.json'), 'utf8');\n      const r = JSON.parse(s);\n      const title = (r.plan && r.plan.goal) ? String(r.plan.goal) : '';\n      rows.push({ id: r.id, status: r.status, created_at: r.created_at, title });\n    } catch {}\n  }\n  rows.sort((a,b)=> (a.created_at < b.created_at ? 1 : -1));\n  return rows.slice(0, limit);\n}\nasync function fsCreateStep(runId: string, name: string, tool: string, inputs?: any, idempotencyKey?: string): Promise<StepRow> {\n  const id = randomUUID();\n  const created_at = new Date().toISOString();\n  // If an idempotency key is provided, check existing steps for a match and return it\n  if (idempotencyKey) {\n    const existing = await fsFindStepByIdempotencyKey(runId, idempotencyKey);\n    if (existing) return existing;\n  }\n  const step: StepRow = { id, run_id: runId, name, tool, inputs: inputs || {}, status: 'queued', created_at, idempotency_key: idempotencyKey } as any;\n  const dir = path.join(ROOT, 'runs', runId, 'steps'); ensureDirSync(dir);\n  await fsp.writeFile(path.join(dir, `${id}.json`), JSON.stringify(step, null, 2));\n  return step;\n}\nasync function fsGetStep(id: string): Promise<StepRow | undefined> {\n  // Search all runs' steps; optimize by tracking index later\n  const runsDir = path.join(ROOT, 'runs'); ensureDirSync(runsDir);\n  for (const runId of await fsp.readdir(runsDir)) {\n    if (runId === 'index.json') continue;\n    const p = path.join(runsDir, runId, 'steps', `${id}.json`);\n    try { const s = await fsp.readFile(p, 'utf8'); return JSON.parse(s); } catch {}\n  }\n  return undefined;\n}\nasync function fsFindStepByIdempotencyKey(runId: string, key: string): Promise<StepRow | undefined> {\n  const dir = path.join(ROOT, 'runs', runId, 'steps'); ensureDirSync(dir);\n  const files = await fsp.readdir(dir).catch(()=>[] as string[]);\n  for (const f of files) {\n    try {\n      const s = await fsp.readFile(path.join(dir, f), 'utf8');\n      const st = JSON.parse(s) as StepRow;\n      if ((st as any).idempotency_key === key) return st;\n    } catch {}\n  }\n  return undefined;\n}\nasync function fsUpdateStep(id: string, patch: Partial<StepRow>): Promise<void> {\n  const runsDir = path.join(ROOT, 'runs'); ensureDirSync(runsDir);\n  for (const runId of await fsp.readdir(runsDir)) {\n    if (runId === 'index.json') continue;\n    const p = path.join(runsDir, runId, 'steps', `${id}.json`);\n    try { const s = await fsp.readFile(p, 'utf8'); const step = JSON.parse(s); Object.assign(step, patch); await fsp.writeFile(p, JSON.stringify(step, null, 2)); return; } catch {}\n  }\n}\nasync function fsListStepsByRun(runId: string): Promise<StepRow[]> {\n  const dir = path.join(ROOT, 'runs', runId, 'steps'); ensureDirSync(dir);\n  const files = await fsp.readdir(dir).catch(()=>[] as string[]);\n  const rows: StepRow[] = [];\n  for (const f of files) {\n    try { const s = await fsp.readFile(path.join(dir, f), 'utf8'); rows.push(JSON.parse(s)); } catch {}\n  }\n  rows.sort((a,b)=> (a.created_at < b.created_at ? -1 : 1));\n  return rows;\n}\nasync function fsCountRemainingSteps(runId: string): Promise<number> {\n  const steps = await fsListStepsByRun(runId);\n  return steps.filter(s => !['succeeded','cancelled'].includes(s.status)).length;\n}\nasync function fsRecordEvent(runId: string, type: string, payload: any = {}, stepId?: string): Promise<void> {\n  const dir = path.join(ROOT, 'runs', runId); ensureDirSync(dir);\n  const file = path.join(dir, 'events.json');\n  const rows: EventRow[] = JSON.parse(await fsp.readFile(file, 'utf8').catch(()=> '[]'));\n  rows.push({ id: randomUUID(), run_id: runId, step_id: stepId, type, payload, created_at: new Date().toISOString() });\n  await fsp.writeFile(file, JSON.stringify(rows, null, 2));\n}\nasync function fsListEvents(runId: string): Promise<EventRow[]> {\n  const file = path.join(ROOT, 'runs', runId, 'events.json');\n  const rows: EventRow[] = JSON.parse(await fsp.readFile(file, 'utf8').catch(()=> '[]'));\n  rows.sort((a,b)=> (a.created_at < b.created_at ? -1 : 1));\n  return rows;\n}\nasync function fsCreateOrGetGate(runId: string, stepId: string, gate_type: string): Promise<GateRow> {\n  const file = path.join(ROOT, 'runs', runId, 'gates.json');\n  const rows: GateRow[] = JSON.parse(await fsp.readFile(file, 'utf8').catch(()=> '[]'));\n  let g = rows.filter(r => r.step_id === stepId && r.gate_type === gate_type).sort((a,b)=> (a.created_at < b.created_at ? 1 : -1))[0];\n  if (!g) {\n    g = { id: randomUUID(), run_id: runId, step_id: stepId, gate_type, status: 'pending', created_at: new Date().toISOString() };\n    rows.push(g);\n    await fsp.writeFile(file, JSON.stringify(rows, null, 2));\n  }\n  return g;\n}\nasync function fsUpdateGate(id: string, patch: Partial<GateRow>): Promise<void> {\n  const file = path.join(ROOT, 'runs', (patch as any).run_id || '', 'gates.json');\n  const rows: GateRow[] = JSON.parse(await fsp.readFile(file, 'utf8').catch(()=> '[]'));\n  const i = rows.findIndex(r => r.id === id);\n  if (i >= 0) {\n    const next = { ...rows[i], ...patch } as GateRow;\n    if (patch.approved_by && !patch.approved_at) next.approved_at = new Date().toISOString();\n    rows[i] = next;\n    await fsp.writeFile(file, JSON.stringify(rows, null, 2));\n  }\n}\nasync function fsGetLatestGate(runId: string, stepId: string): Promise<GateRow | undefined> {\n  const file = path.join(ROOT, 'runs', runId, 'gates.json');\n  const rows: GateRow[] = JSON.parse(await fsp.readFile(file, 'utf8').catch(()=> '[]'));\n  return rows.filter(r => r.step_id === stepId).sort((a,b)=> (a.created_at < b.created_at ? 1 : -1))[0];\n}\nasync function fsListGatesByRun(runId: string): Promise<GateRow[]> {\n  const file = path.join(ROOT, 'runs', runId, 'gates.json');\n  const rows: GateRow[] = JSON.parse(await fsp.readFile(file, 'utf8').catch(()=> '[]'));\n  rows.sort((a,b)=> (a.created_at < b.created_at ? -1 : 1));\n  return rows;\n}\nasync function fsAddArtifact(stepId: string, type: string, pth: string, metadata?: any): Promise<ArtifactRow> {\n  const step = await fsGetStep(stepId); if (!step) throw new Error('step not found');\n  const file = path.join(ROOT, 'runs', step.run_id, 'artifacts.json');\n  const rows: ArtifactRow[] = JSON.parse(await fsp.readFile(file, 'utf8').catch(()=> '[]'));\n  const row: ArtifactRow = { id: randomUUID(), step_id: stepId, type, path: pth, metadata: metadata || {}, created_at: new Date().toISOString() };\n  rows.push(row);\n  await fsp.writeFile(file, JSON.stringify(rows, null, 2));\n  return row;\n}\nasync function fsListArtifactsByRun(runId: string): Promise<Array<ArtifactRow & { step_name?: string }>> {\n  const file = path.join(ROOT, 'runs', runId, 'artifacts.json');\n  const rows: ArtifactRow[] = JSON.parse(await fsp.readFile(file, 'utf8').catch(()=> '[]'));\n  const steps = await fsListStepsByRun(runId);\n  const names = new Map(steps.map(s => [s.id, s.name] as const));\n  return rows.map(r => ({ ...r, step_name: names.get(r.step_id) }));\n}\n\n// ---------- Inbox/Outbox (FS minimal impl) ----------\nasync function fsInboxMarkIfNew(key: string): Promise<boolean> {\n  if (FS_INBOX_KEYS.has(key)) return false;\n  FS_INBOX_KEYS.add(key);\n  return true;\n}\ntype OutboxRow = { id: string; topic: string; payload: any; sent: boolean; created_at: string };\nasync function fsOutboxAdd(topic: string, payload: any): Promise<void> {\n  const file = path.join(ROOT, 'outbox.json');\n  const rows: OutboxRow[] = JSON.parse(await fsp.readFile(file, 'utf8').catch(()=> '[]'));\n  rows.push({ id: randomUUID(), topic, payload, sent: false, created_at: new Date().toISOString() });\n  await fsp.writeFile(file, JSON.stringify(rows, null, 2));\n}\nasync function fsOutboxListUnsent(limit = 50): Promise<OutboxRow[]> {\n  const file = path.join(ROOT, 'outbox.json');\n  const rows: OutboxRow[] = JSON.parse(await fsp.readFile(file, 'utf8').catch(()=> '[]'));\n  return rows.filter(r => !r.sent).slice(0, limit);\n}\nasync function fsOutboxMarkSent(id: string): Promise<void> {\n  const file = path.join(ROOT, 'outbox.json');\n  const rows: OutboxRow[] = JSON.parse(await fsp.readFile(file, 'utf8').catch(()=> '[]'));\n  const idx = rows.findIndex(r => r.id === id);\n  if (idx >= 0) { rows[idx].sent = true; await fsp.writeFile(file, JSON.stringify(rows, null, 2)); }\n}\n\n// ---------- PUBLIC API ----------\nexport const store = {\n  driver: DATA_DRIVER,\n  // runs\n  createRun: async (plan:any) => DATA_DRIVER === 'db'\n    ? (await pgQuery<{ id:string }>(`insert into nofx.run (plan, status) values ($1, 'queued') returning id`, [plan])).rows[0] as any\n    : fsCreateRun(plan),\n  getRun: async (id:string) => DATA_DRIVER === 'db'\n    ? (await pgQuery<RunRow>(`select * from nofx.run where id = $1`, [id])).rows[0]\n    : fsGetRun(id),\n  updateRun: async (id:string, patch: Partial<RunRow>) => DATA_DRIVER === 'db'\n    ? pgQuery(`update nofx.run set status=coalesce($2,status), ended_at=coalesce($3,ended_at) where id=$1`, [id, (patch as any).status, (patch as any).ended_at])\n    : fsUpdateRun(id, patch),\n  listRuns: async (limit=100) => DATA_DRIVER === 'db'\n    ? (await pgQuery<any>(`select id,status,created_at, coalesce(plan->>'goal','') as title from nofx.run order by created_at desc limit ${limit}`)).rows\n    : fsListRuns(limit),\n  // steps\n  createStep: async (runId:string, name:string, tool:string, inputs?:any, idempotencyKey?: string) => DATA_DRIVER === 'db'\n    ? (await pgQuery<{ id:string }>(\n        `insert into nofx.step (run_id, name, tool, inputs, status, idempotency_key)\n         values ($1,$2,$3,$4,'queued',$5)\n         on conflict (idempotency_key) do nothing\n         returning id`, [runId, name, tool, inputs || {}, idempotencyKey || null]\n      )).rows[0] as any\n    : fsCreateStep(runId, name, tool, inputs, idempotencyKey),\n  getStep: async (id:string) => DATA_DRIVER === 'db'\n    ? (await pgQuery<StepRow>(`select * from nofx.step where id = $1`, [id])).rows[0]\n    : fsGetStep(id),\n  getStepByIdempotencyKey: async (runId:string, key:string) => DATA_DRIVER === 'db'\n    ? (await pgQuery<StepRow>(`select * from nofx.step where run_id=$1 and idempotency_key=$2`, [runId, key])).rows[0]\n    : fsFindStepByIdempotencyKey(runId, key),\n  updateStep: async (id:string, patch: Partial<StepRow>) => DATA_DRIVER === 'db'\n    ? pgQuery(`update nofx.step set status=coalesce($2,status), started_at=coalesce($3,started_at), ended_at=coalesce($4,ended_at), outputs=coalesce($5,outputs) where id=$1`, [id, (patch as any).status, (patch as any).started_at, (patch as any).ended_at, (patch as any).outputs])\n    : fsUpdateStep(id, patch),\n  listStepsByRun: async (runId:string) => DATA_DRIVER === 'db'\n    ? (await pgQuery<StepRow>(`select * from nofx.step where run_id = $1 order by created_at`, [runId])).rows\n    : fsListStepsByRun(runId),\n  countRemainingSteps: async (runId:string) => DATA_DRIVER === 'db'\n    ? Number((await pgQuery<{ count: string }>(`select count(*)::int as count from nofx.step where run_id=$1 and status not in ('succeeded','cancelled')`, [runId])).rows[0].count)\n    : fsCountRemainingSteps(runId),\n  // events\n  recordEvent: async (runId:string, type:string, payload:any={}, stepId?:string) => DATA_DRIVER === 'db'\n    ? pgQuery(`insert into nofx.event (run_id, type, payload) values ($1, $2, $3)`, [ runId, type, payload ])\n    : fsRecordEvent(runId, type, payload, stepId),\n  listEvents: async (runId:string) => DATA_DRIVER === 'db'\n    ? (await pgQuery<EventRow>(`select * from nofx.event where run_id = $1 order by created_at asc`, [runId])).rows\n    : fsListEvents(runId),\n  // gates\n  createOrGetGate: async (runId:string, stepId:string, gateType:string) => DATA_DRIVER === 'db'\n    ? (await pgQuery<any>(`insert into nofx.gate (run_id, step_id, gate_type, status) values ($1,$2,$3,'pending') on conflict do nothing returning *`, [runId, stepId, gateType]))\n    : fsCreateOrGetGate(runId, stepId, gateType),\n  getLatestGate: async (runId:string, stepId:string) => DATA_DRIVER === 'db'\n    ? (await pgQuery<any>(`select * from nofx.gate where run_id=$1 and step_id=$2 order by created_at desc limit 1`, [runId, stepId])).rows[0]\n    : fsGetLatestGate(runId, stepId),\n  updateGate: async (gateId:string, patch: Partial<GateRow> & { run_id: string }) => DATA_DRIVER === 'db'\n    ? pgQuery(`update nofx.gate set status=$2, approved_by=coalesce($3, approved_by), approved_at=case when $3 is not null then now() else approved_at end where id=$1`, [gateId, (patch as any).status, (patch as any).approved_by || null])\n    : fsUpdateGate(gateId, patch),\n  listGatesByRun: async (runId:string) => DATA_DRIVER === 'db'\n    ? (await pgQuery<GateRow>(`select * from nofx.gate where run_id=$1 order by created_at asc`, [runId])).rows\n    : fsListGatesByRun(runId),\n  // artifacts\n  addArtifact: async (stepId:string, type:string, pth:string, metadata?:any) => DATA_DRIVER === 'db'\n    ? pgQuery(`insert into nofx.artifact (step_id, type, path, metadata) values ($1,$2,$3,$4)`, [stepId, type, pth, metadata || {}])\n    : fsAddArtifact(stepId, type, pth, metadata),\n  listArtifactsByRun: async (runId:string) => DATA_DRIVER === 'db'\n    ? (await pgQuery<any>(`select a.*, s.name as step_name from nofx.artifact a join nofx.step s on s.id = a.step_id where s.run_id = $1`, [runId])).rows\n    : fsListArtifactsByRun(runId),\n  // inbox\n  inboxMarkIfNew: async (key:string) => DATA_DRIVER === 'db'\n    ? Boolean((await pgQuery<any>(`insert into nofx.inbox (key) values ($1) on conflict do nothing returning id`, [key])).rows[0])\n    : fsInboxMarkIfNew(key),\n  // outbox\n  outboxAdd: async (topic:string, payload:any) => DATA_DRIVER === 'db'\n    ? pgQuery(`insert into nofx.outbox (topic, payload) values ($1,$2)`, [topic, payload])\n    : fsOutboxAdd(topic, payload),\n  outboxListUnsent: async (limit=50) => DATA_DRIVER === 'db'\n    ? (await pgQuery<any>(`select id, topic, payload from nofx.outbox where sent=false order by created_at asc limit ${limit}`)).rows\n    : fsOutboxListUnsent(limit),\n  outboxMarkSent: async (id:string) => DATA_DRIVER === 'db'\n    ? pgQuery(`update nofx.outbox set sent=true, sent_at=now() where id=$1`, [id])\n    : fsOutboxMarkSent(id),\n};\n\nexport type { RunRow, StepRow };\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Volumes/Development/nofx-local-starter/src/lib/supabase.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":17,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[652,655],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[652,655],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createClient } from \"@supabase/supabase-js\";\nimport dotenv from \"dotenv\";\ndotenv.config();\n\nconst URL = process.env.SUPABASE_URL;\nconst KEY = process.env.SUPABASE_SERVICE_ROLE_KEY;\n\nexport const supabase = (URL && KEY)\n  ? createClient(URL, KEY, { auth: { persistSession: false, autoRefreshToken: false, detectSessionInUrl: false } })\n  : ({\n      storage: {\n        from() { return { createSignedUrl: async () => ({ data: null, error: new Error('supabase disabled') }) };\n        },\n        // optional helper present in some versions\n        createBucket: async () => ({ data: null, error: new Error('supabase disabled') })\n      }\n    } as any);\n\nexport const ARTIFACT_BUCKET = process.env.SUPABASE_BUCKET || \"artifacts\";\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Volumes/Development/nofx-local-starter/src/lib/tracing.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":12,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[351,354],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[351,354],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":13,"column":69,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":72,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[425,428],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[425,428],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":14,"column":98,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":101,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[528,531],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[528,531],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":15,"column":93,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":96,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[626,629],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[626,629],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":16,"column":91,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":94,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[722,725],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[722,725],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":17,"column":97,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":100,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[824,827],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[824,827],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":18,"column":97,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":100,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[926,929],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[926,929],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":19,"column":87,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":90,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1018,1021],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1018,1021],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":21,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":21,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1072,1075],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1072,1075],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":24,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1198,1201],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1198,1201],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":25,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1238,1241],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1238,1241],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":31,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":31,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1527,1530],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1527,1530],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":32,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":32,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1574,1577],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1574,1577],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":33,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1621,1624],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1621,1624],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":34,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":34,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1663,1666],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1663,1666],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":41,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":41,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1814,1817],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1814,1817],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { log } from './logger';\n\nlet initialized = false;\n\nexport async function initTracing(serviceName: string) {\n  if (initialized) return;\n  if (process.env.OTEL_ENABLED !== '1') {\n    return; // disabled\n  }\n  try {\n    // Dynamic imports keep runtime optional when not installed\n    const { NodeSDK } = await import('@opentelemetry/sdk-node' as any);\n    const { Resource } = await import('@opentelemetry/resources' as any);\n    const { SemanticResourceAttributes } = await import('@opentelemetry/semantic-conventions' as any);\n    const { OTLPTraceExporter } = await import('@opentelemetry/exporter-trace-otlp-http' as any);\n    const { HttpInstrumentation } = await import('@opentelemetry/instrumentation-http' as any);\n    const { ExpressInstrumentation } = await import('@opentelemetry/instrumentation-express' as any);\n    const { IORedisInstrumentation } = await import('@opentelemetry/instrumentation-ioredis' as any);\n    const { PgInstrumentation } = await import('@opentelemetry/instrumentation-pg' as any);\n\n    const exporter = new (OTLPTraceExporter as any)({\n      // If OTEL_EXPORTER_OTLP_ENDPOINT set, sdk will honor it; leave defaults\n    });\n    const sdk = new (NodeSDK as any)({\n      resource: new (Resource as any)({\n        [SemanticResourceAttributes.SERVICE_NAME]: serviceName || 'nofx-local',\n        [SemanticResourceAttributes.DEPLOYMENT_ENVIRONMENT]: process.env.NODE_ENV || 'development'\n      }),\n      traceExporter: exporter,\n      instrumentations: [\n        new (HttpInstrumentation as any)(),\n        new (ExpressInstrumentation as any)(),\n        new (IORedisInstrumentation as any)(),\n        new (PgInstrumentation as any)(),\n      ]\n    });\n    await sdk.start();\n    initialized = true;\n    log.info('otel.tracing.started');\n  } catch (e) {\n    log.warn({ err: (e as any)?.message }, 'otel.tracing.disabled');\n  }\n}\n\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Volumes/Development/nofx-local-starter/src/models/providers/anthropic.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":6,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[482,485],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[482,485],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":7,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[524,527],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[524,527],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":8,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[564,567],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[564,567],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":9,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[615,618],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[615,618],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":10,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[667,670],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[667,670],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":10,"column":68,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":71,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[708,711],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[708,711],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import Anthropic from '@anthropic-ai/sdk';\nexport async function claudeChat(prompt: string, model=process.env.ANTHROPIC_MODEL || 'claude-3-5-sonnet-latest', maxOutputTokens: number = 800){\n  const client = new Anthropic({ apiKey: process.env.ANTHROPIC_API_KEY! });\n  const started = Date.now();\n  const rsp = await client.messages.create({ model, max_tokens: Math.max(1, Number(maxOutputTokens || 800)), messages:[{role:'user', content: prompt}]});\n  const txt = (rsp.content[0] as any)?.text || '';\n  const usage = (rsp as any).usage ? {\n    inputTokens: (rsp as any).usage.input_tokens,\n    outputTokens: (rsp as any).usage.output_tokens,\n    totalTokens: ((rsp as any).usage.input_tokens || 0) + ((rsp as any).usage.output_tokens || 0),\n    latencyMs: Date.now() - started\n  } : undefined;\n  return { text: txt.trim(), provider: 'anthropic', model, usage };\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Volumes/Development/nofx-local-starter/src/models/providers/gemini.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":8,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[426,429],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[426,429],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":8,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[449,452],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[449,452],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { GoogleGenerativeAI } from '@google/generative-ai';\nexport async function geminiChat(prompt: string, model=process.env.GEMINI_MODEL || 'gemini-2.5-pro'){\n  const genai = new GoogleGenerativeAI(process.env.GEMINI_API_KEY!);\n  const modelRef = genai.getGenerativeModel({ model });\n  const started = Date.now();\n  const rsp = await modelRef.generateContent(prompt);\n  const text = rsp.response.text().trim();\n  const um: any = (rsp.response as any).usageMetadata || {};\n  const usage = (um.promptTokenCount || um.candidatesTokenCount) ? {\n    inputTokens: um.promptTokenCount,\n    outputTokens: um.candidatesTokenCount,\n    totalTokens: (um.totalTokenCount) || (um.promptTokenCount || 0) + (um.candidatesTokenCount || 0),\n    latencyMs: Date.now() - started\n  } : undefined;\n  return { text, provider: 'gemini', model, usage };\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Volumes/Development/nofx-local-starter/src/models/providers/http.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Volumes/Development/nofx-local-starter/src/models/providers/openai.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":13,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[610,613],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[610,613],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":16,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[864,867],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[864,867],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":19,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[941,944],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[941,944],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":24,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1201,1204],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1201,1204],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":29,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":29,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1398,1401],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1398,1401],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":42,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":42,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1841,1844],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1841,1844],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":43,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":43,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1874,1877],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1874,1877],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":46,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":46,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1950,1953],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1950,1953],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":46,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":46,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1964,1967],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1964,1967],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import OpenAI from 'openai';\nexport async function openaiChat(\n  prompt: string,\n  model = process.env.OPENAI_MODEL || 'gpt-4o-mini',\n  opts?: { baseURL?: string; apiKeyEnv?: string; maxOutputTokens?: number }\n) {\n  const apiKey = opts?.apiKeyEnv ? (process.env[opts.apiKeyEnv] as string | undefined) : process.env.OPENAI_API_KEY!;\n  const client = new OpenAI({ apiKey: apiKey!, baseURL: opts?.baseURL });\n  const started = Date.now();\n\n  // Use Responses API for new models that don't support max_tokens on chat.completions\n  // Build minimal payload for broadest compatibility across models\n  const payload: any = { model, input: prompt, max_output_tokens: Math.max(1, Number(opts?.maxOutputTokens ?? 800)) };\n  // Only include temperature when explicitly allowed via env\n  if (process.env.OPENAI_ALLOW_TEMPERATURE === '1') payload.temperature = 0.2;\n  let rsp: any;\n  try {\n    rsp = await client.responses.create(payload);\n  } catch (e: any) {\n    const msg = String(e?.message || '');\n    const unsupported = /Unsupported parameter|not supported with this model/i.test(msg);\n    if (!unsupported) throw e;\n    // Fallback to Chat Completions for older/edge models\n    const cc = await (client as any).chat.completions.create({\n      model,\n      messages: [{ role: 'user', content: prompt }],\n      max_tokens: Math.max(1, Number(opts?.maxOutputTokens ?? 800))\n    });\n    const text = (cc as any).choices?.[0]?.message?.content?.trim?.() ?? '';\n    const usage = cc.usage\n      ? {\n          inputTokens: cc.usage.prompt_tokens,\n          outputTokens: cc.usage.completion_tokens,\n          totalTokens: cc.usage.total_tokens,\n          latencyMs: Date.now() - started\n        }\n      : undefined;\n    return { text, provider: 'openai', model, usage };\n  }\n\n  // Extract text and usage in a version-tolerant way\n  const text = (rsp as any).output_text\n    || ((rsp as any).choices?.[0]?.message?.content?.trim?.() ?? '')\n    || '';\n\n  const u: any = (rsp as any).usage || {};\n  const usage = u\n    ? {\n        inputTokens: u.input_tokens ?? u.prompt_tokens,\n        outputTokens: u.output_tokens ?? u.completion_tokens,\n        totalTokens: u.total_tokens,\n        latencyMs: Date.now() - started\n      }\n    : undefined;\n\n  return { text, provider: 'openai', model, usage };\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Volumes/Development/nofx-local-starter/src/models/router.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":18,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[805,808],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[805,808],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":25,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1087,1090],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1087,1090],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":26,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1111,1114],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1111,1114],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":30,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1350,1353],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1350,1353],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":41,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":41,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1869,1872],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1869,1872],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":43,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":43,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1940,1943],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1940,1943],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":46,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":46,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2078,2081],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2078,2081],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":51,"column":110,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":51,"endColumn":113,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2360,2363],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2360,2363],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":52,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":52,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2407,2410],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2407,2410],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":56,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":56,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2593,2596],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2593,2596],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":62,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":62,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2855,2858],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2855,2858],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":81,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":81,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4039,4042],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4039,4042],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":85,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":85,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4205,4208],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4205,4208],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":90,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":90,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4492,4495],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4492,4495],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":99,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":99,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4768,4771],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4768,4771],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":107,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":107,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5161,5164],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5161,5164],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":154,"column":100,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":154,"endColumn":103,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7234,7237],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7234,7237],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { openaiChat } from './providers/openai';\nimport { claudeChat } from './providers/anthropic';\nimport { geminiChat } from './providers/gemini';\nimport { getSettings } from '../lib/settings';\nimport { httpChat } from './providers/http';\nimport { getModelByName } from '../lib/models';\nimport { metrics } from '../lib/metrics';\nimport { setContext } from '../lib/observability';\nimport { getCacheJSON, setCacheJSON } from '../lib/cache';\nimport crypto from 'node:crypto';\n\nexport type TaskKind = 'codegen'|'reasoning'|'docs';\nexport type RouteOpts = { maxOutputTokens?: number };\n\nexport async function routeLLM(kind: TaskKind, prompt: string, opts?: RouteOpts){\n  const { llm } = await getSettings();\n  const modelOrder = llm?.modelOrder?.[kind as 'docs'|'reasoning'|'codegen'] || [];\n  let lastErr: any;\n  if (modelOrder.length) {\n    for (const name of modelOrder) {\n      try {\n        const m = await getModelByName(name);\n        if (!m || m.active === false) continue;\n        const cached = await maybeGetDocsCache(kind, prompt, m.name);\n        if (cached) return cached as any;\n        const out: any = await callModelWithRetry(m, prompt, opts);\n        await maybeSetDocsCache(kind, prompt, m.name, out);\n        if (typeof out === 'string') return out;\n        return { ...out, provider: m.provider, model: m.name };\n      } catch (e:any) { lastErr = e; }\n    }\n    throw lastErr || new Error('no model succeeded');\n  }\n  const order = await pickOrder(kind);\n  for (const p of order) {\n    try {\n      try { setContext({ provider: p }); } catch {}\n      const model = (p==='openai' ? process.env.OPENAI_MODEL : p==='anthropic' ? process.env.ANTHROPIC_MODEL : p==='gemini' ? process.env.GEMINI_MODEL : undefined);\n      if (kind === 'docs') {\n        const cached = await maybeGetDocsCache(kind, prompt, model || p);\n        if (cached) return cached as any;\n      }\n      const out = await callWithRetry(p, prompt, model as any, 2, 15000, opts);\n      if (kind === 'docs') await maybeSetDocsCache(kind, prompt, model || p, out);\n      return out;\n    } catch (e:any) { lastErr = e; }\n  }\n  throw lastErr || new Error('no provider succeeded');\n}\nasync function pickOrder(kind: TaskKind): Promise<Array<'openai'|'anthropic'|'gemini'>> {\n  const envPref = (process.env.LLM_ORDER || '').split(',').map(x=>x.trim().toLowerCase()).filter(Boolean) as any[];\n  if (envPref.length) return envPref as any;\n  try {\n    const { llm } = await getSettings();\n    const order = llm?.order?.[kind as 'docs'|'reasoning'|'codegen'];\n    if (Array.isArray(order) && order.length) return order as any;\n  } catch {}\n  if (kind === 'codegen') return ['openai','anthropic','gemini'];\n  if (kind === 'reasoning') return ['anthropic','openai','gemini'];\n  return ['gemini','anthropic','openai'];\n}\nfunction call(p: string, prompt: string, model?: string, custom?: any, opts?: RouteOpts){\n  if (p==='openai') return openaiChat(prompt, model, { maxOutputTokens: opts?.maxOutputTokens });\n  if (p==='anthropic') return claudeChat(prompt, model, opts?.maxOutputTokens);\n  if (p==='gemini') return geminiChat(prompt, model);\n  if (custom && custom.kind === 'openai-compatible') {\n    const baseURL = custom.baseUrl || process.env[`LLM_${p.toUpperCase()}_BASE_URL`];\n    const apiKeyEnv = process.env[`LLM_${p.toUpperCase()}_API_KEY`] ? `LLM_${p.toUpperCase()}_API_KEY` : undefined;\n    return openaiChat(prompt, model, { baseURL, apiKeyEnv, maxOutputTokens: opts?.maxOutputTokens });\n  }\n  if (custom && custom.kind === 'http') {\n    const endpoint = custom.baseUrl || process.env[`LLM_${p.toUpperCase()}_BASE_URL`];\n    if (!endpoint) throw new Error('http provider missing baseUrl');\n    const apiKeyEnv = process.env[`LLM_${p.toUpperCase()}_API_KEY`] ? `LLM_${p.toUpperCase()}_API_KEY` : undefined;\n    return httpChat(prompt, endpoint, apiKeyEnv, model);\n  }\n  throw new Error('unknown provider ' + p);\n}\n\nasync function callWithRetry(p: string, prompt: string, model: string|undefined, retries=2, timeoutMs=15000, opts?: RouteOpts){\n  let lastErr: any;\n  for (let attempt=0; attempt<=retries; attempt++){\n    try {\n      const { llm } = await getSettings();\n      const custom = llm?.providers ? (llm.providers as any)[p] : undefined;\n      try { setContext({ retryCount: attempt }); } catch {}\n      if (attempt > 0) { try { metrics.retriesTotal.inc({ provider: p }); } catch {} }\n      const res = await withTimeout(call(p, prompt, model, custom, opts), timeoutMs);\n      return res;\n    } catch (e:any) {\n      lastErr = e;\n      await delay((attempt+1)*250);\n    }\n  }\n  throw lastErr;\n}\n\nasync function callModelWithRetry(m: { kind: string; base_url?: string; provider: string; name: string }, prompt: string, opts?: RouteOpts, retries=2, timeoutMs=15000){\n  let lastErr: any;\n  for (let attempt=0; attempt<=retries; attempt++){\n    try {\n      try { setContext({ provider: m.provider }); } catch {}\n      try { setContext({ retryCount: attempt }); } catch {}\n      if (attempt > 0) { try { metrics.retriesTotal.inc({ provider: m.provider }); } catch {} }\n      const res = await withTimeout(callModel(m, prompt, opts), timeoutMs);\n      return res;\n    } catch (e:any) {\n      lastErr = e;\n      await delay((attempt+1)*250);\n    }\n  }\n  throw lastErr;\n}\n\nfunction callModel(m: { kind: string; base_url?: string; provider: string; name: string }, prompt: string, opts?: RouteOpts){\n  const kind = (m.kind || '').toLowerCase();\n  if (kind === 'openai') return openaiChat(prompt, m.name, { maxOutputTokens: opts?.maxOutputTokens });\n  if (kind === 'anthropic') return claudeChat(prompt, m.name, opts?.maxOutputTokens);\n  if (kind === 'gemini') return geminiChat(prompt, m.name);\n  if (kind === 'openai-compatible') {\n    const apiKeyEnv = `LLM_${m.provider.toUpperCase()}_API_KEY`;\n    return openaiChat(prompt, m.name, { baseURL: m.base_url, apiKeyEnv, maxOutputTokens: opts?.maxOutputTokens });\n  }\n  if (kind === 'http') {\n    const apiKeyEnv = `LLM_${m.provider.toUpperCase()}_API_KEY`;\n    if (!m.base_url) throw new Error('http model missing base_url');\n    return httpChat(prompt, m.base_url, apiKeyEnv, m.name);\n  }\n  throw new Error('unknown model kind ' + kind);\n}\n\nfunction withTimeout<T>(p: Promise<T>, ms: number): Promise<T> {\n  return new Promise((resolve, reject) => {\n    const t = setTimeout(() => reject(new Error('llm timeout')), ms);\n    p.then(v => { clearTimeout(t); resolve(v); }, err => { clearTimeout(t); reject(err); });\n  });\n}\n\nfunction delay(ms:number){ return new Promise(r=>setTimeout(r, ms)); }\n\n// ------- Docs cache helpers -------\nfunction cacheKey(kind: TaskKind, prompt: string, model: string) {\n  const h = crypto.createHash('sha256').update(prompt).digest('hex').slice(0, 24);\n  return `${kind}:${model}:${h}`;\n}\nasync function maybeGetDocsCache(kind: TaskKind, prompt: string, model: string | undefined) {\n  if (kind !== 'docs') return undefined;\n  const ttlMs = Math.max(0, Number(process.env.DOCS_CACHE_TTL_MS || 10 * 60 * 1000));\n  if (ttlMs === 0) return undefined;\n  const key = cacheKey(kind, prompt, model || 'default');\n  const v = await getCacheJSON('llm', key);\n  return v || undefined;\n}\nasync function maybeSetDocsCache(kind: TaskKind, prompt: string, model: string | undefined, value: any) {\n  if (kind !== 'docs') return;\n  const ttlMs = Math.max(0, Number(process.env.DOCS_CACHE_TTL_MS || 10 * 60 * 1000));\n  if (ttlMs === 0) return;\n  const key = cacheKey(kind, prompt, model || 'default');\n  await setCacheJSON('llm', key, value, ttlMs).catch(()=>{});\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Volumes/Development/nofx-local-starter/src/policy/dbWritePolicy.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":4,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":4,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[164,167],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[164,167],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { query } from \"../lib/db\";\nexport type DbOp = 'insert'|'update'|'delete';\nexport async function isAllowed(table: string, op: DbOp){\n  const r = await query<any>(`select allowed_ops, constraints from nofx.db_write_rule where tenant_id='local' and table_name=$1`, [table]);\n  if (!r.rows[0]) return { ok:false, reason:'no rule' };\n  const ops: string[] = r.rows[0].allowed_ops || [];\n  if (!ops.includes(op)) return { ok:false, reason:'op not allowed' };\n  return { ok:true, constraints: r.rows[0].constraints || {} };\n}","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Volumes/Development/nofx-local-starter/src/reliability.unit.test.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'STEP_TIMEOUT_MS' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":12,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":26},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":13,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[580,583],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[580,583],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":16,"column":86,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":89,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[781,784],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[781,784],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":20,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[944,947],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[944,947],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":20,"column":73,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":76,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[975,978],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[975,978],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":27,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1196,1199],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1196,1199],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":40,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":40,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1714,1717],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1714,1717],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":42,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":42,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1851,1854],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1851,1854],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":52,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":52,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2213,2216],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2213,2216],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":58,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":58,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2462,2465],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2462,2465],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":60,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":60,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2593,2596],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2593,2596],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":67,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":67,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2893,2896],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2893,2896],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":67,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":67,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2909,2912],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2909,2912],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect, beforeAll } from 'vitest';\nimport { enqueue, STEP_READY_TOPIC, listDlq, STEP_DLQ_TOPIC, rehydrateDlq, subscribe } from './lib/queue';\nlet store: typeof import('./lib/store').store;\nimport crypto from 'node:crypto';\n\ndescribe('Workstream 01 — Reliability', () => {\n  beforeAll(async () => {\n    process.env.QUEUE_DRIVER = 'memory';\n    process.env.DATA_DRIVER = 'fs';\n    store = (await import('./lib/store')).store;\n    // Minimal subscriber to emulate worker inbox semantics for tests\n    const STEP_TIMEOUT_MS = 2000;\n    function hashInputs(val: any) {\n      return crypto.createHash('sha256').update(JSON.stringify(val || {})).digest('hex').slice(0, 12);\n    }\n    subscribe(STEP_READY_TOPIC, async ({ runId, stepId, idempotencyKey, __attempt }: any) => {\n      let key = String(idempotencyKey || '');\n      if (!key) {\n        const st = await store.getStep(stepId);\n        if (st) key = `${runId}:${(st as any).name}:${hashInputs((st as any).inputs)}`;\n      }\n      if (key) {\n        const isNew = await store.inboxMarkIfNew(key).catch(()=> true);\n        if (!isNew) return;\n      }\n      const st = await store.getStep(stepId);\n      const tool = (st as any)?.tool;\n      if (tool === 'test:fail') {\n        throw new Error('fail');\n      }\n      // echo success\n      await store.updateStep(stepId, { status: 'succeeded', ended_at: new Date().toISOString() });\n      await store.recordEvent(runId, 'step.started', {}, stepId);\n      await new Promise(r => setTimeout(r, 10));\n    });\n  });\n\n  it('idempotent enqueue/execute: duplicate deliveries ignored', async () => {\n    const run = await store.createRun({ goal: 'idempotency', steps: [] });\n    const runId = (run as any).id || String(run);\n    const step = await store.createStep(runId, 'echo', 'test:echo', { foo: 'bar' });\n    const stepId = (step as any).id || String(step);\n\n    // Enqueue the same delivery twice\n    await enqueue(STEP_READY_TOPIC, { runId, stepId, __attempt: 1 });\n    await enqueue(STEP_READY_TOPIC, { runId, stepId, __attempt: 1 });\n\n    // Wait for processing\n    await new Promise(r => setTimeout(r, 200));\n\n    const ev = await store.listEvents(runId);\n    const started = ev.filter((e: any) => e.step_id === stepId && e.type === 'step.started');\n    expect(started.length).toBe(1);\n  });\n\n  it('moves to DLQ after max retries', async () => {\n    const run = await store.createRun({ goal: 'dlq', steps: [] });\n    const runId = (run as any).id || String(run);\n    const step = await store.createStep(runId, 'boom', 'test:fail', { x: 1 });\n    const stepId = (step as any).id || String(step);\n\n    // Force immediate DLQ by simulating next-failure beyond backoff schedule\n    await enqueue(STEP_READY_TOPIC, { runId, stepId, __attempt: 4 });\n    await new Promise(r => setTimeout(r, 100));\n\n    const items = await listDlq(STEP_DLQ_TOPIC);\n    const found = (items as any[]).some((p: any) => p && p.stepId === stepId || p?.step_id === stepId);\n    expect(items.length).toBeGreaterThan(0);\n    expect(found).toBeTruthy();\n\n    // Rehydrate back to ready queue\n    const n = await rehydrateDlq(STEP_DLQ_TOPIC, 10);\n    expect(n).toBeGreaterThan(0);\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Volumes/Development/nofx-local-starter/src/shared/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Volumes/Development/nofx-local-starter/src/simple.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Volumes/Development/nofx-local-starter/src/tools/codegen.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":3,"column":91,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":3,"endColumn":94,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[172,175],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[172,175],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":14,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[918,921],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[918,921],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { routeLLM } from \"../models/router\";\nimport { log } from \"../lib/logger\";\nexport type CodegenResult = { content: string; provider?: string; model?: string; usage?: any };\n\nexport async function codegenReadme(inputs: { topic?: string; bullets?: string[]; maxOutputTokens?: number } = {}): Promise<CodegenResult> {\n  const topic = inputs.topic || \"NOFX\";\n  const bullets = inputs.bullets || [\"Control plane\", \"Verification\", \"Workers\"];\n  const hasKeys = !!(process.env.OPENAI_API_KEY || process.env.ANTHROPIC_API_KEY || process.env.GEMINI_API_KEY);\n  if (!hasKeys) {\n    log.warn(\"No provider keys set; returning stub content\");\n    return { content: `# ${topic}\\n\\n- ${bullets.join(\"\\n- \")}\\n\\n_Generated locally without LLM._\\n`, provider: 'stub', model: 'stub' };\n  }\n  const prompt = `Write a concise README section titled \"${topic}\" with bullet points: ${bullets.join(\", \")}. Keep it tight.`;\n  const res: any = await routeLLM('docs', prompt, { maxOutputTokens: Math.max(1, Number(inputs.maxOutputTokens ?? 800)) });\n  if (typeof res === 'string') return { content: res };\n  return { content: res.text, provider: res.provider, model: res.model, usage: res.usage };\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Volumes/Development/nofx-local-starter/src/worker/handlers/codegen.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":16,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[694,697],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[694,697],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":34,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":34,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1447,1450],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1447,1450],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { StepHandler } from \"./types\";\nimport { store } from \"../../lib/store\";\nimport { recordEvent } from \"../../lib/events\";\nimport { saveArtifact } from \"../../lib/artifacts\";\nimport { codegenReadme } from \"../../tools/codegen\";\nimport { getSettings } from \"../../lib/settings\";\nimport { getModelByName } from \"../../lib/models\";\n\nconst handler: StepHandler = {\n  match: (tool) => tool === 'codegen',\n  async run({ runId, step }) {\n    const stepId = step.id;\n    await store.updateStep(stepId, { status: 'running', started_at: new Date().toISOString() });\n    await recordEvent(runId, \"step.started\", { name: step.name, tool: step.tool }, stepId);\n\n    const inputs = step.inputs || {} as any;\n    const filename = typeof inputs.filename === 'string' && inputs.filename.trim().length > 0 ? String(inputs.filename).trim() : 'README.md';\n    const result = await codegenReadme(inputs || {});\n    let costUSD: number | undefined;\n    if (result.usage) {\n      const { llm } = await getSettings();\n      const pricing = llm?.pricing || {};\n      const p = (result.provider || '').toLowerCase();\n      // Prefer model-specific pricing if defined\n      let inP = 0, outP = 0;\n      if (result.model) {\n        const mr = await getModelByName(result.model);\n        if (mr) {\n          inP = Number(mr.input_per_1m) || 0;\n          outP = Number(mr.output_per_1m) || 0;\n        }\n      }\n      if (!inP && !outP) {\n        const price = (pricing as any)[p] || {};\n        inP = Number(price.inputPer1M) || 0;\n        outP = Number(price.outputPer1M) || 0;\n      }\n      const inputTokens = result.usage.inputTokens || 0;\n      const outputTokens = result.usage.outputTokens || 0;\n      costUSD = (inputTokens/1000000)*inP + (outputTokens/1000000)*outP;\n      await recordEvent(runId, 'llm.usage', { provider: result.provider, model: result.model, usage: result.usage, costUSD }, stepId);\n    }\n    if (result.usage) {\n      await recordEvent(runId, 'llm.usage', { provider: result.provider, model: result.model, usage: result.usage }, stepId);\n    }\n    const artifactName = filename;\n    const pth = await saveArtifact(runId, stepId, artifactName, result.content, 'text/markdown');\n    await store.updateStep(stepId, { status: 'succeeded', ended_at: new Date().toISOString(), outputs: { artifact: pth, provider: result.provider, model: result.model, usage: result.usage } });\n    await recordEvent(runId, \"step.finished\", { artifact: pth, provider: result.provider, model: result.model, costUSD }, stepId);\n  }\n};\nexport default handler;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Volumes/Development/nofx-local-starter/src/worker/handlers/db_write.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":11,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[370,373],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[370,373],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":13,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[457,460],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[457,460],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":42,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":42,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1636,1639],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1636,1639],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":74,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":74,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3619,3622],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3619,3622],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":75,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":75,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3647,3650],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3647,3650],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":104,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":104,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5207,5210],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5207,5210],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":105,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":105,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5257,5260],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5257,5260],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":105,"column":68,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":105,"endColumn":71,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5293,5296],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5293,5296],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { StepHandler } from \"./types\";\nimport { query } from \"../../lib/db\";\nimport { recordEvent } from \"../../lib/events\";\nimport { isAllowed, DbOp } from \"../../policy/dbWritePolicy\";\nimport { getSettings } from \"../../lib/settings\";\nimport { enqueue, STEP_READY_TOPIC } from \"../../lib/queue\";\n\ntype Inputs = {\n  table: string;\n  op: DbOp;\n  values?: Record<string, any>;\n  where?: string;          // SQL where clause with $1,$2 params\n  whereParams?: any[];     // parameter values for where\n};\n\nfunction isSafeIdent(v: string){\n  return /^[a-zA-Z0-9_.]+$/.test(v);\n}\nfunction isSafeColumn(v: string){\n  return /^[a-zA-Z0-9_]+$/.test(v);\n}\n\nconst handler: StepHandler = {\n  match: (tool) => tool === 'db_write',\n  async run({ runId, step }) {\n    const stepId = step.id;\n    await query(`update nofx.step set status='running', started_at=now() where id=$1`, [stepId])\n      .catch(async ()=>{ await query(`update nofx.step set status='running' where id=$1`, [stepId]); });\n    await recordEvent(runId, 'step.started', { name: step.name, tool: step.tool }, stepId);\n\n    const inputs: Inputs = step.inputs || {};\n    if (!inputs.table || !inputs.op) throw new Error('db_write requires table and op');\n    if (!isSafeIdent(inputs.table)) throw new Error('unsafe table name');\n\n    // Check approval policy for db writes\n    const { approvals } = await getSettings();\n    let needsApproval = false;\n    if (approvals.dbWrites === 'all') needsApproval = true;\n    if (approvals.dbWrites === 'dangerous' && (inputs.op === 'update' || inputs.op === 'delete')) needsApproval = true;\n\n    if (needsApproval) {\n      const g = await query<any>(`select * from nofx.gate where run_id=$1 and step_id=$2 and gate_type='manual:db' order by created_at desc limit 1`, [runId, stepId]);\n      if (!g.rows[0]) {\n        await query(`insert into nofx.gate (run_id, step_id, gate_type, status) values ($1,$2,'manual:db','pending')`, [runId, stepId]);\n        await recordEvent(runId, 'gate.created', { stepId, tool: 'manual:db' }, stepId);\n        await enqueue(STEP_READY_TOPIC, { runId, stepId }, { delay: 5000 });\n        await recordEvent(runId, 'gate.waiting', { stepId, delayMs: 5000 }, stepId);\n        return;\n      }\n      const gate = g.rows[0];\n      if (gate.status === 'pending') {\n        await enqueue(STEP_READY_TOPIC, { runId, stepId }, { delay: 5000 });\n        await recordEvent(runId, 'gate.waiting', { stepId, delayMs: 5000 }, stepId);\n        return;\n      }\n      if (gate.status === 'failed') {\n        await query(`update nofx.step set status='failed', ended_at=now(), error=$2 where id=$1`, [stepId, 'db write not approved'])\n          .catch(async ()=>{ await query(`update nofx.step set status='failed', completed_at=now(), error=$2 where id=$1`, [stepId, 'db write not approved']); });\n        await recordEvent(runId, 'step.failed', { stepId, tool: step.tool, manual: true, gateId: gate.id }, stepId);\n        throw new Error('db write not approved');\n      }\n      // passed or waived -> continue\n    }\n\n    const allowed = await isAllowed(inputs.table, inputs.op);\n    if (!allowed.ok) {\n      await query(`update nofx.step set status='failed', ended_at=now(), error=$2 where id=$1`, [stepId, `policy: ${allowed.reason}`])\n        .catch(async ()=>{ await query(`update nofx.step set status='failed', completed_at=now(), error=$2 where id=$1`, [stepId, `policy: ${allowed.reason}`]); });\n      await recordEvent(runId, 'db.write.denied', { table: inputs.table, op: inputs.op, reason: allowed.reason }, stepId);\n      throw new Error('db_write not allowed');\n    }\n\n    let sql = '';\n    const params: any[] = [];\n    let result: any = {};\n    if (inputs.op === 'insert') {\n      const vals = inputs.values || {};\n      const cols = Object.keys(vals);\n      if (cols.length === 0) throw new Error('insert requires values');\n      for (const c of cols) if (!isSafeColumn(c)) throw new Error('unsafe column');\n      const placeholders = cols.map((_, i) => `$${i + 1}`);\n      params.push(...cols.map(c => vals[c]));\n      sql = `insert into ${inputs.table} (${cols.join(',')}) values (${placeholders.join(',')}) returning *`;\n    } else if (inputs.op === 'update') {\n      const vals = inputs.values || {};\n      const cols = Object.keys(vals);\n      if (cols.length === 0) throw new Error('update requires values');\n      if (!inputs.where) throw new Error('update requires where');\n      for (const c of cols) if (!isSafeColumn(c)) throw new Error('unsafe column');\n      const sets = cols.map((c, i) => `${c} = $${i + 1}`);\n      params.push(...cols.map(c => vals[c]));\n      const remappedWhere = remapPlaceholders(inputs.where!, params.length);\n      params.push(...(inputs.whereParams || []));\n      sql = `update ${inputs.table} set ${sets.join(', ')} where ${remappedWhere} returning *`;\n    } else if (inputs.op === 'delete') {\n      if (!inputs.where) throw new Error('delete requires where');\n      const remappedWhere = remapPlaceholders(inputs.where!, params.length);\n      params.push(...(inputs.whereParams || []));\n      sql = `delete from ${inputs.table} where ${remappedWhere} returning *`;\n    } else {\n      throw new Error('unknown op');\n    }\n\n    const q = await query<any>(sql, params);\n    result = { rowCount: (q as any).rows?.length ?? 0, rows: (q as any).rows ?? [] };\n\n    await query(`update nofx.step set status='succeeded', outputs=$2, ended_at=now() where id=$1`, [\n      stepId,\n      JSON.stringify({ table: inputs.table, op: inputs.op, result })\n    ]).catch(async ()=>{\n      await query(`update nofx.step set status='succeeded', outputs=$2, completed_at=now() where id=$1`, [\n        stepId,\n        JSON.stringify({ table: inputs.table, op: inputs.op, result })\n      ]);\n    });\n    await recordEvent(runId, 'db.write.succeeded', { table: inputs.table, op: inputs.op, rowCount: result.rowCount }, stepId);\n  }\n};\n\nexport default handler;\n\n// Remap $1..$N in a WHERE clause to start at current parameter offset.\nfunction remapPlaceholders(where: string, currentParams: number): string {\n  return where.replace(/\\$(\\d+)/g, (_m, g1) => {\n    const n = parseInt(g1, 10);\n    if (!Number.isFinite(n) || n <= 0) return _m;\n    return `$${currentParams + n}`;\n  });\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Volumes/Development/nofx-local-starter/src/worker/handlers/gate.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'log' is defined but never used. Allowed unused vars must match /^_/u.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":13},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":49,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":49,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1980,1983],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1980,1983],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":59,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":59,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2389,2392],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2389,2392],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":66,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":66,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { StepHandler } from \"./types\";\nimport { store } from \"../../lib/store\";\nimport { recordEvent } from \"../../lib/events\";\nimport { log } from \"../../lib/logger\";\nimport { getSettings } from \"../../lib/settings\";\nimport { saveArtifact } from \"../../lib/artifacts\";\nimport { spawnSync } from \"node:child_process\";\nimport fs from \"node:fs\";\nimport path from \"node:path\";\nimport { query } from \"../../lib/db\";\nimport { buildMinimalEnv } from \"../../lib/secrets\";\n\nfunction contentTypeFor(name: string) {\n  const ext = path.extname(name).toLowerCase();\n  if (ext === \".json\") return \"application/json\";\n  if (ext === \".txt\" || ext === \".log\") return \"text/plain\";\n  return \"application/octet-stream\";\n}\n\nconst handler: StepHandler = {\n  match: (tool) => tool.startsWith(\"gate:\"),\n  async run({ runId, step }) {\n    const stepId = step.id;\n    const gateName = step.tool.replace(/^gate:/, \"\");\n\n    await store.updateStep(stepId, { status: 'running', started_at: new Date().toISOString() });\n    await recordEvent(runId, \"step.started\", { name: step.name, tool: step.tool }, stepId);\n\n    const scriptPath = path.resolve(process.cwd(), \"scripts\", \"runGate.js\");\n    const { gates } = await getSettings();\n\n    // Skip if gate disabled by settings\n    if ((gateName === 'typecheck' && !gates.typecheck) ||\n        (gateName === 'lint' && !gates.lint) ||\n        (gateName === 'unit' && !gates.unit)) {\n      await query(`update nofx.step set status='succeeded', outputs=$2, ended_at=now() where id=$1`, [\n        stepId,\n        JSON.stringify({ gate: gateName, skipped: true })\n      ]).catch(async () => {\n        await query(`update nofx.step set status='succeeded', outputs=$2, completed_at=now() where id=$1`, [\n          stepId,\n          JSON.stringify({ gate: gateName, skipped: true })\n        ]);\n      });\n      await recordEvent(runId, \"step.finished\", { gate: gateName, skipped: true }, stepId);\n      return;\n    }\n\n    const policy = (step.inputs && (step.inputs as any)._policy) || {};\n    const envAllowed: string[] | undefined = policy.env_allowed;\n    const baseEnv = buildMinimalEnv(envAllowed);\n    const proc = spawnSync(process.execPath, [scriptPath, gateName], {\n      cwd: process.cwd(),\n      encoding: \"utf8\",\n      stdio: [\"ignore\", \"pipe\", \"pipe\"],\n      env: { ...baseEnv, COVERAGE_THRESHOLD: String(gates.coverageThreshold ?? 0.9) }\n    });\n\n    let summary: any = { gate: gateName, passed: proc.status === 0 };\n    try {\n      const line = (proc.stdout || \"\").trim().split(/\\n/).filter(Boolean).pop();\n      if (line) {\n        const parsed = JSON.parse(line);\n        if (parsed && parsed.summary) summary = parsed.summary;\n      }\n    } catch (e) {\n      // keep default summary\n    }\n\n    // Collect and upload evidence artifacts produced by the gate runner\n    const localDir = path.resolve(process.cwd(), \"gate-artifacts\");\n    const uploadedPaths: string[] = [];\n    if (fs.existsSync(localDir)) {\n      const files = fs.readdirSync(localDir);\n      for (const f of files) {\n        const full = path.join(localDir, f);\n        if (!fs.statSync(full).isFile()) continue;\n        const storagePath = await saveArtifact(runId, stepId, `gate-artifacts/${f}`, fs.readFileSync(full, 'utf8'), contentTypeFor(f));\n        uploadedPaths.push(storagePath);\n      }\n    }\n\n    // Always upload a JSON summary as gate-summary.json\n    const summaryName = \"gate-summary.json\";\n    const summaryPath = await saveArtifact(runId, stepId, summaryName, JSON.stringify(summary, null, 2), 'application/json');\n    uploadedPaths.push(summaryPath);\n\n    if (summary.passed) {\n      await store.updateStep(stepId, { status: 'succeeded', ended_at: new Date().toISOString(), outputs: { gate: gateName, summary, artifacts: uploadedPaths } });\n      await recordEvent(runId, \"step.finished\", { gate: gateName, summary }, stepId);\n    } else {\n      await store.updateStep(stepId, { status: 'failed', ended_at: new Date().toISOString(), outputs: { gate: gateName, summary, artifacts: uploadedPaths } });\n      await recordEvent(runId, \"step.failed\", { gate: gateName, summary, stderr: proc.stderr }, stepId);\n      throw new Error(`gate ${gateName} failed`);\n    }\n  }\n};\n\nexport default handler;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Volumes/Development/nofx-local-starter/src/worker/handlers/git_pr.ts","messages":[{"ruleId":"prefer-const","severity":1,"message":"'m' is never reassigned. Use 'const' instead.","line":47,"column":7,"nodeType":"Identifier","messageId":"useConst","endLine":47,"endColumn":8,"fix":{"range":[1904,1963],"text":"const m = url.match(/github.com[:/](.+?)\\/(.+?)(?:\\.git)?$/);"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":70,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":70,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2979,2982],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2979,2982],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":75,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":75,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3210,3213],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3210,3213],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":78,"column":104,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":78,"endColumn":107,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3633,3636],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3633,3636],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":88,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":88,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4154,4157],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4154,4157],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":101,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":101,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4686,4689],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4686,4689],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":104,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":104,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4918,4921],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4918,4921],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":105,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":105,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5073,5076],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5073,5076],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":147,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":147,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7317,7320],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7317,7320],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":148,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":148,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7341,7344],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7341,7344],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":149,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":149,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7372,7375],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7372,7375],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":149,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":149,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7392,7395],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7392,7395],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":152,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":152,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7483,7486],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7483,7486],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":155,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":155,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7570,7573],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7570,7573],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { StepHandler } from \"./types\";\nimport { query } from \"../../lib/db\";\nimport { recordEvent } from \"../../lib/events\";\nimport { supabase, ARTIFACT_BUCKET } from \"../../lib/supabase\";\nimport { log } from \"../../lib/logger\";\nimport { spawnSync } from \"node:child_process\";\nimport fs from \"node:fs\";\nimport path from \"node:path\";\nimport { store } from \"../../lib/store\";\nimport { enqueue, STEP_READY_TOPIC } from \"../../lib/queue\";\nimport { buildMinimalEnv, getSecret } from \"../../lib/secrets\";\n\ntype CommitItem = {\n  path: string;               // repo-relative file path\n  fromArtifact?: string;      // Supabase storage path of artifact (direct)\n  fromStep?: string;          // resolve artifact by prior step name\n  artifactName?: string;      // filename within that step (e.g., README.md)\n  content?: string;           // inline content\n  mode?: 'overwrite';\n};\ntype Inputs = {\n  branch?: string;\n  base?: string;              // base branch (default: main)\n  title?: string;\n  body?: string;\n  draft?: boolean;\n  commits: CommitItem[];\n};\n\nfunction sh(cmd: string, args: string[], cwd: string, env?: NodeJS.ProcessEnv){\n  const p = spawnSync(cmd, args, { cwd, stdio: 'pipe', encoding: 'utf8', env: env || process.env });\n  if (p.status !== 0) throw new Error(`cmd failed: ${cmd} ${args.join(' ')}\\n${p.stderr}`);\n  return p.stdout.trim();\n}\nfunction repoRoot(){ return process.cwd(); }\nfunction ensureDir(filePath:string){ fs.mkdirSync(path.dirname(filePath), { recursive: true }); }\n\nasync function getArtifactBuffer(pth: string): Promise<Buffer> {\n  const { data, error } = await supabase.storage.from(ARTIFACT_BUCKET).download(pth);\n  if (error || !data) throw new Error(`artifact not found: ${pth}`);\n  const arr = await data.arrayBuffer();\n  return Buffer.from(arr);\n}\n\nfunction parseOrigin(url: string){\n  // supports git@github.com:owner/repo.git or https://github.com/owner/repo.git\n  let m = url.match(/github.com[:/](.+?)\\/(.+?)(?:\\.git)?$/);\n  if (!m) throw new Error('unsupported origin url: ' + url);\n  return { owner: m[1], repo: m[2] };\n}\n\nconst handler: StepHandler = {\n  match: (tool) => tool === 'git_pr',\n  async run({ runId, step }) {\n    const stepId = step.id;\n    await query(`update nofx.step set status='running', started_at=now() where id=$1`, [stepId])\n      .catch(async ()=>{ await query(`update nofx.step set status='running' where id=$1`, [stepId]); });\n    await recordEvent(runId, 'step.started', { name: step.name, tool: step.tool }, stepId);\n\n    // Default manual approval for git_pr\n    try {\n      const g = await store.getLatestGate(runId, stepId);\n      if (!g) {\n        await store.createOrGetGate(runId, stepId, 'manual:git_pr');\n        await recordEvent(runId, 'gate.created', { stepId, tool: 'manual:git_pr' }, stepId);\n        await enqueue(STEP_READY_TOPIC, { runId, stepId }, { delay: 5000 });\n        await recordEvent(runId, 'gate.waiting', { stepId, delayMs: 5000 }, stepId);\n        return;\n      }\n      if ((g as any).status === 'pending') {\n        await enqueue(STEP_READY_TOPIC, { runId, stepId }, { delay: 5000 });\n        await recordEvent(runId, 'gate.waiting', { stepId, delayMs: 5000 }, stepId);\n        return;\n      }\n      if ((g as any).status === 'failed') {\n        await query(`update nofx.step set status='failed', ended_at=now(), error=$2 where id=$1`, [stepId, 'git_pr not approved'])\n          .catch(async ()=>{ await query(`update nofx.step set status='failed', completed_at=now(), error=$2 where id=$1`, [stepId, 'git_pr not approved']); });\n        await recordEvent(runId, 'step.failed', { stepId, tool: step.tool, manual: true, gateId: (g as any).id }, stepId);\n        throw new Error('git_pr not approved');\n      }\n    } catch {/* non-fatal: continue if store not available */}\n\n    const inputs: Inputs = step.inputs || {};\n    if (!Array.isArray(inputs.commits) || inputs.commits.length === 0) throw new Error('git_pr requires commits');\n    const base = inputs.base || process.env.GIT_DEFAULT_BASE || 'main';\n    const branch = inputs.branch || `feat/run-${runId.slice(0,8)}`;\n    const repo = repoRoot();\n    const policy = (step.inputs && (step.inputs as any)._policy) || {};\n    const envAllowed: string[] | undefined = policy.env_allowed;\n    const env = buildMinimalEnv(envAllowed);\n\n    // prepare files\n    for (const c of inputs.commits) {\n      const outPath = path.join(repo, c.path);\n      ensureDir(outPath);\n      if (c.fromArtifact) {\n        const buf = await getArtifactBuffer(c.fromArtifact);\n        fs.writeFileSync(outPath, buf);\n      } else if (c.fromStep && c.artifactName) {\n        // resolve artifact by step name and filename\n        const stepRow = await query<any>(`select id from nofx.step where run_id=$1 and name=$2 limit 1`, [runId, c.fromStep]);\n        const sid = stepRow.rows[0]?.id;\n        if (!sid) throw new Error(`step not found: ${c.fromStep}`);\n        const art = await query<any>(`select path as uri from nofx.artifact where step_id=$1 and path like $2 limit 1`, [sid, `%/${c.artifactName}`]);\n        const pth = (art.rows[0] as any)?.uri as string | undefined;\n        if (!pth) throw new Error(`artifact not found: ${c.artifactName} in step ${c.fromStep}`);\n        const buf = await getArtifactBuffer(pth);\n        fs.writeFileSync(outPath, buf);\n      } else if (typeof c.content === 'string') {\n        fs.writeFileSync(outPath, c.content, 'utf8');\n      } else {\n        throw new Error('commit item requires fromArtifact or content');\n      }\n    }\n\n    // git plumbing\n    try { sh('git', ['rev-parse','--is-inside-work-tree'], repo, env); } catch { throw new Error('not a git repo'); }\n    sh('git', ['fetch','origin', base], repo, env);\n    // Create branch from origin/base\n    sh('git', ['checkout','-B', branch, `origin/${base}`], repo, env);\n    sh('git', ['add', '--all'], repo, env);\n    const commitMsg = inputs.title || `Update by NOFX run ${runId}`;\n    // set identity if needed\n    try { sh('git', ['config','user.email'], repo, env); } catch { sh('git', ['config','user.email', 'nofx@example.com'], repo, env); }\n    try { sh('git', ['config','user.name'], repo, env); } catch { sh('git', ['config','user.name', 'NOFX Bot'], repo, env); }\n    sh('git', ['commit','-m', commitMsg], repo, env);\n    sh('git', ['push','-u','origin', branch], repo, env);\n\n    // Open PR via GitHub API\n    let prUrl: string | undefined;\n    try {\n      const origin = sh('git', ['config','--get','remote.origin.url'], repo, env);\n      const { owner, repo: name } = parseOrigin(origin);\n      const token = getSecret('GITHUB_TOKEN', { runId, scope: policy?.secrets_scope || 'github', allowEnv: true, envAllowed })\n        || getSecret('GH_TOKEN', { runId, scope: policy?.secrets_scope || 'github', allowEnv: true, envAllowed });\n      if (!token) throw new Error('GITHUB_TOKEN not set');\n      const rsp = await fetch(`https://api.github.com/repos/${owner}/${name}/pulls`, {\n        method: 'POST',\n        headers: { 'Authorization': `token ${token}`, 'Content-Type': 'application/json', 'Accept': 'application/vnd.github+json' },\n        body: JSON.stringify({\n          title: inputs.title || commitMsg,\n          head: branch,\n          base,\n          body: inputs.body || `Automated PR from NOFX run ${runId}`,\n          draft: !!inputs.draft\n        })\n      } as any);\n      if ((rsp as any).ok) {\n        const data: any = await (rsp as any).json();\n        prUrl = data.html_url;\n      } else {\n        const t = await (rsp as any).text();\n        throw new Error(`create PR failed: ${t}`);\n      }\n    } catch (e:any) {\n      log.warn({ err: e?.message }, 'PR creation failed; commit pushed');\n    }\n\n    const outputs = { branch, base, prUrl, files: inputs.commits.map(c=>c.path) };\n    await query(`update nofx.step set status='succeeded', outputs=$2, ended_at=now() where id=$1`, [\n      stepId, JSON.stringify(outputs)\n    ]).catch(async ()=>{\n      await query(`update nofx.step set status='succeeded', outputs=$2, completed_at=now() where id=$1`, [\n        stepId, JSON.stringify(outputs)\n      ]);\n    });\n    await recordEvent(runId, 'step.finished', outputs, stepId);\n  }\n};\n\nexport default handler;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Volumes/Development/nofx-local-starter/src/worker/handlers/loader.ts","messages":[{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\..","line":10,"column":32,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":10,"endColumn":33,"suggestions":[{"messageId":"removeEscape","fix":{"range":[328,329],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[328,328],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import fs from 'node:fs';\nimport path from 'node:path';\nimport type { StepHandler } from './types';\n\nexport function loadHandlers(): StepHandler[] {\n  const dir = __dirname;\n  const handlers: StepHandler[] = [];\n  const all = fs.readdirSync(dir);\n  const files = (process.env.NODE_ENV === 'test')\n    ? all.filter(f => /^(test[_\\.].*|.*test.*)\\.(ts|js)$/.test(f))\n    : all;\n  for (const file of files) {\n    if (!/\\.(ts|js)$/.test(file)) continue;\n    if (['loader.ts','types.ts'].includes(file)) continue;\n    const mod = require(path.join(dir, file));\n    const h: StepHandler | undefined = mod.default || mod.handler;\n    if (h && typeof h.run === 'function' && typeof h.match === 'function') handlers.push(h);\n  }\n  return handlers;\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Volumes/Development/nofx-local-starter/src/worker/handlers/manual.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":26,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1004,1007],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1004,1007],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":34,"column":139,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":34,"endColumn":142,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1447,1450],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1447,1450],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":40,"column":136,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":40,"endColumn":139,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1791,1794],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1791,1794],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { StepHandler } from \"./types\";\nimport { store } from \"../../lib/store\";\nimport { recordEvent } from \"../../lib/events\";\nimport { enqueue, STEP_READY_TOPIC } from \"../../lib/queue\";\n\nconst CHECK_DELAY_MS = 5000;\n\nconst handler: StepHandler = {\n  match: (tool) => tool.startsWith(\"manual:\"),\n  async run({ runId, step }) {\n    const stepId = step.id;\n    // ensure step is marked running\n    await store.updateStep(stepId, { status: 'running', started_at: new Date().toISOString() });\n\n    // does a gate exist for this step?\n    const g = await store.getLatestGate(runId, stepId);\n    if (!g) {\n      await store.createOrGetGate(runId, stepId, step.tool);\n      await recordEvent(runId, 'gate.created', { stepId, tool: step.tool }, stepId);\n      // re-enqueue to check later\n      await enqueue(STEP_READY_TOPIC, { runId, stepId }, { delay: CHECK_DELAY_MS });\n      await recordEvent(runId, 'gate.waiting', { stepId, delayMs: CHECK_DELAY_MS }, stepId);\n      return;\n    }\n\n    const gate = g as any;\n    if (gate.status === 'pending') {\n      await enqueue(STEP_READY_TOPIC, { runId, stepId }, { delay: CHECK_DELAY_MS });\n      await recordEvent(runId, 'gate.waiting', { stepId, delayMs: CHECK_DELAY_MS }, stepId);\n      return;\n    }\n\n    if (gate.status === 'passed' || gate.status === 'waived') {\n      await store.updateStep(stepId, { status: 'succeeded', ended_at: new Date().toISOString(), outputs: { manual: true, gateId: (gate as any).id, status: gate.status } });\n      await recordEvent(runId, 'step.finished', { stepId, tool: step.tool, manual: true, gateId: gate.id }, stepId);\n      return;\n    }\n\n    if (gate.status === 'failed') {\n      await store.updateStep(stepId, { status: 'failed', ended_at: new Date().toISOString(), outputs: { manual: true, gateId: (gate as any).id, status: gate.status } });\n      await recordEvent(runId, 'step.failed', { stepId, tool: step.tool, manual: true, gateId: gate.id }, stepId);\n      throw new Error('manual gate failed');\n    }\n  }\n};\n\nexport default handler;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Volumes/Development/nofx-local-starter/src/worker/handlers/test_echo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Volumes/Development/nofx-local-starter/src/worker/handlers/test_fail.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Volumes/Development/nofx-local-starter/src/worker/handlers/types.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":6,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[98,101],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[98,101],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export interface Step {\n  id: string;\n  run_id: string;\n  name: string;\n  tool: string;\n  inputs: any;\n}\nexport interface StepHandler {\n  /** match a tool exactly or by regex */\n  match(tool: string): boolean;\n  run(ctx: { runId: string; step: Step }): Promise<void>;\n}","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Volumes/Development/nofx-local-starter/src/worker/main.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":17,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[635,638],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[635,638],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":21,"column":82,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":21,"endColumn":85,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[825,828],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[825,828],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":29,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":29,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1257,1260],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1257,1260],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":29,"column":79,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":29,"endColumn":82,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1290,1293],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1290,1293],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":40,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":40,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1788,1791],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1788,1791],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import dotenv from \"dotenv\";\ndotenv.config();\nimport { subscribe, STEP_READY_TOPIC, OUTBOX_TOPIC } from \"../lib/queue\";\nimport { runStep } from \"./runner\";\nimport { log } from \"../lib/logger\";\nimport fs from 'node:fs';\nimport path from 'node:path';\nimport IORedis from 'ioredis';\nimport { runWithContext } from '../lib/observability';\nimport { store } from \"../lib/store\";\nimport crypto from 'node:crypto';\nimport { startOutboxRelay } from './relay';\nimport { initTracing } from '../lib/tracing';\n\nconst STEP_TIMEOUT_MS = Number(process.env.STEP_TIMEOUT_MS || 30000);\ninitTracing('nofx-worker').catch(()=>{});\nfunction hashInputs(val: any) {\n  return crypto.createHash('sha256').update(JSON.stringify(val || {})).digest('hex').slice(0, 12);\n}\n\nsubscribe(STEP_READY_TOPIC, async ({ runId, stepId, idempotencyKey, __attempt }: any) => {\n  return runWithContext({ runId, stepId, retryCount: Math.max(0, Number(__attempt || 1) - 1) }, async () => {\n    log.info({ runId, stepId, attempt: __attempt }, \"worker handling step\");\n    // Compute or use provided idempotency key, and guard via inbox\n    let key = String(idempotencyKey || '');\n    try {\n      if (!key) {\n        const step = await store.getStep(stepId);\n        if (step) key = `${runId}:${(step as any).name}:${hashInputs((step as any).inputs)}`;\n      }\n    } catch {}\n    if (key) {\n      const isNew = await store.inboxMarkIfNew(key).catch(()=> true);\n      if (!isNew) { log.info({ key }, 'inbox.duplicate.ignored'); return; }\n    }\n    const timeout = new Promise((_res, rej) => setTimeout(() => rej(new Error('step timeout')), STEP_TIMEOUT_MS));\n    try {\n      await Promise.race([ runStep(runId, stepId), timeout ]);\n      await store.outboxAdd(OUTBOX_TOPIC, { type: 'step.succeeded', runId, stepId });\n    } catch (err: any) {\n      await store.outboxAdd(OUTBOX_TOPIC, { type: 'step.failed', runId, stepId, error: err?.message || String(err) });\n      throw err;\n    }\n  });\n});\n\nlog.info(\"Worker up\");\n// Start outbox relay daemon\nstartOutboxRelay();\n\n// Heartbeat to Redis for diagnostics\ntry {\n  const hb = new IORedis(process.env.REDIS_URL || 'redis://localhost:6379', { maxRetriesPerRequest: null });\n  const key = 'nofx:worker:heartbeat';\n  setInterval(async () => {\n    try { await hb.set(key, String(Date.now()), 'EX', 10); } catch {}\n  }, 3000);\n} catch {}\n\n// Dev-only restart watcher to exit when flag changes\nif (process.env.DEV_RESTART_WATCH === '1') {\n  const flagPath = path.join(process.cwd(), '.dev-restart-worker');\n  const startedAt = Date.now();\n  let last = 0;\n  // Clean up stale flag from previous run\n  try { const st = fs.statSync(flagPath); if (st.mtimeMs <= startedAt) fs.unlinkSync(flagPath); } catch {}\n  setInterval(() => {\n    try {\n      const stat = fs.statSync(flagPath);\n      const m = stat.mtimeMs;\n      if (m > startedAt && m > last) { last = m; log.info('Dev restart flag changed; exiting worker'); process.exit(0); }\n    } catch {}\n  }, 1500);\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Volumes/Development/nofx-local-starter/src/worker/relay.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":18,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { store } from \"../lib/store\";\nimport { enqueue } from \"../lib/queue\";\nimport { log } from \"../lib/logger\";\n\nconst INTERVAL_MS = Number(process.env.OUTBOX_RELAY_INTERVAL_MS || 1000);\nconst BATCH = Number(process.env.OUTBOX_RELAY_BATCH || 25);\n\nexport function startOutboxRelay() {\n  async function tick() {\n    try {\n      const rows = await store.outboxListUnsent(BATCH);\n      type OutboxRow = { id: string; topic: string; payload: unknown };\n      for (const r of rows as OutboxRow[]) {\n        try {\n          const payload = typeof r.payload === 'object' && r.payload !== null ? r.payload as Record<string, unknown> : {};\n          await enqueue(r.topic, { ...payload, __attempt: 1 });\n          await store.outboxMarkSent(r.id);\n        } catch (e) {\n          // leave unsent for next tick\n          // optional: add backoff if needed\n        }\n      }\n    } catch (e) {\n      log.error({ e }, 'outbox.tick.error');\n    } finally {\n      setTimeout(tick, INTERVAL_MS);\n    }\n  }\n  setTimeout(tick, INTERVAL_MS);\n}\n\nexport default startOutboxRelay;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Volumes/Development/nofx-local-starter/src/worker/runner.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]}]
