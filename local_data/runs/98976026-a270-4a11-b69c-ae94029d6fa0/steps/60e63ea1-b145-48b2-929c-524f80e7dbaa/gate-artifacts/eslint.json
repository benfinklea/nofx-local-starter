[{"filePath":"/Volumes/Development/nofx-local-starter/src/api/loader.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Volumes/Development/nofx-local-starter/src/api/main.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":60,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":60,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2493,2496],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2493,2496],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":65,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":65,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2703,2706],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2703,2706],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import express from \"express\";\nimport dotenv from \"dotenv\";\nimport path from 'node:path';\nimport { z } from \"zod\";\nimport { PlanSchema } from \"../shared/types\";\nimport { store } from \"../lib/store\";\nimport { log } from \"../lib/logger\";\nimport { enqueue, STEP_READY_TOPIC } from \"../lib/queue\";\nimport { recordEvent } from \"../lib/events\";\nimport { mountRouters } from './loader';\nimport fs from 'node:fs';\nimport http from 'node:http';\n\ndotenv.config();\nexport const app = express();\napp.use(express.json({ limit: \"2mb\" }));\napp.use(express.urlencoded({ extended: true }));\n\n// ADD view engine + static for future UI\napp.set('view engine', 'ejs');\napp.set('views', path.join(__dirname, '..', 'ui', 'views'));\napp.use('/ui/static', express.static(path.join(__dirname, '..', 'ui', 'static')));\n\napp.get(\"/health\", (_req, res) => res.json({ ok: true }));\n\nconst CreateRunSchema = z.object({ plan: PlanSchema });\n\n// Preview a plan built from standard (plain-language) input\napp.post('/runs/preview', async (req, res) => {\n  try {\n    if (req.body && req.body.standard) {\n      const { prompt, quality = true, openPr = false, filePath, summarizeQuery, summarizeTarget } = req.body.standard || {};\n      const built = await buildPlanFromPrompt(String(prompt||'').trim(), { quality, openPr, filePath, summarizeQuery, summarizeTarget });\n      return res.json({ steps: built.steps, plan: built });\n    }\n    return res.status(400).json({ error: 'missing standard' });\n  } catch (e: unknown) {\n    const message = e instanceof Error ? e.message : 'failed to preview';\n    return res.status(400).json({ error: message });\n  }\n});\n\napp.post(\"/runs\", async (req, res) => {\n  // Standard mode: build a plan from plain-language prompt and settings\n  if (req.body && req.body.standard) {\n    try {\n      const { prompt, quality = true, openPr = false, filePath, summarizeQuery, summarizeTarget } = req.body.standard || {};\n      const built = await buildPlanFromPrompt(String(prompt||'').trim(), { quality, openPr, filePath, summarizeQuery, summarizeTarget });\n      req.body = { plan: built };\n    } catch (e: unknown) {\n      const message = e instanceof Error ? e.message : 'bad standard request';\n      return res.status(400).json({ error: message });\n    }\n  }\n  const parsed = CreateRunSchema.safeParse(req.body);\n  if (!parsed.success) return res.status(400).json({ error: parsed.error.flatten() });\n  const { plan } = parsed.data;\n\n  const run = await store.createRun(plan);\n  const runId = (run as any).id || run;\n  await recordEvent(runId, \"run.created\", { plan });\n\n  for (const s of plan.steps) {\n    const step = await store.createStep(runId, s.name, s.tool, s.inputs || {});\n    const stepId = (step as any).id || step;\n    await recordEvent(runId, \"step.enqueued\", { name: s.name, tool: s.tool }, stepId);\n    await enqueue(STEP_READY_TOPIC, { runId, stepId });\n    // Simple Mode fallback: run inline to avoid any queue hiccups\n    if ((process.env.QUEUE_DRIVER || 'memory').toLowerCase() === 'memory') {\n      // Lazy import to avoid cycle\n      // eslint-disable-next-line @typescript-eslint/no-var-requires\n      const { runStep } = require('../worker/runner');\n      setTimeout(() => { try { runStep(runId, stepId); } catch {} }, 5);\n    }\n  }\n\n  res.status(201).json({ id: runId, status: \"queued\" });\n});\n\napp.get(\"/runs/:id\", async (req, res) => {\n  const runId = req.params.id;\n  const run = await store.getRun(runId);\n  if (!run) return res.status(404).json({ error: \"not found\" });\n  const steps = await store.listStepsByRun(runId);\n  const artifacts = await store.listArtifactsByRun(runId);\n  res.json({ run, steps, artifacts });\n});\n\napp.get(\"/runs/:id/timeline\", async (req, res) => {\n  const runId = req.params.id;\n  const ev = await store.listEvents(runId);\n  res.json(ev);\n});\n\n// ADD at the end of file, after existing routes:\nmountRouters(app);\n\nconst port = Number(process.env.PORT || 3000);\nfunction listenWithRetry(attempt = 0) {\n  const server = http.createServer(app);\n  server.once('error', (err: unknown) => {\n    const code = (err as NodeJS.ErrnoException)?.code;\n    if (code === 'EADDRINUSE') {\n      const delay = 500 + attempt*250;\n      if (attempt < 4) {\n        log.warn({ attempt, delay }, 'Port in use; retrying listen');\n        setTimeout(() => listenWithRetry(attempt+1), delay);\n      } else {\n        log.warn('Port still in use after retries');\n        if (process.env.DEV_RESTART_WATCH === '1') {\n          log.warn('Dev mode: exiting to allow clean restart');\n          process.exit(0);\n        }\n        throw err;\n      }\n    } else {\n      throw err;\n    }\n  });\n  server.listen(port, () => log.info(`API listening on :${port}`));\n}\nif (process.env.NODE_ENV !== 'test') {\n  listenWithRetry();\n}\n\n// Dev-only restart watcher: if flag file changes, exit to let ts-node-dev respawn\nif (process.env.DEV_RESTART_WATCH === '1') {\n  const flagPath = path.join(process.cwd(), '.dev-restart-api');\n  const startedAt = Date.now();\n  let last = 0;\n  // Clean up stale flag from previous run\n  try { const st = fs.statSync(flagPath); if (st.mtimeMs <= startedAt) fs.unlinkSync(flagPath); } catch {}\n  setInterval(() => {\n    try {\n      const stat = fs.statSync(flagPath);\n      const m = stat.mtimeMs;\n      if (m > startedAt && m > last) { last = m; log.info('Dev restart flag changed; exiting'); process.exit(0); }\n    } catch {\n      // ignore missing flag or stat errors in dev restart watcher\n    }\n  }, 1500);\n}\n\n// Build a plan from simple prompt using Settings\nimport { buildPlanFromPrompt } from './planBuilder';\n\nexport default app;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Volumes/Development/nofx-local-starter/src/api/planBuilder.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Volumes/Development/nofx-local-starter/src/api/routes/auth.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Volumes/Development/nofx-local-starter/src/api/routes/dev.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Volumes/Development/nofx-local-starter/src/api/routes/gates.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":32,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":32,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1450,1453],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1450,1453],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":34,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":34,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1540,1543],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1540,1543],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":35,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":35,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1585,1588],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1585,1588],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":36,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":36,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1641,1644],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1641,1644],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":39,"column":78,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":39,"endColumn":81,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1819,1822],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1819,1822],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":40,"column":68,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":40,"endColumn":71,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1892,1895],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1892,1895],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":52,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":52,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2399,2402],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2399,2402],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":54,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":54,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2489,2492],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2489,2492],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":55,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":55,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2534,2537],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2534,2537],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":56,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":56,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2590,2593],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2590,2593],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":59,"column":78,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":59,"endColumn":81,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2768,2771],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2768,2771],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":60,"column":68,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":60,"endColumn":71,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2841,2844],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2841,2844],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { Express } from 'express';\nimport { store } from '../../lib/store';\nimport { recordEvent } from '../../lib/events';\nimport { isAdmin } from '../../lib/auth';\n\nexport default function mount(app: Express){\n  // List gates for a run\n  app.get('/runs/:id/gates', async (req, res) => {\n    const runId = req.params.id;\n    const rows = await store.listGatesByRun(runId);\n    res.json(rows);\n  });\n\n  // Create a gate explicitly (optional; manual handler also auto-creates)\n  app.post('/gates', async (req, res) => {\n    const { run_id, step_id, gate_type } = req.body || {};\n    if (!run_id || !gate_type) return res.status(400).json({ error: 'run_id and gate_type required' });\n    const g = await store.createOrGetGate(run_id, step_id || '', gate_type as string);\n    await recordEvent(run_id, 'gate.created', { gate: g }, step_id || undefined);\n    res.status(201).json(g);\n  });\n\n  // Approve a gate\n  app.post('/gates/:id/approve', async (req, res) => {\n    if (!isAdmin(req)) return res.status(401).json({ error: 'auth required', login: '/ui/login' });\n    const id = req.params.id;\n    const approvedBy = req.body?.approved_by || 'local-user';\n    // Find gate by scanning run gates (fs driver); for db we rely on update by id via store\n    // For simplicity, ask client to also provide run_id when approving in fs mode.\n    // Fallback: try to locate gate across recent runs.\n    const runs = await store.listRuns(50);\n    let found: any = null;\n    for (const r of runs) {\n      const gs = await store.listGatesByRun((r as any).id);\n      const g = gs.find(x => (x as any).id === id);\n      if (g) { found = { run_id: (r as any).id, ...g }; break; }\n    }\n    if (!found) return res.status(404).json({ error: 'not found' });\n    await store.updateGate(id, { status: 'passed', run_id: found.run_id } as any);\n    const gate = { id, run_id: found.run_id, status: 'passed' } as any;\n    if (!gate) return res.status(404).json({ error: 'not found' });\n    await recordEvent(gate.run_id, 'gate.approved', { gateId: gate.id, approvedBy });\n    res.json(gate);\n  });\n\n  // Waive a gate\n  app.post('/gates/:id/waive', async (req, res) => {\n    if (!isAdmin(req)) return res.status(401).json({ error: 'auth required', login: '/ui/login' });\n    const id = req.params.id;\n    const approvedBy = req.body?.approved_by || 'local-user';\n    const runs = await store.listRuns(50);\n    let found: any = null;\n    for (const r of runs) {\n      const gs = await store.listGatesByRun((r as any).id);\n      const g = gs.find(x => (x as any).id === id);\n      if (g) { found = { run_id: (r as any).id, ...g }; break; }\n    }\n    if (!found) return res.status(404).json({ error: 'not found' });\n    await store.updateGate(id, { status: 'waived', run_id: found.run_id } as any);\n    const gate = { id, run_id: found.run_id, status: 'waived' } as any;\n    if (!gate) return res.status(404).json({ error: 'not found' });\n    await recordEvent(gate.run_id, 'gate.waived', { gateId: gate.id, approvedBy });\n    res.json(gate);\n  });\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Volumes/Development/nofx-local-starter/src/api/routes/models.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":18,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[872,875],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[872,875],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":32,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":32,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1820,1823],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1820,1823],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":74,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":74,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4026,4029],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4026,4029],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":93,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":93,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4660,4663],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4660,4663],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":95,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":95,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4760,4763],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4760,4763],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-inner-declarations","severity":1,"message":"Move function declaration to function body root.","line":96,"column":7,"nodeType":"FunctionDeclaration","messageId":"moveDeclToRoot","endLine":98,"endColumn":8},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":107,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":107,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5093,5096],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5093,5096],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":110,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":110,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5195,5198],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5195,5198],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { Express } from 'express';\nimport { isAdmin } from '../../lib/auth';\nimport { listModels, upsertModel, deleteModel, getModelByName } from '../../lib/models';\nimport { importOpenAIModels, seedAnthropicModels, seedGeminiModels, listOpenAIModels } from '../../lib/modelImporters';\nimport { getSettings, updateSettings } from '../../lib/settings';\n\nexport default function mount(app: Express){\n  app.get('/models', async (req, res) => {\n    if (!isAdmin(req)) return res.status(401).json({ error: 'auth required', login: '/ui/login' });\n    const rows = await listModels();\n    res.json({ models: rows });\n  });\n  app.post('/models', async (req, res) => {\n    if (!isAdmin(req)) return res.status(401).json({ error: 'auth required', login: '/ui/login' });\n    try {\n      const m = await upsertModel(req.body || {});\n      res.status(201).json(m);\n    } catch (e:any) {\n      res.status(400).json({ error: e.message });\n    }\n  });\n  app.post('/models/preview/openai', async (req, res) => {\n    if (!isAdmin(req)) return res.status(401).json({ error: 'auth required', login: '/ui/login' });\n    try {\n      const filterRaw = (req.body && (req.body.filter || req.body.includes)) || '';\n      const excludeRaw = (req.body && (req.body.exclude || req.body.excludes)) || '';\n      const filter = Array.isArray(filterRaw) ? filterRaw : String(filterRaw).split(',').map((s:string)=>s.trim()).filter(Boolean);\n      const exclude = Array.isArray(excludeRaw) ? excludeRaw : String(excludeRaw).split(',').map((s:string)=>s.trim()).filter(Boolean);\n      const recommendedOnly = filter.length === 0 ? !!(req.body && (req.body.recommendedOnly ?? true)) : false;\n      const candidates = await listOpenAIModels({ filter, exclude, recommendedOnly });\n      res.json({ candidates, count: candidates.length });\n    } catch (e:any) {\n      res.status(400).json({ error: e.message });\n    }\n  });\n  app.post('/models/import/:vendor', async (req, res) => {\n    if (!isAdmin(req)) return res.status(401).json({ error: 'auth required', login: '/ui/login' });\n    const v = (req.params.vendor || '').toLowerCase();\n    try {\n      const namesRaw = req.body && (req.body.names || req.body.list);\n      const names = Array.isArray(namesRaw)\n        ? namesRaw\n        : (typeof namesRaw === 'string' ? namesRaw.split(',').map((s:string)=>s.trim()).filter(Boolean) : []);\n      if (names.length && (v === 'anthropic' || v === 'gemini')) {\n        let count = 0;\n        for (const n of names) {\n          await upsertModel({ provider: v, name: n, kind: v, display_name: n });\n          count++;\n        }\n        return res.json({ imported: count, via: 'custom-list' });\n      }\n      if (v === 'openai') {\n        // If explicit names are provided, upsert just those.\n        if (names.length) {\n          let count = 0;\n          for (const n of names) {\n            await upsertModel({ provider: 'openai', name: n, kind: 'openai', display_name: n });\n            count++;\n          }\n          return res.json({ imported: count, via: 'explicit-list' });\n        }\n        const filterRaw = (req.body && (req.body.filter || req.body.includes)) || '';\n        const excludeRaw = (req.body && (req.body.exclude || req.body.excludes)) || '';\n        const filter = Array.isArray(filterRaw) ? filterRaw : String(filterRaw).split(',').map((s:string)=>s.trim()).filter(Boolean);\n        const exclude = Array.isArray(excludeRaw) ? excludeRaw : String(excludeRaw).split(',').map((s:string)=>s.trim()).filter(Boolean);\n        // If user provided filters, don't restrict to recommended only.\n        const recommendedOnly = filter.length === 0 ? !!(req.body && (req.body.recommendedOnly ?? true)) : false;\n        const r = await importOpenAIModels({ filter, exclude, recommendedOnly });\n        return res.json(r);\n      }\n      if (v === 'anthropic') return res.json(await seedAnthropicModels());\n      if (v === 'gemini') return res.json(await seedGeminiModels());\n      return res.status(400).json({ error: 'unknown vendor' });\n    } catch (e:any) {\n      return res.status(400).json({ error: e.message });\n    }\n  });\n\n  app.post('/models/promote/gemini', async (req, res) => {\n    if (!isAdmin(req)) return res.status(401).json({ error: 'auth required', login: '/ui/login' });\n    try {\n      const from = 'gemini-1.5-pro';\n      const to = 'gemini-2.5-pro';\n      const fromModel = await getModelByName(from);\n      await upsertModel({\n        provider: 'gemini',\n        name: to,\n        kind: 'gemini',\n        display_name: 'Gemini 2.5 Pro',\n        input_per_1m: fromModel?.input_per_1m,\n        output_per_1m: fromModel?.output_per_1m,\n        active: true\n      } as any);\n      const settings = await getSettings();\n      const mo = settings.llm.modelOrder || {} as any;\n      function repl(arr?: string[]){\n        return Array.isArray(arr) ? arr.map(x => x === from ? to : x) : [];\n      }\n      const next = {\n        llm: {\n          modelOrder: {\n            docs: repl(mo.docs),\n            reasoning: repl(mo.reasoning),\n            codegen: repl(mo.codegen)\n          }\n        }\n      } as any;\n      await updateSettings(next);\n      res.json({ ok: true, updatedModel: to });\n    } catch (e:any) {\n      res.status(400).json({ error: e.message });\n    }\n  });\n  app.delete('/models/:id', async (req, res) => {\n    if (!isAdmin(req)) return res.status(401).json({ error: 'auth required', login: '/ui/login' });\n    await deleteModel(req.params.id);\n    res.json({ ok: true });\n  });\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Volumes/Development/nofx-local-starter/src/api/routes/queue.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Volumes/Development/nofx-local-starter/src/api/routes/settings.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":11,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[496,499],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[496,499],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":12,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[648,651],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[648,651],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":13,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[675,678],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[675,678],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { Express } from 'express';\nimport { getSettings, updateSettings } from '../../lib/settings';\nimport { listModels } from '../../lib/models';\nimport { query } from '../../lib/db';\nimport { isAdmin } from '../../lib/auth';\n\nexport default function mount(app: Express){\n  app.get('/settings', async (req, res) => {\n    if (!isAdmin(req)) return res.status(401).json({ error: 'auth required', login: '/ui/login' });\n    const settings = await getSettings();\n    const rules = await query<any>(`select table_name, allowed_ops, constraints from nofx.db_write_rule where tenant_id='local' order by table_name`)\n      .catch(()=>({ rows: [] as any[] }));\n    let models: any[] = [];\n    try { models = await listModels(); } catch { models = []; }\n    res.json({ settings, db_write_rules: rules.rows, models });\n  });\n\n  app.post('/settings', async (req, res) => {\n    if (!isAdmin(req)) return res.status(401).json({ error: 'auth required', login: '/ui/login' });\n    const body = req.body || {};\n    const next = await updateSettings(body.settings || {});\n    if (Array.isArray(body.db_write_rules)) {\n      // replace all rules for tenant 'local' with provided set (simple local UX)\n      await query(`delete from nofx.db_write_rule where tenant_id='local'`).catch(()=>{});\n      for (const r of body.db_write_rules) {\n        if (!r || !r.table_name || !Array.isArray(r.allowed_ops)) continue;\n        await query(\n          `insert into nofx.db_write_rule (tenant_id, table_name, allowed_ops, constraints)\n           values ('local', $1, $2::text[], $3::jsonb)\n           on conflict (tenant_id, table_name) do update set allowed_ops=excluded.allowed_ops, constraints=excluded.constraints`,\n          [r.table_name, r.allowed_ops, r.constraints || {}]\n        ).catch(()=>{});\n      }\n    }\n    res.json({ ok: true, settings: next });\n  });\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Volumes/Development/nofx-local-starter/src/api/routes/ui.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":30,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1231,1234],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1231,1234],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":30,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1255,1258],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1255,1258],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":43,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":43,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1848,1851],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1848,1851],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { Express } from 'express';\nimport { store } from '../../lib/store';\nimport { supabase, ARTIFACT_BUCKET } from '../../lib/supabase';\nimport { getSettings } from '../../lib/settings';\nimport { listModels } from '../../lib/models';\nimport { isAdmin } from '../../lib/auth';\n\nexport default function mount(app: Express){\n  app.get('/ui/runs', async (_req, res) => {\n    const rows = await store.listRuns(100);\n    res.render('runs', { runs: rows });\n  });\n  // Place the 'new' route BEFORE the ':id' route to avoid param capture\n  app.get('/ui/runs/new', async (_req, res) => {\n    res.render('new_run');\n  });\n  app.get('/ui/runs/:id', async (req, res) => {\n    const runId = req.params.id;\n    const run = await store.getRun(runId);\n    if (!run) {\n      // Graceful fallback if run not yet persisted (FS lag) or missing\n      return res.render('run', { run: { id: runId, status: 'queued' }, artifacts: [], gates: [] });\n    }\n    const artifacts = await store.listArtifactsByRun(runId);\n    const gates = await store.listGatesByRun(runId);\n    res.render('run', { run, artifacts, gates });\n  });\n  app.get('/ui/settings', async (req, res) => {\n    if (!isAdmin(req)) return res.redirect('/ui/login');\n    let settings: any = null; let models: any[] = [];\n    try { settings = await getSettings(); } catch {}\n    try { models = await listModels(); } catch {}\n    res.render('settings', { preloaded: { settings, models } });\n  });\n  app.get('/ui/models', async (req, res) => {\n    if (!isAdmin(req)) return res.redirect('/ui/login');\n    res.render('models');\n  });\n  app.get('/ui/artifacts/signed', async (req, res) => {\n    const pth = String(req.query.path || '');\n    if (store.driver === 'fs') {\n      const full = require('node:path').join(process.cwd(), 'local_data', pth.replace(/^\\/+/, ''));\n      return res.sendFile(full, (err:any) => { if (err) res.status(404).send('not found'); });\n    }\n    const { data, error } = await supabase.storage.from(ARTIFACT_BUCKET).createSignedUrl(pth, 3600);\n    if (error || !data) return res.status(404).send('not found');\n    res.redirect(data.signedUrl);\n  });\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Volumes/Development/nofx-local-starter/src/lib/artifacts.ts","messages":[{"ruleId":"prefer-const","severity":1,"message":"'error' is never reassigned. Use 'const' instead.","line":20,"column":9,"nodeType":"Identifier","messageId":"useConst","endLine":20,"endColumn":14,"fix":{"range":[845,964],"text":"const { error } = await supabase.storage.from(ARTIFACT_BUCKET).upload(rel, new Blob([content]), { upsert: true } as any);"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":20,"column":117,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":120,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[959,962],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[959,962],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import fs from 'node:fs';\nimport fsp from 'node:fs/promises';\nimport path from 'node:path';\nimport { supabase, ARTIFACT_BUCKET } from './supabase';\nimport { store } from './store';\n\nfunction ensureDirSync(p: string) { if (!fs.existsSync(p)) fs.mkdirSync(p, { recursive: true }); }\n\nexport async function saveArtifact(runId: string, stepId: string, artifactName: string, content: string, contentType='text/plain') {\n  if (store.driver === 'fs') {\n    const rel = path.join('runs', runId, 'steps', stepId, artifactName);\n    const full = path.join(process.cwd(), 'local_data', rel);\n    ensureDirSync(path.dirname(full));\n    await fsp.writeFile(full, content, 'utf8');\n    await store.addArtifact(stepId, contentType, rel, { driver: 'fs' });\n    return rel;\n  }\n  // Supabase path\n  const rel = `runs/${runId}/steps/${stepId}/${artifactName}`;\n  let { error } = await supabase.storage.from(ARTIFACT_BUCKET).upload(rel, new Blob([content]), { upsert: true } as any);\n  if (error) throw error;\n  await store.addArtifact(stepId, contentType, rel, { driver: 'supabase' });\n  return rel;\n}\n\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Volumes/Development/nofx-local-starter/src/lib/auth.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Volumes/Development/nofx-local-starter/src/lib/db.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":9,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[187,190],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[187,190],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":9,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[215,218],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[215,218],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Pool } from \"pg\";\nimport dotenv from \"dotenv\";\ndotenv.config();\n\nexport const pool = new Pool({\n  connectionString: process.env.DATABASE_URL\n});\n\nexport async function query<T = any>(text: string, params?: any[]) {\n  const res = await pool.query(text, params);\n  return res as { rows: T[] };\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Volumes/Development/nofx-local-starter/src/lib/events.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":3,"column":73,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":3,"endColumn":76,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[106,109],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[106,109],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { store } from \"./store\";\n\nexport async function recordEvent(runId: string, type: string, payload: any = {}, stepId?: string) {\n  await store.recordEvent(runId, type, payload, stepId);\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Volumes/Development/nofx-local-starter/src/lib/logger.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Volumes/Development/nofx-local-starter/src/lib/modelImporters.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Volumes/Development/nofx-local-starter/src/lib/models.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":16,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[329,332],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[329,332],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":21,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":21,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[526,529],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[526,529],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":25,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[754,757],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[754,757],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":35,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":35,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1767,1770],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1767,1770],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { query } from './db';\n\nexport type ModelRow = {\n  id: string;\n  tenant_id: string;\n  name: string;\n  display_name?: string;\n  provider: string;\n  kind: string;\n  base_url?: string;\n  input_per_1m?: number;\n  output_per_1m?: number;\n  context_tokens?: number;\n  max_output_tokens?: number;\n  active: boolean;\n  metadata?: any;\n};\n\nexport async function listModels(): Promise<ModelRow[]> {\n  const r = await query<ModelRow>(`select * from nofx.model where tenant_id='local' order by provider, name`);\n  return r.rows as any;\n}\nexport async function getModelByName(name: string): Promise<ModelRow | undefined> {\n  const r = await query<ModelRow>(`select * from nofx.model where tenant_id='local' and name=$1 limit 1`, [name]);\n  return r.rows[0] as any;\n}\nexport async function upsertModel(m: Partial<ModelRow>): Promise<ModelRow> {\n  const r = await query<ModelRow>(\n    `insert into nofx.model (tenant_id, name, display_name, provider, kind, base_url, input_per_1m, output_per_1m, context_tokens, max_output_tokens, active, metadata)\n     values ('local', $1,$2,$3,$4,$5,$6,$7,$8,$9, coalesce($10,true), coalesce($11,'{}'::jsonb))\n     on conflict (tenant_id, provider, name) do update set display_name=excluded.display_name, kind=excluded.kind, base_url=excluded.base_url, input_per_1m=excluded.input_per_1m, output_per_1m=excluded.output_per_1m, context_tokens=excluded.context_tokens, max_output_tokens=excluded.max_output_tokens, active=excluded.active, metadata=excluded.metadata\n     returning *`,\n    [m.name, m.display_name || null, m.provider, m.kind || 'openai', m.base_url || null, m.input_per_1m || null, m.output_per_1m || null, m.context_tokens || null, m.max_output_tokens || null, m.active ?? true, m.metadata || {}]\n  );\n  return r.rows[0] as any;\n}\nexport async function deleteModel(id: string): Promise<void> {\n  await query(`delete from nofx.model where id=$1 and tenant_id='local'`, [id]);\n}\n\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Volumes/Development/nofx-local-starter/src/lib/queue.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Volumes/Development/nofx-local-starter/src/lib/queue/MemoryAdapter.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":3,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":3,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[68,71],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[68,71],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":6,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[167,170],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[167,170],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":17,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[714,717],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[714,717],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":30,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1265,1268],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1265,1268],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { log } from \"../logger\";\n\ntype Job = { id: number; payload: any; runAt: number };\n\nexport class MemoryQueueAdapter {\n  private subs = new Map<string, Array<(p:any)=>Promise<void>>>();\n  private queues = new Map<string, Job[]>();\n  private active = new Map<string, number>();\n  private counts = new Map<string, { waiting:number; active:number; completed:number; failed:number; delayed:number; paused:number }>();\n  private idSeq = 1;\n\n  private ensure(topic: string) {\n    if (!this.queues.has(topic)) this.queues.set(topic, []);\n    if (!this.counts.has(topic)) this.counts.set(topic, { waiting: 0, active: 0, completed: 0, failed: 0, delayed: 0, paused: 0 });\n  }\n\n  async enqueue(topic: string, payload: any, options?: { delay?: number }) {\n    this.ensure(topic);\n    const delay = Math.max(0, Number(options?.delay || 0));\n    const runAt = Date.now() + delay;\n    const job: Job = { id: this.idSeq++, payload, runAt };\n    const q = this.queues.get(topic)!;\n    q.push(job);\n    const c = this.counts.get(topic)!;\n    if (delay > 0) c.delayed += 1; else c.waiting += 1;\n    log.info({ topic, payload, delay }, 'memq.enqueued');\n    setTimeout(() => this.drain(topic), Math.max(0, runAt - Date.now()));\n  }\n\n  subscribe(topic: string, handler: (payload:any)=>Promise<void>) {\n    const arr = this.subs.get(topic) || [];\n    arr.push(handler);\n    this.subs.set(topic, arr);\n    log.info({ topic }, 'memq.subscribed');\n    // kick off any waiting jobs\n    this.drain(topic);\n  }\n\n  private async drain(topic: string) {\n    this.ensure(topic);\n    if ((this.active.get(topic) || 0) > 0) return; // simple single-flight per topic\n    const subs = this.subs.get(topic) || [];\n    if (subs.length === 0) return;\n    const q = this.queues.get(topic)!;\n    const now = Date.now();\n    const readyIdx = q.findIndex(j => j.runAt <= now);\n    if (readyIdx === -1) return;\n    const job = q.splice(readyIdx, 1)[0];\n    const c = this.counts.get(topic)!;\n    if (job.runAt > now) { c.delayed = Math.max(0, c.delayed - 1); } else { c.waiting = Math.max(0, c.waiting - 1); }\n    this.active.set(topic, 1);\n    c.active += 1;\n    const handler = subs[0]; // one handler per topic is fine for simple mode\n    try {\n      await handler(job.payload);\n      c.completed += 1;\n      log.info({ topic, jobId: job.id }, 'memq.completed');\n    } catch (err) {\n      c.failed += 1;\n      log.error({ topic, jobId: job.id, err }, 'memq.failed');\n    } finally {\n      c.active = Math.max(0, c.active - 1);\n      this.active.set(topic, 0);\n      // continue draining if more\n      if (this.queues.get(topic)!.length) setImmediate(() => this.drain(topic));\n    }\n  }\n\n  async getCounts(topic: string) {\n    this.ensure(topic);\n    return this.counts.get(topic)!;\n  }\n}\n\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Volumes/Development/nofx-local-starter/src/lib/queue/RedisAdapter.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":18,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[563,566],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[563,566],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":22,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":22,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[749,752],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[749,752],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Queue, Worker, JobsOptions } from \"bullmq\";\nimport IORedis from \"ioredis\";\nimport { log } from \"../logger\";\n\nexport class RedisQueueAdapter {\n  connection = new IORedis(process.env.REDIS_URL || \"redis://localhost:6379\", {\n    maxRetriesPerRequest: null\n  });\n  queues = new Map<string, Queue>();\n\n  private getQueue(topic: string) {\n    if (!this.queues.has(topic)) {\n      const q = new Queue(topic, { connection: this.connection });\n      this.queues.set(topic, q);\n    }\n    return this.queues.get(topic)!;\n  }\n  async enqueue(topic: string, payload: any, options?: JobsOptions) {\n    await this.getQueue(topic).add(\"job\", payload, options);\n    log.info({ topic, payload }, \"enqueued\");\n  }\n  subscribe(topic: string, handler: (payload:any)=>Promise<void>) {\n    const w = new Worker(topic, async (job) => {\n      await handler(job.data);\n    }, { connection: this.connection });\n    w.on('ready', () => log.info({ topic }, 'worker.ready'));\n    w.on('active', (job) => log.info({ topic, jobId: job.id }, 'worker.active'));\n    w.on('completed', (job) => log.info({ topic, jobId: job.id }, 'worker.completed'));\n    w.on('failed', (job, err) => log.error({ topic, jobId: job?.id, err }, 'worker.failed'));\n    log.info({ topic }, \"subscribed\");\n  }\n\n  async getCounts(topic: string) {\n    const q = this.getQueue(topic);\n    return q.getJobCounts('waiting','active','completed','failed','delayed','paused');\n  }\n\n  constructor() {\n    this.connection.on('connect', () => log.info('redis.connect'));\n    this.connection.on('ready', () => log.info('redis.ready'));\n    this.connection.on('error', (err) => log.error({ err }, 'redis.error'));\n    this.connection.on('reconnecting', () => log.warn('redis.reconnecting'));\n    this.connection.on('end', () => log.warn('redis.end'));\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Volumes/Development/nofx-local-starter/src/lib/queue/index.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":5,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":5,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[228,231],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[228,231],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":9,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[419,422],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[419,422],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":10,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[536,539],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[536,539],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { RedisQueueAdapter } from \"./RedisAdapter\";\nimport { MemoryQueueAdapter } from \"./MemoryAdapter\";\nimport type { JobsOptions } from \"bullmq\";\nconst DRIVER = (process.env.QUEUE_DRIVER || 'memory').toLowerCase();\nlet impl: any;\nif (DRIVER === 'redis') impl = new RedisQueueAdapter();\nelse impl = new MemoryQueueAdapter();\nexport const STEP_READY_TOPIC = \"step.ready\";\nexport const enqueue = (topic:string, payload:any, options?: JobsOptions)=>impl.enqueue(topic,payload,options);\nexport const subscribe = (topic:string, handler:(p:any)=>Promise<void>)=>impl.subscribe(topic,handler);\nexport const getCounts = (topic:string)=>impl.getCounts(topic);\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Volumes/Development/nofx-local-starter/src/lib/settings.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":54,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":54,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1548,1551],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1548,1551],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":54,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":54,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1560,1563],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1560,1563],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":54,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":54,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1570,1573],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1570,1573],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":85,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":85,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2898,2901],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2898,2901],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":86,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":86,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2982,2985],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2982,2985],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":87,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":87,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3065,3068],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3065,3068],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":90,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":90,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3167,3170],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3167,3170],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":91,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":91,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3262,3265],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3262,3265],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":92,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":92,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3365,3368],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3365,3368],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":94,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":94,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3472,3475],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3472,3475],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":95,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":95,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3566,3569],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3566,3569],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":106,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":106,"endColumn":13},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":118,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":118,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4334,4337],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4334,4337],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":129,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":129,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4898,4901],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4898,4901],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { query } from './db';\n\nexport type ApprovalsSettings = {\n  dbWrites: 'none'|'dangerous'|'all';\n  allowWaive: boolean;\n};\nexport type GatesSettings = {\n  typecheck: boolean;\n  lint: boolean;\n  unit: boolean;\n  coverageThreshold: number; // 0..1\n};\nexport type Settings = {\n  approvals: ApprovalsSettings;\n  gates: GatesSettings;\n  llm: LlmSettings;\n};\n\nexport type LlmSettings = {\n  order: {\n    codegen: Array<'openai'|'anthropic'|'gemini'>;\n    reasoning: Array<'openai'|'anthropic'|'gemini'>;\n    docs: Array<'openai'|'anthropic'|'gemini'>;\n  };\n  modelOrder?: { docs?: string[]; reasoning?: string[]; codegen?: string[] };\n  providers?: Record<string, { kind: 'openai-compatible'|'http'; baseUrl?: string }>;\n  pricing?: Record<string, { inputPer1M?: number; outputPer1M?: number }>;\n};\n\nconst DEFAULTS: Settings = {\n  approvals: { dbWrites: 'dangerous', allowWaive: true },\n  gates: { typecheck: true, lint: true, unit: true, coverageThreshold: 0.9 },\n  llm: {\n    order: {\n      codegen: ['openai','anthropic','gemini'],\n      reasoning: ['anthropic','openai','gemini'],\n      docs: ['gemini','anthropic','openai']\n    },\n    modelOrder: { docs: [], reasoning: [], codegen: [] },\n    providers: {},\n    pricing: {}\n  }\n};\n\nasync function ensureSettingsSchema() {\n  try {\n    await query(`alter table nofx.settings add column if not exists llm jsonb not null default '{}'::jsonb`);\n  } catch {}\n}\n\nexport async function getSettings(): Promise<Settings> {\n  try {\n    await ensureSettingsSchema();\n    const r = await query<{ approvals: any; gates: any; llm: any }>(`select approvals, gates, llm from nofx.settings where id='default' limit 1`);\n    if (!r.rows[0]) return DEFAULTS;\n    const approvals = { ...DEFAULTS.approvals, ...(r.rows[0].approvals || {}) };\n    const gates = { ...DEFAULTS.gates, ...(r.rows[0].gates || {}) };\n    const llm: LlmSettings = {\n      order: {\n        codegen: (r.rows[0].llm?.order?.codegen || DEFAULTS.llm.order.codegen),\n        reasoning: (r.rows[0].llm?.order?.reasoning || DEFAULTS.llm.order.reasoning),\n        docs: (r.rows[0].llm?.order?.docs || DEFAULTS.llm.order.docs)\n      },\n      modelOrder: {\n        docs: r.rows[0].llm?.modelOrder?.docs || [],\n        reasoning: r.rows[0].llm?.modelOrder?.reasoning || [],\n        codegen: r.rows[0].llm?.modelOrder?.codegen || []\n      },\n      providers: r.rows[0].llm?.providers || {},\n      pricing: r.rows[0].llm?.pricing || {}\n    };\n    return { approvals, gates, llm };\n  } catch {\n    return DEFAULTS; // schema may not be migrated yet; fail-safe defaults\n  }\n}\n\nexport async function updateSettings(patch: Partial<Settings>): Promise<Settings> {\n  const current = await getSettings();\n  const next: Settings = {\n    approvals: { ...current.approvals, ...(patch.approvals || {}) },\n    gates: { ...current.gates, ...(patch.gates || {}) },\n    llm: {\n      order: {\n        codegen: (patch as any).llm?.order?.codegen || current.llm.order.codegen,\n        reasoning: (patch as any).llm?.order?.reasoning || current.llm.order.reasoning,\n        docs: (patch as any).llm?.order?.docs || current.llm.order.docs,\n      },\n      modelOrder: {\n        docs: (patch as any).llm?.modelOrder?.docs || current.llm.modelOrder?.docs || [],\n        reasoning: (patch as any).llm?.modelOrder?.reasoning || current.llm.modelOrder?.reasoning || [],\n        codegen: (patch as any).llm?.modelOrder?.codegen || current.llm.modelOrder?.codegen || []\n      },\n      providers: (patch as any).llm?.providers || current.llm.providers || {},\n      pricing: normalizePricing((patch as any).llm?.pricing || current.llm.pricing || {})\n    }\n  };\n  try {\n    await ensureSettingsSchema();\n    await query(\n      `insert into nofx.settings (id, approvals, gates, llm)\n       values ('default', $1, $2, $3)\n       on conflict(id) do update set approvals=excluded.approvals, gates=excluded.gates, llm=excluded.llm, updated_at=now()`,\n      [next.approvals, next.gates, next.llm]\n    );\n  } catch (e) {\n    // fallback for older schema without llm\n    await query(\n      `insert into nofx.settings (id, approvals, gates)\n       values ('default', $1, $2)\n       on conflict(id) do update set approvals=excluded.approvals, gates=excluded.gates, updated_at=now()`,\n      [next.approvals, next.gates]\n    );\n  }\n  return next;\n}\n\nfunction normalizePricing(input: any): LlmSettings['pricing'] {\n  const out: LlmSettings['pricing'] = {};\n  const keys = input ? Object.keys(input) : [];\n  for (const provider of keys) {\n    const p = input?.[provider] || {};\n    let inPer1M = p.inputPer1M;\n    let outPer1M = p.outputPer1M;\n    // Backward-compat: convert per 1K to per 1M if present\n    if ((inPer1M == null) && p.inputPer1K != null) inPer1M = Number(p.inputPer1K) * 1000;\n    if ((outPer1M == null) && p.outputPer1K != null) outPer1M = Number(p.outputPer1K) * 1000;\n    if (inPer1M != null || outPer1M != null) {\n      (out as any)[provider] = { inputPer1M: inPer1M, outputPer1M: outPer1M };\n    }\n  }\n  return out;\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Volumes/Development/nofx-local-starter/src/lib/store.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":7,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[227,230],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[227,230],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":8,"column":83,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":86,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[355,358],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[355,358],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":8,"column":98,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":101,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[370,373],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[370,373],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":9,"column":88,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":91,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[540,543],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[540,543],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":11,"column":90,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":93,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[775,778],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[775,778],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":19,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1143,1146],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1143,1146],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":49,"column":81,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":49,"endColumn":84,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2834,2837],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2834,2837],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":89,"column":68,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":89,"endColumn":71,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4902,4905],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4902,4905],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":114,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":114,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6385,6388],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6385,6388],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":130,"column":84,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":130,"endColumn":87,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7399,7402],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7399,7402],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":151,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":151,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8486,8489],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8486,8489],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":152,"column":131,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":152,"endColumn":134,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8645,8648],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8645,8648],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":158,"column":124,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":158,"endColumn":127,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9032,9035],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9032,9035],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":158,"column":147,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":158,"endColumn":150,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9055,9058],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9055,9058],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":161,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":161,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9176,9179],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9176,9179],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":164,"column":70,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":164,"endColumn":73,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9377,9380],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9377,9380],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":165,"column":189,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":165,"endColumn":192,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9594,9597],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9594,9597],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":171,"column":191,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":171,"endColumn":194,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10076,10079],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10076,10079],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":171,"column":214,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":171,"endColumn":217,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10099,10102],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10099,10102],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":171,"column":241,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":171,"endColumn":244,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10126,10129],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10126,10129],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":171,"column":266,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":171,"endColumn":269,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10151,10154],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10151,10154],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":180,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":180,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10754,10757],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10754,10757],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":188,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":188,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11293,11296],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11293,11296],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":191,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":191,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11599,11602],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11599,11602],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":194,"column":80,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":194,"endColumn":83,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11944,11947],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11944,11947],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":200,"column":73,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":200,"endColumn":76,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12286,12289],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12286,12289],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":204,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":204,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12586,12589],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12586,12589],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":27,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import fs from 'node:fs';\nimport fsp from 'node:fs/promises';\nimport path from 'node:path';\nimport { randomUUID } from 'node:crypto';\nimport { query as pgQuery } from './db';\n\ntype RunRow = { id: string; status: string; plan?: any; created_at: string; ended_at?: string };\ntype StepRow = { id: string; run_id: string; name: string; tool: string; inputs?: any; outputs?: any; status: string; created_at: string; started_at?: string; ended_at?: string };\ntype EventRow = { id: string; run_id: string; step_id?: string; type: string; payload: any; created_at: string };\ntype GateRow = { id: string; run_id: string; step_id: string; gate_type: string; status: string; created_at: string };\ntype ArtifactRow = { id: string; step_id: string; type: string; path: string; metadata?: any; created_at: string };\n\nconst DATA_DRIVER = (process.env.DATA_DRIVER || (process.env.QUEUE_DRIVER === 'memory' ? 'fs' : 'db')).toLowerCase();\nconst ROOT = path.join(process.cwd(), 'local_data');\n\nfunction ensureDirSync(p: string) { if (!fs.existsSync(p)) fs.mkdirSync(p, { recursive: true }); }\n\n// ---------- FS DRIVER ----------\nasync function fsCreateRun(plan: any): Promise<RunRow> {\n  ensureDirSync(ROOT);\n  const id = randomUUID();\n  const created_at = new Date().toISOString();\n  const run: RunRow = { id, status: 'queued', plan, created_at };\n  const dir = path.join(ROOT, 'runs', id);\n  ensureDirSync(dir);\n  await fsp.writeFile(path.join(dir, 'run.json'), JSON.stringify(run, null, 2));\n  // index\n  const idxDir = path.join(ROOT, 'runs'); ensureDirSync(idxDir);\n  await fsp.writeFile(path.join(idxDir, 'index.json'), JSON.stringify(await fsListRuns(100), null, 2)).catch(()=>{});\n  return run;\n}\nasync function fsGetRun(id: string): Promise<RunRow | undefined> {\n  try { const s = await fsp.readFile(path.join(ROOT, 'runs', id, 'run.json'), 'utf8'); return JSON.parse(s); } catch { return undefined; }\n}\nasync function fsUpdateRun(id: string, patch: Partial<RunRow>): Promise<void> {\n  const run = await fsGetRun(id); if (!run) return;\n  Object.assign(run, patch); await fsp.writeFile(path.join(ROOT, 'runs', id, 'run.json'), JSON.stringify(run, null, 2));\n}\nasync function fsListRuns(limit = 100): Promise<Array<Pick<RunRow,'id'|'status'|'created_at'>>> {\n  const dir = path.join(ROOT, 'runs'); ensureDirSync(dir);\n  const ids = (await fsp.readdir(dir)).filter(d => d !== 'index.json');\n  const rows: Array<Pick<RunRow,'id'|'status'|'created_at'>> = [];\n  for (const id of ids) {\n    try { const s = await fsp.readFile(path.join(dir, id, 'run.json'), 'utf8'); const r = JSON.parse(s); rows.push({ id: r.id, status: r.status, created_at: r.created_at }); } catch {}\n  }\n  rows.sort((a,b)=> (a.created_at < b.created_at ? 1 : -1));\n  return rows.slice(0, limit);\n}\nasync function fsCreateStep(runId: string, name: string, tool: string, inputs?: any): Promise<StepRow> {\n  const id = randomUUID();\n  const created_at = new Date().toISOString();\n  const step: StepRow = { id, run_id: runId, name, tool, inputs: inputs || {}, status: 'queued', created_at };\n  const dir = path.join(ROOT, 'runs', runId, 'steps'); ensureDirSync(dir);\n  await fsp.writeFile(path.join(dir, `${id}.json`), JSON.stringify(step, null, 2));\n  return step;\n}\nasync function fsGetStep(id: string): Promise<StepRow | undefined> {\n  // Search all runs' steps; optimize by tracking index later\n  const runsDir = path.join(ROOT, 'runs'); ensureDirSync(runsDir);\n  for (const runId of await fsp.readdir(runsDir)) {\n    if (runId === 'index.json') continue;\n    const p = path.join(runsDir, runId, 'steps', `${id}.json`);\n    try { const s = await fsp.readFile(p, 'utf8'); return JSON.parse(s); } catch {}\n  }\n  return undefined;\n}\nasync function fsUpdateStep(id: string, patch: Partial<StepRow>): Promise<void> {\n  const runsDir = path.join(ROOT, 'runs'); ensureDirSync(runsDir);\n  for (const runId of await fsp.readdir(runsDir)) {\n    if (runId === 'index.json') continue;\n    const p = path.join(runsDir, runId, 'steps', `${id}.json`);\n    try { const s = await fsp.readFile(p, 'utf8'); const step = JSON.parse(s); Object.assign(step, patch); await fsp.writeFile(p, JSON.stringify(step, null, 2)); return; } catch {}\n  }\n}\nasync function fsListStepsByRun(runId: string): Promise<StepRow[]> {\n  const dir = path.join(ROOT, 'runs', runId, 'steps'); ensureDirSync(dir);\n  const files = await fsp.readdir(dir).catch(()=>[] as string[]);\n  const rows: StepRow[] = [];\n  for (const f of files) {\n    try { const s = await fsp.readFile(path.join(dir, f), 'utf8'); rows.push(JSON.parse(s)); } catch {}\n  }\n  rows.sort((a,b)=> (a.created_at < b.created_at ? -1 : 1));\n  return rows;\n}\nasync function fsCountRemainingSteps(runId: string): Promise<number> {\n  const steps = await fsListStepsByRun(runId);\n  return steps.filter(s => !['succeeded','cancelled'].includes(s.status)).length;\n}\nasync function fsRecordEvent(runId: string, type: string, payload: any = {}, stepId?: string): Promise<void> {\n  const dir = path.join(ROOT, 'runs', runId); ensureDirSync(dir);\n  const file = path.join(dir, 'events.json');\n  const rows: EventRow[] = JSON.parse(await fsp.readFile(file, 'utf8').catch(()=> '[]'));\n  rows.push({ id: randomUUID(), run_id: runId, step_id: stepId, type, payload, created_at: new Date().toISOString() });\n  await fsp.writeFile(file, JSON.stringify(rows, null, 2));\n}\nasync function fsListEvents(runId: string): Promise<EventRow[]> {\n  const file = path.join(ROOT, 'runs', runId, 'events.json');\n  const rows: EventRow[] = JSON.parse(await fsp.readFile(file, 'utf8').catch(()=> '[]'));\n  rows.sort((a,b)=> (a.created_at < b.created_at ? -1 : 1));\n  return rows;\n}\nasync function fsCreateOrGetGate(runId: string, stepId: string, gate_type: string): Promise<GateRow> {\n  const file = path.join(ROOT, 'runs', runId, 'gates.json');\n  const rows: GateRow[] = JSON.parse(await fsp.readFile(file, 'utf8').catch(()=> '[]'));\n  let g = rows.filter(r => r.step_id === stepId && r.gate_type === gate_type).sort((a,b)=> (a.created_at < b.created_at ? 1 : -1))[0];\n  if (!g) {\n    g = { id: randomUUID(), run_id: runId, step_id: stepId, gate_type, status: 'pending', created_at: new Date().toISOString() };\n    rows.push(g);\n    await fsp.writeFile(file, JSON.stringify(rows, null, 2));\n  }\n  return g;\n}\nasync function fsUpdateGate(id: string, patch: Partial<GateRow>): Promise<void> {\n  const file = path.join(ROOT, 'runs', (patch as any).run_id || '', 'gates.json');\n  const rows: GateRow[] = JSON.parse(await fsp.readFile(file, 'utf8').catch(()=> '[]'));\n  const i = rows.findIndex(r => r.id === id);\n  if (i >= 0) { rows[i] = { ...rows[i], ...patch }; await fsp.writeFile(file, JSON.stringify(rows, null, 2)); }\n}\nasync function fsGetLatestGate(runId: string, stepId: string): Promise<GateRow | undefined> {\n  const file = path.join(ROOT, 'runs', runId, 'gates.json');\n  const rows: GateRow[] = JSON.parse(await fsp.readFile(file, 'utf8').catch(()=> '[]'));\n  return rows.filter(r => r.step_id === stepId).sort((a,b)=> (a.created_at < b.created_at ? 1 : -1))[0];\n}\nasync function fsListGatesByRun(runId: string): Promise<GateRow[]> {\n  const file = path.join(ROOT, 'runs', runId, 'gates.json');\n  const rows: GateRow[] = JSON.parse(await fsp.readFile(file, 'utf8').catch(()=> '[]'));\n  rows.sort((a,b)=> (a.created_at < b.created_at ? -1 : 1));\n  return rows;\n}\nasync function fsAddArtifact(stepId: string, type: string, pth: string, metadata?: any): Promise<ArtifactRow> {\n  const step = await fsGetStep(stepId); if (!step) throw new Error('step not found');\n  const file = path.join(ROOT, 'runs', step.run_id, 'artifacts.json');\n  const rows: ArtifactRow[] = JSON.parse(await fsp.readFile(file, 'utf8').catch(()=> '[]'));\n  const row: ArtifactRow = { id: randomUUID(), step_id: stepId, type, path: pth, metadata: metadata || {}, created_at: new Date().toISOString() };\n  rows.push(row);\n  await fsp.writeFile(file, JSON.stringify(rows, null, 2));\n  return row;\n}\nasync function fsListArtifactsByRun(runId: string): Promise<Array<ArtifactRow & { step_name?: string }>> {\n  const file = path.join(ROOT, 'runs', runId, 'artifacts.json');\n  const rows: ArtifactRow[] = JSON.parse(await fsp.readFile(file, 'utf8').catch(()=> '[]'));\n  const steps = await fsListStepsByRun(runId);\n  const names = new Map(steps.map(s => [s.id, s.name] as const));\n  return rows.map(r => ({ ...r, step_name: names.get(r.step_id) }));\n}\n\n// ---------- PUBLIC API ----------\nexport const store = {\n  driver: DATA_DRIVER,\n  // runs\n  createRun: async (plan:any) => DATA_DRIVER === 'db'\n    ? (await pgQuery<{ id:string }>(`insert into nofx.run (plan, status) values ($1, 'queued') returning id`, [plan])).rows[0] as any\n    : fsCreateRun(plan),\n  getRun: async (id:string) => DATA_DRIVER === 'db'\n    ? (await pgQuery<RunRow>(`select * from nofx.run where id = $1`, [id])).rows[0]\n    : fsGetRun(id),\n  updateRun: async (id:string, patch: Partial<RunRow>) => DATA_DRIVER === 'db'\n    ? pgQuery(`update nofx.run set status=coalesce($2,status), ended_at=coalesce($3,ended_at) where id=$1`, [id, (patch as any).status, (patch as any).ended_at])\n    : fsUpdateRun(id, patch),\n  listRuns: async (limit=100) => DATA_DRIVER === 'db'\n    ? (await pgQuery<any>(`select id,status,created_at from nofx.run order by created_at desc limit ${limit}`)).rows\n    : fsListRuns(limit),\n  // steps\n  createStep: async (runId:string, name:string, tool:string, inputs?:any) => DATA_DRIVER === 'db'\n    ? (await pgQuery<{ id:string }>(`insert into nofx.step (run_id, name, tool, inputs, status) values ($1,$2,$3,$4,'queued') returning id`, [runId, name, tool, inputs || {}])).rows[0] as any\n    : fsCreateStep(runId, name, tool, inputs),\n  getStep: async (id:string) => DATA_DRIVER === 'db'\n    ? (await pgQuery<StepRow>(`select * from nofx.step where id = $1`, [id])).rows[0]\n    : fsGetStep(id),\n  updateStep: async (id:string, patch: Partial<StepRow>) => DATA_DRIVER === 'db'\n    ? pgQuery(`update nofx.step set status=coalesce($2,status), started_at=coalesce($3,started_at), ended_at=coalesce($4,ended_at), outputs=coalesce($5,outputs) where id=$1`, [id, (patch as any).status, (patch as any).started_at, (patch as any).ended_at, (patch as any).outputs])\n    : fsUpdateStep(id, patch),\n  listStepsByRun: async (runId:string) => DATA_DRIVER === 'db'\n    ? (await pgQuery<StepRow>(`select * from nofx.step where run_id = $1 order by created_at`, [runId])).rows\n    : fsListStepsByRun(runId),\n  countRemainingSteps: async (runId:string) => DATA_DRIVER === 'db'\n    ? Number((await pgQuery<{ count: string }>(`select count(*)::int as count from nofx.step where run_id=$1 and status not in ('succeeded','cancelled')`, [runId])).rows[0].count)\n    : fsCountRemainingSteps(runId),\n  // events\n  recordEvent: async (runId:string, type:string, payload:any={}, stepId?:string) => DATA_DRIVER === 'db'\n    ? pgQuery(`insert into nofx.event (run_id, type, payload) values ($1, $2, $3)`, [ runId, type, payload ])\n    : fsRecordEvent(runId, type, payload, stepId),\n  listEvents: async (runId:string) => DATA_DRIVER === 'db'\n    ? (await pgQuery<EventRow>(`select * from nofx.event where run_id = $1 order by created_at asc`, [runId])).rows\n    : fsListEvents(runId),\n  // gates\n  createOrGetGate: async (runId:string, stepId:string, gateType:string) => DATA_DRIVER === 'db'\n    ? (await pgQuery<any>(`insert into nofx.gate (run_id, step_id, gate_type, status) values ($1,$2,$3,'pending') on conflict do nothing returning *`, [runId, stepId, gateType]))\n    : fsCreateOrGetGate(runId, stepId, gateType),\n  getLatestGate: async (runId:string, stepId:string) => DATA_DRIVER === 'db'\n    ? (await pgQuery<any>(`select * from nofx.gate where run_id=$1 and step_id=$2 order by created_at desc limit 1`, [runId, stepId])).rows[0]\n    : fsGetLatestGate(runId, stepId),\n  updateGate: async (gateId:string, patch: Partial<GateRow> & { run_id: string }) => DATA_DRIVER === 'db'\n    ? pgQuery(`update nofx.gate set status=$2 where id=$1`, [gateId, (patch as any).status])\n    : fsUpdateGate(gateId, patch),\n  listGatesByRun: async (runId:string) => DATA_DRIVER === 'db'\n    ? (await pgQuery<GateRow>(`select * from nofx.gate where run_id=$1 order by created_at asc`, [runId])).rows\n    : fsListGatesByRun(runId),\n  // artifacts\n  addArtifact: async (stepId:string, type:string, pth:string, metadata?:any) => DATA_DRIVER === 'db'\n    ? pgQuery(`insert into nofx.artifact (step_id, type, path, metadata) values ($1,$2,$3,$4)`, [stepId, type, pth, metadata || {}])\n    : fsAddArtifact(stepId, type, pth, metadata),\n  listArtifactsByRun: async (runId:string) => DATA_DRIVER === 'db'\n    ? (await pgQuery<any>(`select a.*, s.name as step_name from nofx.artifact a join nofx.step s on s.id = a.step_id where s.run_id = $1`, [runId])).rows\n    : fsListArtifactsByRun(runId),\n};\n\nexport type { RunRow, StepRow };\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Volumes/Development/nofx-local-starter/src/lib/supabase.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":17,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[652,655],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[652,655],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createClient } from \"@supabase/supabase-js\";\nimport dotenv from \"dotenv\";\ndotenv.config();\n\nconst URL = process.env.SUPABASE_URL;\nconst KEY = process.env.SUPABASE_SERVICE_ROLE_KEY;\n\nexport const supabase = (URL && KEY)\n  ? createClient(URL, KEY, { auth: { persistSession: false, autoRefreshToken: false, detectSessionInUrl: false } })\n  : ({\n      storage: {\n        from() { return { createSignedUrl: async () => ({ data: null, error: new Error('supabase disabled') }) };\n        },\n        // optional helper present in some versions\n        createBucket: async () => ({ data: null, error: new Error('supabase disabled') })\n      }\n    } as any);\n\nexport const ARTIFACT_BUCKET = process.env.SUPABASE_BUCKET || \"artifacts\";\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Volumes/Development/nofx-local-starter/src/models/providers/anthropic.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":6,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[410,413],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[410,413],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":7,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[452,455],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[452,455],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":8,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[492,495],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[492,495],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":9,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[543,546],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[543,546],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":10,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[595,598],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[595,598],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":10,"column":68,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":71,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[636,639],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[636,639],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import Anthropic from '@anthropic-ai/sdk';\nexport async function claudeChat(prompt: string, model=process.env.ANTHROPIC_MODEL || 'claude-3-5-sonnet-latest'){\n  const client = new Anthropic({ apiKey: process.env.ANTHROPIC_API_KEY! });\n  const started = Date.now();\n  const rsp = await client.messages.create({ model, max_tokens:800, messages:[{role:'user', content: prompt}]});\n  const txt = (rsp.content[0] as any)?.text || '';\n  const usage = (rsp as any).usage ? {\n    inputTokens: (rsp as any).usage.input_tokens,\n    outputTokens: (rsp as any).usage.output_tokens,\n    totalTokens: ((rsp as any).usage.input_tokens || 0) + ((rsp as any).usage.output_tokens || 0),\n    latencyMs: Date.now() - started\n  } : undefined;\n  return { text: txt.trim(), provider: 'anthropic', model, usage };\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Volumes/Development/nofx-local-starter/src/models/providers/gemini.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":8,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[426,429],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[426,429],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":8,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[449,452],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[449,452],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { GoogleGenerativeAI } from '@google/generative-ai';\nexport async function geminiChat(prompt: string, model=process.env.GEMINI_MODEL || 'gemini-2.5-pro'){\n  const genai = new GoogleGenerativeAI(process.env.GEMINI_API_KEY!);\n  const modelRef = genai.getGenerativeModel({ model });\n  const started = Date.now();\n  const rsp = await modelRef.generateContent(prompt);\n  const text = rsp.response.text().trim();\n  const um: any = (rsp.response as any).usageMetadata || {};\n  const usage = (um.promptTokenCount || um.candidatesTokenCount) ? {\n    inputTokens: um.promptTokenCount,\n    outputTokens: um.candidatesTokenCount,\n    totalTokens: (um.totalTokenCount) || (um.promptTokenCount || 0) + (um.candidatesTokenCount || 0),\n    latencyMs: Date.now() - started\n  } : undefined;\n  return { text, provider: 'gemini', model, usage };\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Volumes/Development/nofx-local-starter/src/models/providers/http.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Volumes/Development/nofx-local-starter/src/models/providers/openai.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":20,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[708,711],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[708,711],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":21,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":21,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[741,744],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[741,744],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":24,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[817,820],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[817,820],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":24,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[831,834],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[831,834],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import OpenAI from 'openai';\nexport async function openaiChat(\n  prompt: string,\n  model = process.env.OPENAI_MODEL || 'gpt-4o-mini',\n  opts?: { baseURL?: string; apiKeyEnv?: string }\n) {\n  const apiKey = opts?.apiKeyEnv ? (process.env[opts.apiKeyEnv] as string | undefined) : process.env.OPENAI_API_KEY!;\n  const client = new OpenAI({ apiKey: apiKey!, baseURL: opts?.baseURL });\n  const started = Date.now();\n\n  // Use Responses API for new models that don't support max_tokens on chat.completions\n  const rsp = await client.responses.create({\n    model,\n    input: prompt,\n    temperature: 0.2,\n    max_output_tokens: 800\n  });\n\n  // Extract text and usage in a version-tolerant way\n  const text = (rsp as any).output_text\n    || ((rsp as any).choices?.[0]?.message?.content?.trim?.() ?? '')\n    || '';\n\n  const u: any = (rsp as any).usage || {};\n  const usage = u\n    ? {\n        inputTokens: u.input_tokens ?? u.prompt_tokens,\n        outputTokens: u.output_tokens ?? u.completion_tokens,\n        totalTokens: u.total_tokens,\n        latencyMs: Date.now() - started\n      }\n    : undefined;\n\n  return { text, provider: 'openai', model, usage };\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Volumes/Development/nofx-local-starter/src/models/router.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":13,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[547,550],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[547,550],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":19,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[741,744],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[741,744],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":22,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":22,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[914,917],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[914,917],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":30,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1299,1302],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1299,1302],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":32,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":32,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1338,1341],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1338,1341],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":37,"column":110,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":37,"endColumn":113,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1620,1623],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1620,1623],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":38,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":38,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1667,1670],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1667,1670],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":42,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":42,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1853,1856],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1853,1856],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":48,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":48,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2115,2118],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2115,2118],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":67,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":67,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3156,3159],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3156,3159],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":71,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":71,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3322,3325],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3322,3325],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":74,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":74,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3456,3459],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3456,3459],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":83,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":83,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3714,3717],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3714,3717],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":88,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":88,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3884,3887],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3884,3887],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { openaiChat } from './providers/openai';\nimport { claudeChat } from './providers/anthropic';\nimport { geminiChat } from './providers/gemini';\nimport { getSettings } from '../lib/settings';\nimport { httpChat } from './providers/http';\nimport { getModelByName } from '../lib/models';\n\nexport type TaskKind = 'codegen'|'reasoning'|'docs';\n\nexport async function routeLLM(kind: TaskKind, prompt: string){\n  const { llm } = await getSettings();\n  const modelOrder = llm?.modelOrder?.[kind as 'docs'|'reasoning'|'codegen'] || [];\n  let lastErr: any;\n  if (modelOrder.length) {\n    for (const name of modelOrder) {\n      try {\n        const m = await getModelByName(name);\n        if (!m || m.active === false) continue;\n        const out: any = await callModelWithRetry(m, prompt);\n        if (typeof out === 'string') return out;\n        return { ...out, provider: m.provider, model: m.name };\n      } catch (e:any) { lastErr = e; }\n    }\n    throw lastErr || new Error('no model succeeded');\n  }\n  const order = await pickOrder(kind);\n  for (const p of order) {\n    try {\n      const model = (p==='openai' ? process.env.OPENAI_MODEL : p==='anthropic' ? process.env.ANTHROPIC_MODEL : p==='gemini' ? process.env.GEMINI_MODEL : undefined);\n      const out = await callWithRetry(p, prompt, model as any);\n      return out;\n    } catch (e:any) { lastErr = e; }\n  }\n  throw lastErr || new Error('no provider succeeded');\n}\nasync function pickOrder(kind: TaskKind): Promise<Array<'openai'|'anthropic'|'gemini'>> {\n  const envPref = (process.env.LLM_ORDER || '').split(',').map(x=>x.trim().toLowerCase()).filter(Boolean) as any[];\n  if (envPref.length) return envPref as any;\n  try {\n    const { llm } = await getSettings();\n    const order = llm?.order?.[kind as 'docs'|'reasoning'|'codegen'];\n    if (Array.isArray(order) && order.length) return order as any;\n  } catch {}\n  if (kind === 'codegen') return ['openai','anthropic','gemini'];\n  if (kind === 'reasoning') return ['anthropic','openai','gemini'];\n  return ['gemini','anthropic','openai'];\n}\nfunction call(p: string, prompt: string, model?: string, custom?: any){\n  if (p==='openai') return openaiChat(prompt, model);\n  if (p==='anthropic') return claudeChat(prompt, model);\n  if (p==='gemini') return geminiChat(prompt, model);\n  if (custom && custom.kind === 'openai-compatible') {\n    const baseURL = custom.baseUrl || process.env[`LLM_${p.toUpperCase()}_BASE_URL`];\n    const apiKeyEnv = process.env[`LLM_${p.toUpperCase()}_API_KEY`] ? `LLM_${p.toUpperCase()}_API_KEY` : undefined;\n    return openaiChat(prompt, model, { baseURL, apiKeyEnv });\n  }\n  if (custom && custom.kind === 'http') {\n    const endpoint = custom.baseUrl || process.env[`LLM_${p.toUpperCase()}_BASE_URL`];\n    if (!endpoint) throw new Error('http provider missing baseUrl');\n    const apiKeyEnv = process.env[`LLM_${p.toUpperCase()}_API_KEY`] ? `LLM_${p.toUpperCase()}_API_KEY` : undefined;\n    return httpChat(prompt, endpoint, apiKeyEnv, model);\n  }\n  throw new Error('unknown provider ' + p);\n}\n\nasync function callWithRetry(p: string, prompt: string, model: string|undefined, retries=2, timeoutMs=15000){\n  let lastErr: any;\n  for (let attempt=0; attempt<=retries; attempt++){\n    try {\n      const { llm } = await getSettings();\n      const custom = llm?.providers ? (llm.providers as any)[p] : undefined;\n      const res = await withTimeout(call(p, prompt, model, custom), timeoutMs);\n      return res;\n    } catch (e:any) {\n      lastErr = e;\n      await delay((attempt+1)*250);\n    }\n  }\n  throw lastErr;\n}\n\nasync function callModelWithRetry(m: { kind: string; base_url?: string; provider: string; name: string }, prompt: string, retries=2, timeoutMs=15000){\n  let lastErr: any;\n  for (let attempt=0; attempt<=retries; attempt++){\n    try {\n      const res = await withTimeout(callModel(m, prompt), timeoutMs);\n      return res;\n    } catch (e:any) {\n      lastErr = e;\n      await delay((attempt+1)*250);\n    }\n  }\n  throw lastErr;\n}\n\nfunction callModel(m: { kind: string; base_url?: string; provider: string; name: string }, prompt: string){\n  const kind = (m.kind || '').toLowerCase();\n  if (kind === 'openai') return openaiChat(prompt, m.name);\n  if (kind === 'anthropic') return claudeChat(prompt, m.name);\n  if (kind === 'gemini') return geminiChat(prompt, m.name);\n  if (kind === 'openai-compatible') {\n    const apiKeyEnv = `LLM_${m.provider.toUpperCase()}_API_KEY`;\n    return openaiChat(prompt, m.name, { baseURL: m.base_url, apiKeyEnv });\n  }\n  if (kind === 'http') {\n    const apiKeyEnv = `LLM_${m.provider.toUpperCase()}_API_KEY`;\n    if (!m.base_url) throw new Error('http model missing base_url');\n    return httpChat(prompt, m.base_url, apiKeyEnv, m.name);\n  }\n  throw new Error('unknown model kind ' + kind);\n}\n\nfunction withTimeout<T>(p: Promise<T>, ms: number): Promise<T> {\n  return new Promise((resolve, reject) => {\n    const t = setTimeout(() => reject(new Error('llm timeout')), ms);\n    p.then(v => { clearTimeout(t); resolve(v); }, err => { clearTimeout(t); reject(err); });\n  });\n}\n\nfunction delay(ms:number){ return new Promise(r=>setTimeout(r, ms)); }\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Volumes/Development/nofx-local-starter/src/policy/dbWritePolicy.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":4,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":4,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[164,167],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[164,167],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { query } from \"../lib/db\";\nexport type DbOp = 'insert'|'update'|'delete';\nexport async function isAllowed(table: string, op: DbOp){\n  const r = await query<any>(`select allowed_ops, constraints from nofx.db_write_rule where tenant_id='local' and table_name=$1`, [table]);\n  if (!r.rows[0]) return { ok:false, reason:'no rule' };\n  const ops: string[] = r.rows[0].allowed_ops || [];\n  if (!ops.includes(op)) return { ok:false, reason:'op not allowed' };\n  return { ok:true, constraints: r.rows[0].constraints || {} };\n}","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Volumes/Development/nofx-local-starter/src/shared/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Volumes/Development/nofx-local-starter/src/simple.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Volumes/Development/nofx-local-starter/src/tools/codegen.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":3,"column":91,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":3,"endColumn":94,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[172,175],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[172,175],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":14,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[892,895],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[892,895],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { routeLLM } from \"../models/router\";\nimport { log } from \"../lib/logger\";\nexport type CodegenResult = { content: string; provider?: string; model?: string; usage?: any };\n\nexport async function codegenReadme(inputs: { topic?: string; bullets?: string[] } = {}): Promise<CodegenResult> {\n  const topic = inputs.topic || \"NOFX\";\n  const bullets = inputs.bullets || [\"Control plane\", \"Verification\", \"Workers\"];\n  const hasKeys = !!(process.env.OPENAI_API_KEY || process.env.ANTHROPIC_API_KEY || process.env.GEMINI_API_KEY);\n  if (!hasKeys) {\n    log.warn(\"No provider keys set; returning stub content\");\n    return { content: `# ${topic}\\n\\n- ${bullets.join(\"\\n- \")}\\n\\n_Generated locally without LLM._\\n`, provider: 'stub', model: 'stub' };\n  }\n  const prompt = `Write a concise README section titled \"${topic}\" with bullet points: ${bullets.join(\", \")}. Keep it tight.`;\n  const res: any = await routeLLM('docs', prompt);\n  if (typeof res === 'string') return { content: res };\n  return { content: res.text, provider: res.provider, model: res.model, usage: res.usage };\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Volumes/Development/nofx-local-starter/src/worker/handlers/codegen.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":16,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[694,697],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[694,697],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":34,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":34,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1447,1450],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1447,1450],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { StepHandler } from \"./types\";\nimport { store } from \"../../lib/store\";\nimport { recordEvent } from \"../../lib/events\";\nimport { saveArtifact } from \"../../lib/artifacts\";\nimport { codegenReadme } from \"../../tools/codegen\";\nimport { getSettings } from \"../../lib/settings\";\nimport { getModelByName } from \"../../lib/models\";\n\nconst handler: StepHandler = {\n  match: (tool) => tool === 'codegen',\n  async run({ runId, step }) {\n    const stepId = step.id;\n    await store.updateStep(stepId, { status: 'running', started_at: new Date().toISOString() });\n    await recordEvent(runId, \"step.started\", { name: step.name, tool: step.tool }, stepId);\n\n    const inputs = step.inputs || {} as any;\n    const filename = typeof inputs.filename === 'string' && inputs.filename.trim().length > 0 ? String(inputs.filename).trim() : 'README.md';\n    const result = await codegenReadme(inputs || {});\n    let costUSD: number | undefined;\n    if (result.usage) {\n      const { llm } = await getSettings();\n      const pricing = llm?.pricing || {};\n      const p = (result.provider || '').toLowerCase();\n      // Prefer model-specific pricing if defined\n      let inP = 0, outP = 0;\n      if (result.model) {\n        const mr = await getModelByName(result.model);\n        if (mr) {\n          inP = Number(mr.input_per_1m) || 0;\n          outP = Number(mr.output_per_1m) || 0;\n        }\n      }\n      if (!inP && !outP) {\n        const price = (pricing as any)[p] || {};\n        inP = Number(price.inputPer1M) || 0;\n        outP = Number(price.outputPer1M) || 0;\n      }\n      const inputTokens = result.usage.inputTokens || 0;\n      const outputTokens = result.usage.outputTokens || 0;\n      costUSD = (inputTokens/1000000)*inP + (outputTokens/1000000)*outP;\n      await recordEvent(runId, 'llm.usage', { provider: result.provider, model: result.model, usage: result.usage, costUSD }, stepId);\n    }\n    if (result.usage) {\n      await recordEvent(runId, 'llm.usage', { provider: result.provider, model: result.model, usage: result.usage }, stepId);\n    }\n    const artifactName = filename;\n    const pth = await saveArtifact(runId, stepId, artifactName, result.content, 'text/markdown');\n    await store.updateStep(stepId, { status: 'succeeded', ended_at: new Date().toISOString(), outputs: { artifact: pth, provider: result.provider, model: result.model, usage: result.usage } });\n    await recordEvent(runId, \"step.finished\", { artifact: pth, provider: result.provider, model: result.model, costUSD }, stepId);\n  }\n};\nexport default handler;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Volumes/Development/nofx-local-starter/src/worker/handlers/db_write.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":11,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[370,373],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[370,373],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":13,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[457,460],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[457,460],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":42,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":42,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1636,1639],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1636,1639],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":74,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":74,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3619,3622],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3619,3622],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":75,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":75,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3647,3650],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3647,3650],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":104,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":104,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5207,5210],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5207,5210],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":105,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":105,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5257,5260],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5257,5260],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":105,"column":68,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":105,"endColumn":71,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5293,5296],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5293,5296],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { StepHandler } from \"./types\";\nimport { query } from \"../../lib/db\";\nimport { recordEvent } from \"../../lib/events\";\nimport { isAllowed, DbOp } from \"../../policy/dbWritePolicy\";\nimport { getSettings } from \"../../lib/settings\";\nimport { enqueue, STEP_READY_TOPIC } from \"../../lib/queue\";\n\ntype Inputs = {\n  table: string;\n  op: DbOp;\n  values?: Record<string, any>;\n  where?: string;          // SQL where clause with $1,$2 params\n  whereParams?: any[];     // parameter values for where\n};\n\nfunction isSafeIdent(v: string){\n  return /^[a-zA-Z0-9_.]+$/.test(v);\n}\nfunction isSafeColumn(v: string){\n  return /^[a-zA-Z0-9_]+$/.test(v);\n}\n\nconst handler: StepHandler = {\n  match: (tool) => tool === 'db_write',\n  async run({ runId, step }) {\n    const stepId = step.id;\n    await query(`update nofx.step set status='running', started_at=now() where id=$1`, [stepId])\n      .catch(async ()=>{ await query(`update nofx.step set status='running' where id=$1`, [stepId]); });\n    await recordEvent(runId, 'step.started', { name: step.name, tool: step.tool }, stepId);\n\n    const inputs: Inputs = step.inputs || {};\n    if (!inputs.table || !inputs.op) throw new Error('db_write requires table and op');\n    if (!isSafeIdent(inputs.table)) throw new Error('unsafe table name');\n\n    // Check approval policy for db writes\n    const { approvals } = await getSettings();\n    let needsApproval = false;\n    if (approvals.dbWrites === 'all') needsApproval = true;\n    if (approvals.dbWrites === 'dangerous' && (inputs.op === 'update' || inputs.op === 'delete')) needsApproval = true;\n\n    if (needsApproval) {\n      const g = await query<any>(`select * from nofx.gate where run_id=$1 and step_id=$2 and gate_type='manual:db' order by created_at desc limit 1`, [runId, stepId]);\n      if (!g.rows[0]) {\n        await query(`insert into nofx.gate (run_id, step_id, gate_type, status) values ($1,$2,'manual:db','pending')`, [runId, stepId]);\n        await recordEvent(runId, 'gate.created', { stepId, tool: 'manual:db' }, stepId);\n        await enqueue(STEP_READY_TOPIC, { runId, stepId }, { delay: 5000 });\n        await recordEvent(runId, 'gate.waiting', { stepId, delayMs: 5000 }, stepId);\n        return;\n      }\n      const gate = g.rows[0];\n      if (gate.status === 'pending') {\n        await enqueue(STEP_READY_TOPIC, { runId, stepId }, { delay: 5000 });\n        await recordEvent(runId, 'gate.waiting', { stepId, delayMs: 5000 }, stepId);\n        return;\n      }\n      if (gate.status === 'failed') {\n        await query(`update nofx.step set status='failed', ended_at=now(), error=$2 where id=$1`, [stepId, 'db write not approved'])\n          .catch(async ()=>{ await query(`update nofx.step set status='failed', completed_at=now(), error=$2 where id=$1`, [stepId, 'db write not approved']); });\n        await recordEvent(runId, 'step.failed', { stepId, tool: step.tool, manual: true, gateId: gate.id }, stepId);\n        throw new Error('db write not approved');\n      }\n      // passed or waived -> continue\n    }\n\n    const allowed = await isAllowed(inputs.table, inputs.op);\n    if (!allowed.ok) {\n      await query(`update nofx.step set status='failed', ended_at=now(), error=$2 where id=$1`, [stepId, `policy: ${allowed.reason}`])\n        .catch(async ()=>{ await query(`update nofx.step set status='failed', completed_at=now(), error=$2 where id=$1`, [stepId, `policy: ${allowed.reason}`]); });\n      await recordEvent(runId, 'db.write.denied', { table: inputs.table, op: inputs.op, reason: allowed.reason }, stepId);\n      throw new Error('db_write not allowed');\n    }\n\n    let sql = '';\n    const params: any[] = [];\n    let result: any = {};\n    if (inputs.op === 'insert') {\n      const vals = inputs.values || {};\n      const cols = Object.keys(vals);\n      if (cols.length === 0) throw new Error('insert requires values');\n      for (const c of cols) if (!isSafeColumn(c)) throw new Error('unsafe column');\n      const placeholders = cols.map((_, i) => `$${i + 1}`);\n      params.push(...cols.map(c => vals[c]));\n      sql = `insert into ${inputs.table} (${cols.join(',')}) values (${placeholders.join(',')}) returning *`;\n    } else if (inputs.op === 'update') {\n      const vals = inputs.values || {};\n      const cols = Object.keys(vals);\n      if (cols.length === 0) throw new Error('update requires values');\n      if (!inputs.where) throw new Error('update requires where');\n      for (const c of cols) if (!isSafeColumn(c)) throw new Error('unsafe column');\n      const sets = cols.map((c, i) => `${c} = $${i + 1}`);\n      params.push(...cols.map(c => vals[c]));\n      const remappedWhere = remapPlaceholders(inputs.where!, params.length);\n      params.push(...(inputs.whereParams || []));\n      sql = `update ${inputs.table} set ${sets.join(', ')} where ${remappedWhere} returning *`;\n    } else if (inputs.op === 'delete') {\n      if (!inputs.where) throw new Error('delete requires where');\n      const remappedWhere = remapPlaceholders(inputs.where!, params.length);\n      params.push(...(inputs.whereParams || []));\n      sql = `delete from ${inputs.table} where ${remappedWhere} returning *`;\n    } else {\n      throw new Error('unknown op');\n    }\n\n    const q = await query<any>(sql, params);\n    result = { rowCount: (q as any).rows?.length ?? 0, rows: (q as any).rows ?? [] };\n\n    await query(`update nofx.step set status='succeeded', outputs=$2, ended_at=now() where id=$1`, [\n      stepId,\n      JSON.stringify({ table: inputs.table, op: inputs.op, result })\n    ]).catch(async ()=>{\n      await query(`update nofx.step set status='succeeded', outputs=$2, completed_at=now() where id=$1`, [\n        stepId,\n        JSON.stringify({ table: inputs.table, op: inputs.op, result })\n      ]);\n    });\n    await recordEvent(runId, 'db.write.succeeded', { table: inputs.table, op: inputs.op, rowCount: result.rowCount }, stepId);\n  }\n};\n\nexport default handler;\n\n// Remap $1..$N in a WHERE clause to start at current parameter offset.\nfunction remapPlaceholders(where: string, currentParams: number): string {\n  return where.replace(/\\$(\\d+)/g, (_m, g1) => {\n    const n = parseInt(g1, 10);\n    if (!Number.isFinite(n) || n <= 0) return _m;\n    return `$${currentParams + n}`;\n  });\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Volumes/Development/nofx-local-starter/src/worker/handlers/gate.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'log' is defined but never used. Allowed unused vars must match /^_/u.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":13},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":54,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":54,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2116,2119],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2116,2119],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":61,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":61,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { StepHandler } from \"./types\";\nimport { store } from \"../../lib/store\";\nimport { recordEvent } from \"../../lib/events\";\nimport { log } from \"../../lib/logger\";\nimport { getSettings } from \"../../lib/settings\";\nimport { saveArtifact } from \"../../lib/artifacts\";\nimport { spawnSync } from \"node:child_process\";\nimport fs from \"node:fs\";\nimport path from \"node:path\";\n\nfunction contentTypeFor(name: string) {\n  const ext = path.extname(name).toLowerCase();\n  if (ext === \".json\") return \"application/json\";\n  if (ext === \".txt\" || ext === \".log\") return \"text/plain\";\n  return \"application/octet-stream\";\n}\n\nconst handler: StepHandler = {\n  match: (tool) => tool.startsWith(\"gate:\"),\n  async run({ runId, step }) {\n    const stepId = step.id;\n    const gateName = step.tool.replace(/^gate:/, \"\");\n\n    await store.updateStep(stepId, { status: 'running', started_at: new Date().toISOString() });\n    await recordEvent(runId, \"step.started\", { name: step.name, tool: step.tool }, stepId);\n\n    const scriptPath = path.resolve(process.cwd(), \"scripts\", \"runGate.js\");\n    const { gates } = await getSettings();\n\n    // Skip if gate disabled by settings\n    if ((gateName === 'typecheck' && !gates.typecheck) ||\n        (gateName === 'lint' && !gates.lint) ||\n        (gateName === 'unit' && !gates.unit)) {\n      await query(`update nofx.step set status='succeeded', outputs=$2, ended_at=now() where id=$1`, [\n        stepId,\n        JSON.stringify({ gate: gateName, skipped: true })\n      ]).catch(async () => {\n        await query(`update nofx.step set status='succeeded', outputs=$2, completed_at=now() where id=$1`, [\n          stepId,\n          JSON.stringify({ gate: gateName, skipped: true })\n        ]);\n      });\n      await recordEvent(runId, \"step.finished\", { gate: gateName, skipped: true }, stepId);\n      return;\n    }\n\n    const proc = spawnSync(process.execPath, [scriptPath, gateName], {\n      cwd: process.cwd(),\n      encoding: \"utf8\",\n      stdio: [\"ignore\", \"pipe\", \"pipe\"],\n      env: { ...process.env, COVERAGE_THRESHOLD: String(gates.coverageThreshold ?? 0.9) }\n    });\n\n    let summary: any = { gate: gateName, passed: proc.status === 0 };\n    try {\n      const line = (proc.stdout || \"\").trim().split(/\\n/).filter(Boolean).pop();\n      if (line) {\n        const parsed = JSON.parse(line);\n        if (parsed && parsed.summary) summary = parsed.summary;\n      }\n    } catch (e) {\n      // keep default summary\n    }\n\n    // Collect and upload evidence artifacts produced by the gate runner\n    const localDir = path.resolve(process.cwd(), \"gate-artifacts\");\n    const uploadedPaths: string[] = [];\n    if (fs.existsSync(localDir)) {\n      const files = fs.readdirSync(localDir);\n      for (const f of files) {\n        const full = path.join(localDir, f);\n        if (!fs.statSync(full).isFile()) continue;\n        const storagePath = await saveArtifact(runId, stepId, `gate-artifacts/${f}`, fs.readFileSync(full, 'utf8'), contentTypeFor(f));\n        uploadedPaths.push(storagePath);\n      }\n    }\n\n    // Always upload a JSON summary as gate-summary.json\n    const summaryName = \"gate-summary.json\";\n    const summaryPath = await saveArtifact(runId, stepId, summaryName, JSON.stringify(summary, null, 2), 'application/json');\n    uploadedPaths.push(summaryPath);\n\n    if (summary.passed) {\n      await store.updateStep(stepId, { status: 'succeeded', ended_at: new Date().toISOString(), outputs: { gate: gateName, summary, artifacts: uploadedPaths } });\n      await recordEvent(runId, \"step.finished\", { gate: gateName, summary }, stepId);\n    } else {\n      await store.updateStep(stepId, { status: 'failed', ended_at: new Date().toISOString(), outputs: { gate: gateName, summary, artifacts: uploadedPaths } });\n      await recordEvent(runId, \"step.failed\", { gate: gateName, summary, stderr: proc.stderr }, stepId);\n      throw new Error(`gate ${gateName} failed`);\n    }\n  }\n};\n\nexport default handler;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Volumes/Development/nofx-local-starter/src/worker/handlers/git_pr.ts","messages":[{"ruleId":"prefer-const","severity":1,"message":"'m' is never reassigned. Use 'const' instead.","line":44,"column":7,"nodeType":"Identifier","messageId":"useConst","endLine":44,"endColumn":8,"fix":{"range":[1688,1747],"text":"const m = url.match(/github.com[:/](.+?)\\/(.+?)(?:\\.git)?$/);"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":72,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":72,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3004,3007],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3004,3007],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":75,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":75,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3236,3239],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3236,3239],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":76,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":76,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3391,3394],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3391,3394],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":117,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":117,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5408,5411],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5408,5411],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":118,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":118,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5432,5435],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5432,5435],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":119,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":119,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5463,5466],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5463,5466],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":119,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":119,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5483,5486],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5483,5486],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":122,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":122,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5574,5577],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5574,5577],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":125,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":125,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5661,5664],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5661,5664],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { StepHandler } from \"./types\";\nimport { query } from \"../../lib/db\";\nimport { recordEvent } from \"../../lib/events\";\nimport { supabase, ARTIFACT_BUCKET } from \"../../lib/supabase\";\nimport { log } from \"../../lib/logger\";\nimport { spawnSync } from \"node:child_process\";\nimport fs from \"node:fs\";\nimport path from \"node:path\";\n\ntype CommitItem = {\n  path: string;               // repo-relative file path\n  fromArtifact?: string;      // Supabase storage path of artifact (direct)\n  fromStep?: string;          // resolve artifact by prior step name\n  artifactName?: string;      // filename within that step (e.g., README.md)\n  content?: string;           // inline content\n  mode?: 'overwrite';\n};\ntype Inputs = {\n  branch?: string;\n  base?: string;              // base branch (default: main)\n  title?: string;\n  body?: string;\n  draft?: boolean;\n  commits: CommitItem[];\n};\n\nfunction sh(cmd: string, args: string[], cwd: string){\n  const p = spawnSync(cmd, args, { cwd, stdio: 'pipe', encoding: 'utf8' });\n  if (p.status !== 0) throw new Error(`cmd failed: ${cmd} ${args.join(' ')}\\n${p.stderr}`);\n  return p.stdout.trim();\n}\nfunction repoRoot(){ return process.cwd(); }\nfunction ensureDir(filePath:string){ fs.mkdirSync(path.dirname(filePath), { recursive: true }); }\n\nasync function getArtifactBuffer(pth: string): Promise<Buffer> {\n  const { data, error } = await supabase.storage.from(ARTIFACT_BUCKET).download(pth);\n  if (error || !data) throw new Error(`artifact not found: ${pth}`);\n  const arr = await data.arrayBuffer();\n  return Buffer.from(arr);\n}\n\nfunction parseOrigin(url: string){\n  // supports git@github.com:owner/repo.git or https://github.com/owner/repo.git\n  let m = url.match(/github.com[:/](.+?)\\/(.+?)(?:\\.git)?$/);\n  if (!m) throw new Error('unsupported origin url: ' + url);\n  return { owner: m[1], repo: m[2] };\n}\n\nconst handler: StepHandler = {\n  match: (tool) => tool === 'git_pr',\n  async run({ runId, step }) {\n    const stepId = step.id;\n    await query(`update nofx.step set status='running', started_at=now() where id=$1`, [stepId])\n      .catch(async ()=>{ await query(`update nofx.step set status='running' where id=$1`, [stepId]); });\n    await recordEvent(runId, 'step.started', { name: step.name, tool: step.tool }, stepId);\n\n    const inputs: Inputs = step.inputs || {};\n    if (!Array.isArray(inputs.commits) || inputs.commits.length === 0) throw new Error('git_pr requires commits');\n    const base = inputs.base || process.env.GIT_DEFAULT_BASE || 'main';\n    const branch = inputs.branch || `feat/run-${runId.slice(0,8)}`;\n    const repo = repoRoot();\n\n    // prepare files\n    for (const c of inputs.commits) {\n      const outPath = path.join(repo, c.path);\n      ensureDir(outPath);\n      if (c.fromArtifact) {\n        const buf = await getArtifactBuffer(c.fromArtifact);\n        fs.writeFileSync(outPath, buf);\n      } else if (c.fromStep && c.artifactName) {\n        // resolve artifact by step name and filename\n        const stepRow = await query<any>(`select id from nofx.step where run_id=$1 and name=$2 limit 1`, [runId, c.fromStep]);\n        const sid = stepRow.rows[0]?.id;\n        if (!sid) throw new Error(`step not found: ${c.fromStep}`);\n        const art = await query<any>(`select path as uri from nofx.artifact where step_id=$1 and path like $2 limit 1`, [sid, `%/${c.artifactName}`]);\n        const pth = (art.rows[0] as any)?.uri as string | undefined;\n        if (!pth) throw new Error(`artifact not found: ${c.artifactName} in step ${c.fromStep}`);\n        const buf = await getArtifactBuffer(pth);\n        fs.writeFileSync(outPath, buf);\n      } else if (typeof c.content === 'string') {\n        fs.writeFileSync(outPath, c.content, 'utf8');\n      } else {\n        throw new Error('commit item requires fromArtifact or content');\n      }\n    }\n\n    // git plumbing\n    try { sh('git', ['rev-parse','--is-inside-work-tree'], repo); } catch { throw new Error('not a git repo'); }\n    sh('git', ['fetch','origin', base], repo);\n    // Create branch from origin/base\n    sh('git', ['checkout','-B', branch, `origin/${base}`], repo);\n    sh('git', ['add', '--all'], repo);\n    const commitMsg = inputs.title || `Update by NOFX run ${runId}`;\n    // set identity if needed\n    try { sh('git', ['config','user.email'], repo); } catch { sh('git', ['config','user.email', 'nofx@example.com'], repo); }\n    try { sh('git', ['config','user.name'], repo); } catch { sh('git', ['config','user.name', 'NOFX Bot'], repo); }\n    sh('git', ['commit','-m', commitMsg], repo);\n    sh('git', ['push','-u','origin', branch], repo);\n\n    // Open PR via GitHub API\n    let prUrl: string | undefined;\n    try {\n      const origin = sh('git', ['config','--get','remote.origin.url'], repo);\n      const { owner, repo: name } = parseOrigin(origin);\n      const token = process.env.GITHUB_TOKEN || process.env.GH_TOKEN;\n      if (!token) throw new Error('GITHUB_TOKEN not set');\n      const rsp = await fetch(`https://api.github.com/repos/${owner}/${name}/pulls`, {\n        method: 'POST',\n        headers: { 'Authorization': `token ${token}`, 'Content-Type': 'application/json', 'Accept': 'application/vnd.github+json' },\n        body: JSON.stringify({\n          title: inputs.title || commitMsg,\n          head: branch,\n          base,\n          body: inputs.body || `Automated PR from NOFX run ${runId}`,\n          draft: !!inputs.draft\n        })\n      } as any);\n      if ((rsp as any).ok) {\n        const data: any = await (rsp as any).json();\n        prUrl = data.html_url;\n      } else {\n        const t = await (rsp as any).text();\n        throw new Error(`create PR failed: ${t}`);\n      }\n    } catch (e:any) {\n      log.warn({ err: e?.message }, 'PR creation failed; commit pushed');\n    }\n\n    const outputs = { branch, base, prUrl, files: inputs.commits.map(c=>c.path) };\n    await query(`update nofx.step set status='succeeded', outputs=$2, ended_at=now() where id=$1`, [\n      stepId, JSON.stringify(outputs)\n    ]).catch(async ()=>{\n      await query(`update nofx.step set status='succeeded', outputs=$2, completed_at=now() where id=$1`, [\n        stepId, JSON.stringify(outputs)\n      ]);\n    });\n    await recordEvent(runId, 'step.finished', outputs, stepId);\n  }\n};\n\nexport default handler;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Volumes/Development/nofx-local-starter/src/worker/handlers/loader.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Volumes/Development/nofx-local-starter/src/worker/handlers/manual.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":26,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1004,1007],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1004,1007],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":34,"column":139,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":34,"endColumn":142,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1447,1450],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1447,1450],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":40,"column":136,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":40,"endColumn":139,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1791,1794],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1791,1794],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { StepHandler } from \"./types\";\nimport { store } from \"../../lib/store\";\nimport { recordEvent } from \"../../lib/events\";\nimport { enqueue, STEP_READY_TOPIC } from \"../../lib/queue\";\n\nconst CHECK_DELAY_MS = 5000;\n\nconst handler: StepHandler = {\n  match: (tool) => tool.startsWith(\"manual:\"),\n  async run({ runId, step }) {\n    const stepId = step.id;\n    // ensure step is marked running\n    await store.updateStep(stepId, { status: 'running', started_at: new Date().toISOString() });\n\n    // does a gate exist for this step?\n    const g = await store.getLatestGate(runId, stepId);\n    if (!g) {\n      await store.createOrGetGate(runId, stepId, step.tool);\n      await recordEvent(runId, 'gate.created', { stepId, tool: step.tool }, stepId);\n      // re-enqueue to check later\n      await enqueue(STEP_READY_TOPIC, { runId, stepId }, { delay: CHECK_DELAY_MS });\n      await recordEvent(runId, 'gate.waiting', { stepId, delayMs: CHECK_DELAY_MS }, stepId);\n      return;\n    }\n\n    const gate = g as any;\n    if (gate.status === 'pending') {\n      await enqueue(STEP_READY_TOPIC, { runId, stepId }, { delay: CHECK_DELAY_MS });\n      await recordEvent(runId, 'gate.waiting', { stepId, delayMs: CHECK_DELAY_MS }, stepId);\n      return;\n    }\n\n    if (gate.status === 'passed' || gate.status === 'waived') {\n      await store.updateStep(stepId, { status: 'succeeded', ended_at: new Date().toISOString(), outputs: { manual: true, gateId: (gate as any).id, status: gate.status } });\n      await recordEvent(runId, 'step.finished', { stepId, tool: step.tool, manual: true, gateId: gate.id }, stepId);\n      return;\n    }\n\n    if (gate.status === 'failed') {\n      await store.updateStep(stepId, { status: 'failed', ended_at: new Date().toISOString(), outputs: { manual: true, gateId: (gate as any).id, status: gate.status } });\n      await recordEvent(runId, 'step.failed', { stepId, tool: step.tool, manual: true, gateId: gate.id }, stepId);\n      throw new Error('manual gate failed');\n    }\n  }\n};\n\nexport default handler;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Volumes/Development/nofx-local-starter/src/worker/handlers/types.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":6,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[98,101],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[98,101],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export interface Step {\n  id: string;\n  run_id: string;\n  name: string;\n  tool: string;\n  inputs: any;\n}\nexport interface StepHandler {\n  /** match a tool exactly or by regex */\n  match(tool: string): boolean;\n  run(ctx: { runId: string; step: Step }): Promise<void>;\n}","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Volumes/Development/nofx-local-starter/src/worker/main.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Volumes/Development/nofx-local-starter/src/worker/runner.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":11,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[375,378],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[375,378],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":29,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":29,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1092,1095],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1092,1095],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { store } from \"../lib/store\";\nimport { recordEvent } from \"../lib/events\";\nimport { log } from \"../lib/logger\";\nimport { loadHandlers } from \"./handlers/loader\";\nimport type { Step } from \"./handlers/types\";\n\nconst handlers = loadHandlers();\n\nexport async function runStep(runId: string, stepId: string) {\n  const s = await store.getStep(stepId);\n  const step = s as any as Step;\n  if (!step) throw new Error(\"step not found\");\n\n  const h = handlers.find(h => h.match(step.tool));\n  if (!h) {\n    await recordEvent(runId, \"step.failed\", { error: \"no handler for tool\", tool: step.tool }, stepId);\n    await query(`update nofx.step set status='failed', ended_at=now() where id=$1`, [stepId]);\n    throw new Error(\"no handler for \" + step.tool);\n  }\n\n  try {\n    await h.run({ runId, step });\n    // close run if done\n    const remaining = await store.countRemainingSteps(runId);\n    if (Number(remaining) === 0) {\n      await store.updateRun(runId, { status: 'succeeded', ended_at: new Date().toISOString() });\n      await recordEvent(runId, \"run.succeeded\", {});\n    }\n  } catch (err:any) {\n    log.error({ err }, \"step failed\");\n    await store.updateStep(stepId, { status: 'failed', ended_at: new Date().toISOString() });\n    await recordEvent(runId, \"step.failed\", { error: err.message }, stepId);\n    await store.updateRun(runId, { status: 'failed', ended_at: new Date().toISOString() });\n    await recordEvent(runId, \"run.failed\", { reason: \"step failed\", stepId });\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]}]
