import { RedisQueueAdapter } from "./RedisAdapter";
import { MemoryQueueAdapter } from "./MemoryAdapter";
import type { JobsOptions } from "bullmq";
const DRIVER = (process.env.QUEUE_DRIVER || 'memory').toLowerCase();
let impl: any;
if (DRIVER === 'redis') impl = new RedisQueueAdapter();
else impl = new MemoryQueueAdapter();
export const STEP_READY_TOPIC = "step.ready";
export const enqueue = (topic:string, payload:any, options?: JobsOptions)=>impl.enqueue(topic,payload,options);
export const subscribe = (topic:string, handler:(p:any)=>Promise<void>)=>impl.subscribe(topic,handler);
export const getCounts = (topic:string)=>impl.getCounts(topic);
export const hasSubscribers = (topic:string)=>typeof impl.hasSubscribers === 'function' ? impl.hasSubscribers(topic) : true;
export const STEP_DLQ_TOPIC = "step.dlq";
export const OUTBOX_TOPIC = "event.out";
export const listDlq = (topic:string)=> typeof impl.listDlq === 'function' ? impl.listDlq(topic) : Promise.resolve([]);
export const rehydrateDlq = (topic:string, max=50)=> typeof impl.rehydrateDlq === 'function' ? impl.rehydrateDlq(topic, max) : Promise.resolve(0);
export const getOldestAgeMs = (topic:string): number | null => typeof impl.getOldestAgeMs === 'function' ? impl.getOldestAgeMs(topic) : null;
