<!doctype html><html><head>
<meta charset="utf-8"/><title>NOFX - New Run</title>
<link rel="stylesheet" href="/ui/static/style.css"/>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@shoelace-style/shoelace@2.16.0/cdn/themes/dark.css"/>
<script type="module" src="https://cdn.jsdelivr.net/npm/@shoelace-style/shoelace@2.16.0/cdn/shoelace.js"></script>
</head><body>
<div class="header"><div class="inner">
  <div class="brand"><a href="/ui/runs">NOFX</a></div>
  <div class="nav">
    <a href="/ui/runs">Runs</a>
    <a href="/ui/models">Models</a>
    <a href="/ui/settings">Settings</a>
  </div>
</div></div>
<div class="container">
<div class="section-title"><h1 style="margin:12px 0">New Run</h1><span class="tip" data-tip="Tell NOFX what you want in plain language. Quality checks run automatically based on Settings. Developers can expand the JSON editor below.">?</span></div>

<section class="card"><div class="bd">
  <h2>Standard</h2>
  <label>What should it do?
    <textarea id="std_prompt" rows="5" placeholder="Example: Create docs/overview.md that explains models and pricing. Open a PR."></textarea>
  </label>
  <div class="grid" style="margin-top:8px">
    <div class="col-12"><label>Create / Update file (optional) <input id="std_file" placeholder="e.g. docs/overview.md"/></label></div>
    <div class="col-6"><label>Search & summarize (optional) <input id="std_sumq" placeholder="e.g. pricing policy"/></label></div>
    <div class="col-6"><label>Summarize into (optional) <input id="std_sumtarget" placeholder="e.g. docs/summary.md"/></label></div>
  </div>
  <div style="display:flex;gap:14px;align-items:center;flex-wrap:wrap;margin-top:8px">
    <label style="display:inline-flex;gap:6px;align-items:center"><input id="std_quality" type="checkbox" checked/> Include quality checks</label>
    <label style="display:inline-flex;gap:6px;align-items:center"><input id="std_openpr" type="checkbox"/> Open a GitHub PR</label>
    <button class="btn" onclick="previewStandard()">Preview</button>
    <button class="btn primary" onclick="createStandardRun()">Create Run</button>
  </div>
  <small class="muted">Checks and approvals follow your Settings. You can adjust them any time.</small>
  <div style="margin-top:12px">
    <div class="muted" style="margin-bottom:6px">Examples</div>
    <div style="display:flex;gap:8px;flex-wrap:wrap">
      <button class="btn small" onclick="ex('Write a clear README explaining NOFX’s control plane, verification gates, and workers. Open a PR with the change.', true, true)">README + PR</button>
      <button class="btn small" onclick="ex('Create docs/overview.md that explains how to add models and set pricing. Open a PR.', true, true)">Docs/overview.md</button>
      <button class="btn small" onclick="ex('Draft CONTRIBUTING.md with setup steps, run commands, and code style. Require manual approval before opening a PR.', true, true)">Contributing + Approval</button>
    </div>
  </div>
</div></section>

<section class="card" style="margin-top:16px"><div class="bd">
  <h2>Developers</h2>
  <label>Goal <input id="goal" placeholder="Describe the goal" style="max-width:420px"/></label>
  <div>
    <textarea id="plan" rows="18" style="width:100%;max-width:900px" placeholder='{
  "steps": [
    { "name": "typecheck", "tool": "gate:typecheck" },
    { "name": "lint", "tool": "gate:lint" },
    { "name": "unit", "tool": "gate:unit" },
    { "name": "write readme", "tool": "codegen", "inputs": { "topic": "Welcome", "bullets": ["Control plane","Verification","Workers"] } }
  ]
}'></textarea>
  </div>
  <p><button class="btn" onclick="createRun()">Create Run (Developers)</button> <span id="status" class="muted"></span></p>
</div></section>
</div>

<script>
function setPlan(obj){ document.getElementById('plan').value = JSON.stringify(obj, null, 2); }
function presetGatedCodegen(){
  setPlan({ steps:[
    { name:'typecheck', tool:'gate:typecheck' },
    { name:'lint', tool:'gate:lint' },
    { name:'unit', tool:'gate:unit' },
    { name:'write readme', tool:'codegen', inputs:{ topic:'Welcome', bullets:['Control plane','Verification','Workers'] } }
  ]});
  document.getElementById('goal').value = 'gated codegen';
}
function presetManualDeploy(){
  setPlan({ steps:[ { name:'deploy approval', tool:'manual:deploy' } ]});
  document.getElementById('goal').value = 'manual approval';
}
function presetCodegenPR(){
  setPlan({ steps:[
    { name:'write readme', tool:'codegen', inputs:{ topic:'Welcome', bullets:['Control plane','Verification','Workers'] } },
    { name:'open pr', tool:'git_pr', inputs: { branch: 'feat/nofx-readme', base: 'main', title: 'docs: add readme', commits:[ { path:'README.md', fromArtifact:'runs/REPLACE_RUN/steps/REPLACE_STEP/README.md' } ] } }
  ]});
  document.getElementById('goal').value = 'codegen + PR';
}
async function createRun(){
  const goal = document.getElementById('goal').value || 'ad-hoc run';
  let plan;
  try { plan = JSON.parse(document.getElementById('plan').value); } catch (e) { document.getElementById('status').textContent = 'Invalid JSON'; return; }
  const body = { plan: { goal, steps: plan.steps||[] } };
  const rsp = await fetch('/runs', { method:'POST', headers:{'Content-Type':'application/json'}, body: JSON.stringify(body) });
  if (!rsp.ok) { document.getElementById('status').textContent = 'Failed to create'; return; }
  const data = await rsp.json();
  // If preset with placeholders, try to patch artifact paths to real run/step
  try {
    const runId = data.id;
    const tl = await fetch(`/runs/${runId}`);
    const details = await tl.json();
    const codegenStep = (details.steps||[]).find(s => s.tool === 'codegen');
    const prStep = (details.steps||[]).find(s => s.tool === 'git_pr');
    if (codegenStep && prStep) {
      const updated = { plan: { goal, steps: [ { name: prStep.name, tool: 'git_pr', inputs: {
        branch: 'feat/nofx-readme', base: 'main', title: 'docs: add readme',
        commits: [ { path:'README.md', fromArtifact: `runs/${runId}/steps/${codegenStep.id}/README.md` } ]
      } } ] } };
      await fetch('/runs', { method:'POST', headers:{'Content-Type':'application/json'}, body: JSON.stringify(updated) });
    }
  } catch {}
  window.location.href = `/ui/runs/${data.id}`;
}
async function createStandardRun(){
  const prompt = document.getElementById('std_prompt').value.trim();
  const quality = document.getElementById('std_quality').checked;
  const openPr = document.getElementById('std_openpr').checked;
  if (!prompt) { document.getElementById('status').textContent = 'Please describe what you want to do.'; return; }
  const filePath = document.getElementById('std_file').value.trim();
  const summarizeQuery = document.getElementById('std_sumq').value.trim();
  const summarizeTarget = document.getElementById('std_sumtarget').value.trim();
  const body = { standard: { prompt, quality, openPr, filePath: filePath||undefined, summarizeQuery: summarizeQuery||undefined, summarizeTarget: summarizeTarget||undefined } };
  const rsp = await fetch('/runs', { method:'POST', headers:{'Content-Type':'application/json'}, body: JSON.stringify(body) });
  if (!rsp.ok) { document.getElementById('status').textContent = 'Failed to create'; return; }
  const data = await rsp.json();
  window.location.href = `/ui/runs/${data.id}`;
}
async function previewStandard(){
  const prompt = document.getElementById('std_prompt').value.trim();
  if (!prompt) return;
  const quality = document.getElementById('std_quality').checked;
  const openPr = document.getElementById('std_openpr').checked;
  const filePath = document.getElementById('std_file').value.trim();
  const summarizeQuery = document.getElementById('std_sumq').value.trim();
  const summarizeTarget = document.getElementById('std_sumtarget').value.trim();
  const rsp = await fetch('/runs/preview', { method:'POST', headers:{'Content-Type':'application/json'}, body: JSON.stringify({ standard: { prompt, quality, openPr, filePath: filePath||undefined, summarizeQuery: summarizeQuery||undefined, summarizeTarget: summarizeTarget||undefined } }) });
  const data = await rsp.json();
  const ul = document.getElementById('previewSteps');
  ul.innerHTML = '';
  (data.steps||[]).forEach(s => { const li = document.createElement('li'); li.textContent = `${s.tool} — ${s.name}`; ul.appendChild(li); });
  document.querySelector('#planPreview').show();
}
function ex(text, quality=true, pr=true){
  document.getElementById('std_prompt').value = text;
  document.getElementById('std_quality').checked = !!quality;
  document.getElementById('std_openpr').checked = !!pr;
}
</script>
<sl-dialog id="planPreview" label="Plan Preview">
  <div>
    <p class="muted">We will run the following steps:</p>
    <ul id="previewSteps"></ul>
  </div>
  <sl-button slot="footer" onclick="document.querySelector('#planPreview').hide()">Close</sl-button>
</sl-dialog>
</body></html>
