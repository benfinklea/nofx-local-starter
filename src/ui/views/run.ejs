<!doctype html><html><head>
<meta charset="utf-8"/><title>NOFX - Run <%= run.id %></title>
<link rel="stylesheet" href="/ui/static/style.css"/>
</head><body>
<div class="header"><div class="inner">
  <div class="brand"><a href="/ui/runs">NOFX</a></div>
  <div class="nav">
    <a href="/ui/runs">Runs</a>
    <a href="/ui/models">Models</a>
    <a href="/ui/settings">Settings</a>
  </div>
</div></div>
<div class="container">
  <div class="grid">
    <div class="col-8">
      <div class="card"><div class="hd">Run <code><%= run.id %></code></div><div class="bd">
        <p>Status:
          <% const s = String(run.status||'').toLowerCase(); %>
          <span class="badge <%= s==='succeeded'?'ok':(s==='failed'?'err':(s==='queued'?'warn':'')) %>"><%= run.status %></span>
          <span class="tip" data-tip="Live timeline refresh every 2 seconds.">?</span>
        </p>
        <pre id="timeline"></pre>
      </div></div>
      <div class="card" style="margin-top:16px"><div class="hd">Artifacts <span class="tip" data-tip="Artifacts are stored with hashes and signed for secure download.">?</span></div><div class="bd">
        <ul class="list">
        <% artifacts.forEach(a => { %>
          <li><strong><%= a.step_name %></strong> — <a class="btn small" href="/ui/artifacts/signed?path=<%= encodeURIComponent(a.uri) %>">Download</a></li>
        <% }) %>
        </ul>
      </div></div>
      <div class="card" style="margin-top:16px"><div class="hd">LLM Usage</div><div class="bd">
        <pre id="usage">Loading…</pre>
      </div></div>
    </div>
    <div class="col-4">
      <div class="card"><div class="hd">Gates <span class="tip" data-tip="Approve or waive to continue. Manual gates enforce human checks.">?</span></div><div class="bd">
        <div id="gates">
          <% if (gates && gates.length) { %>
            <table>
              <tr><th>Type</th><th>Status</th><th>Actions</th></tr>
              <% gates.forEach(g => { %>
                <tr>
                  <td><%= g.gate_type %></td>
                  <td><span class="badge <%= g.status==='passed'?'ok':(g.status==='failed'?'err':(g.status==='pending'?'warn':'')) %>"><%= g.status %></span></td>
                  <td>
                    <% if (g.status === 'pending') { %>
                      <button class="btn small" onclick="approve('<%= g.id %>')">Approve</button>
                      <button class="btn small ghost" onclick="waive('<%= g.id %>')">Waive</button>
                    <% } %>
                  </td>
                </tr>
              <% }) %>
            </table>
          <% } else { %>
            <p class="muted">No gates yet.</p>
          <% } %>
        </div>
      </div></div>
    </div>
  </div>
</div>
<script>
async function load() {
  const rsp = await fetch('/runs/<%= run.id %>/timeline');
  const data = await rsp.json();
  document.getElementById('timeline').textContent = JSON.stringify(data,null,2);
}
load();
setInterval(load, 2000);

async function loadUsage(){
  const rsp = await fetch('/runs/<%= run.id %>/timeline');
  const ev = await rsp.json();
  const usage = ev.filter(e => e.type === 'llm.usage');
  if (!usage.length) { document.getElementById('usage').textContent = 'No usage recorded.'; return; }
  const totals = {};
  let totalCost = 0;
  for (const u of usage) {
    const p = (u.payload.provider||'unknown') + ':' + (u.payload.model||'');
    if (!totals[p]) totals[p] = { input:0, output:0, total:0, calls:0 };
    const s = totals[p];
    s.input += u.payload.usage?.inputTokens || 0;
    s.output += u.payload.usage?.outputTokens || 0;
    s.total += u.payload.usage?.totalTokens || 0;
    s.calls += 1;
    if (typeof u.payload.costUSD === 'number') totalCost += u.payload.costUSD;
  }
  const lines = Object.keys(totals).map(k => `${k} -> calls=${totals[k].calls} total=${totals[k].total} (in=${totals[k].input}, out=${totals[k].output})`);
  lines.push(`Total cost (approx): $${totalCost.toFixed(4)}`);
  document.getElementById('usage').textContent = lines.join('\n');
}
loadUsage();
setInterval(loadUsage, 4000);

async function loadGates(){
  const rsp = await fetch('/runs/<%= run.id %>/gates');
  const data = await rsp.json();
  const container = document.getElementById('gates');
  if (!Array.isArray(data) || data.length === 0) {
    container.innerHTML = '<p>No gates yet.</p>';
    return;
  }
  let html = '<table><tr><th>Type</th><th>Status</th><th>Approved By</th><th>Actions</th></tr>';
  for (const g of data) {
    html += `<tr>` +
      `<td>${escapeHtml(g.gate_type)}</td>` +
      `<td>${escapeHtml(g.status)}</td>` +
      `<td>${g.approved_by ? escapeHtml(g.approved_by) : ''}</td>` +
      `<td>` + (g.status === 'pending'
        ? `<button onclick=\"approve('${g.id}')\">Approve</button> <button onclick=\"waive('${g.id}')\">Waive</button>`
        : '') + `</td>` +
      `</tr>`;
  }
  html += '</table>';
  container.innerHTML = html;
}
function escapeHtml(s){
  return String(s).replaceAll('&','&amp;').replaceAll('<','&lt;').replaceAll('>','&gt;').replaceAll('"','&quot;').replaceAll("'",'&#39;');
}
loadGates();
setInterval(loadGates, 2000);

async function approve(id){
  const rsp = await fetch('/gates/' + id + '/approve', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ approved_by: 'local-user' }) });
  if (rsp.status === 401) { window.location.href = '/ui/login'; return; }
  location.reload();
}
async function waive(id){
  const rsp = await fetch('/gates/' + id + '/waive', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ approved_by: 'local-user' }) });
  if (rsp.status === 401) { window.location.href = '/ui/login'; return; }
  location.reload();
}
</script>
</body></html>
