<!doctype html><html><head>
<meta charset="utf-8"/><title>NOFX - Responses Run</title>
<link rel="stylesheet" href="/ui/static/style.css"/>
</head><body>
<div class="header"><div class="inner">
  <div class="brand"><a href="/ui/runs">NOFX</a></div>
  <div class="nav">
    <a href="/ui/runs">Runs</a>
    <a href="/ui/builder">Builder</a>
    <a href="/ui/responses" class="active">Responses</a>
    <a href="/ui/models">Models</a>
    <a href="/ui/settings">Settings</a>
  </div>
</div></div>
<div class="container" style="margin-top:16px">
  <div class="section-title"><h1>Responses Run</h1><span class="tip" data-tip="Replay archived events captured from the Responses API.">?</span></div>
  <div class="grid" style="margin-top:12px">
    <div class="col-8">
      <div class="card"><div class="hd">Assistant Output</div><div class="bd">
        <pre id="assistantOutput" class="scroll"></pre>
        <div id="refusals" class="muted" style="margin-top:8px"></div>
      </div></div>
      <div class="card" style="margin-top:16px"><div class="hd">Multimodal Artifacts</div><div class="bd" id="multimodalArtifacts">
        <div class="subsection">
          <h4>Assistant Audio</h4>
          <div id="audioArtifacts" class="media-list muted">No audio captured.</div>
        </div>
        <div class="subsection" style="margin-top:12px">
          <h4>Generated Images</h4>
          <div id="imageArtifacts" class="image-grid muted">No images generated.</div>
        </div>
        <div class="subsection" style="margin-top:12px">
          <h4>Input Transcripts</h4>
          <div id="inputTranscripts" class="media-list muted">No input transcripts recorded.</div>
        </div>
      </div></div>
      <div class="card" style="margin-top:16px"><div class="hd">Timeline</div><div class="bd">
        <table id="eventTable"><thead><tr><th>#</th><th>Event</th><th>Timestamp</th></tr></thead><tbody></tbody></table>
      </div></div>
      <div class="card" style="margin-top:16px"><div class="hd">Raw Events</div><div class="bd">
        <details>
          <summary>Show JSON</summary>
          <pre id="eventsRaw" class="scroll"></pre>
        </details>
      </div></div>
    </div>
    <div class="col-4">
      <div class="card"><div class="hd">Run Metadata</div><div class="bd">
        <div class="metric"><div class="k">Run ID</div><div class="v" id="runId"></div></div>
        <div class="metric"><div class="k">Status</div><div class="v"><span id="runStatus" class="badge">—</span></div></div>
        <div class="metric"><div class="k">Model</div><div class="v" id="runModel">—</div></div>
        <div class="metric"><div class="k">Created</div><div class="v" id="runCreated">—</div></div>
        <div class="metric"><div class="k">Updated</div><div class="v" id="runUpdated">—</div></div>
        <div class="metric"><div class="k">Trace ID</div><div class="v" id="runTrace">—</div></div>
        <div class="metric"><div class="k">Safety Hash</div><div class="v" id="runSafety">—</div></div>
        <div class="metric"><div class="k">Metadata</div><div class="v"><pre id="runMetadata" class="scroll" style="max-height:140px"></pre></div></div>
        <div style="margin-top:12px;display:flex;gap:8px">
          <button class="btn primary small" onclick="retryRun()">Retry Run</button>
        </div>
      </div></div>
      <div class="card" style="margin-top:16px"><div class="hd">Moderator Notes</div><div class="bd">
        <ul id="moderatorNotes" class="list"></ul>
        <form id="noteForm" style="margin-top:12px;display:flex;flex-direction:column;gap:8px">
          <input type="text" id="noteReviewer" placeholder="Reviewer" required class="input"/>
          <textarea id="noteText" placeholder="Add a note" rows="3" class="input"></textarea>
          <select id="noteDisposition" class="input">
            <option value="approved">Approved</option>
            <option value="escalated">Escalated</option>
            <option value="blocked">Blocked</option>
            <option value="info">Info</option>
          </select>
          <button type="submit" class="btn small">Add Note</button>
        </form>
      </div></div>
      <div class="card" style="margin-top:16px"><div class="hd">Incidents</div><div class="bd">
        <table id="incidentTable"><thead><tr><th>Status</th><th>Type</th><th>Observed</th></tr></thead><tbody></tbody></table>
      </div></div>
      <div class="card" style="margin-top:16px"><div class="hd">Delegations</div><div class="bd">
        <table id="delegationTable"><thead><tr><th>Tool</th><th>Status</th><th>Requested</th><th>Completed</th></tr></thead><tbody></tbody></table>
      </div></div>
    </div>
  </div>
</div>
<script>
  const preloaded = <%- JSON.stringify(preloaded || {}) %>;
  const runId = preloaded.run ? preloaded.run.runId : '<%= (preloaded && preloaded.run && preloaded.run.runId) || '' %>';

  function escape(text){
    return String(text ?? '').replace(/[&<>"']/g, function(ch){
      return ({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;','\'':'&#39;'} as any)[ch] || ch;
    });
  }

  function renderMetadata(run){
    document.getElementById('runId').innerHTML = `<code>${escape(run.runId || '')}</code>`;
    const status = String(run.status || 'queued').toLowerCase();
    const badge = document.getElementById('runStatus');
    badge.textContent = run.status || 'queued';
    badge.className = 'badge ' + (status === 'completed' ? 'ok' : (status === 'failed' ? 'err' : (status === 'in_progress' || status === 'queued' ? 'warn' : '')));
    document.getElementById('runModel').textContent = run.model || '—';
    document.getElementById('runCreated').textContent = run.createdAt ? new Date(run.createdAt).toLocaleString() : '—';
    document.getElementById('runUpdated').textContent = run.updatedAt ? new Date(run.updatedAt).toLocaleString() : '—';
    document.getElementById('runMetadata').textContent = run.metadata ? JSON.stringify(run.metadata, null, 2) : '{}';
    document.getElementById('runTrace').innerHTML = run.traceId ? `<code>${escape(run.traceId)}</code>` : '—';
    document.getElementById('runSafety').textContent = run.safety?.hashedIdentifier || '—';
    renderModeratorNotes(run.safety?.moderatorNotes || []);
  }

  function renderOutput(messages, reasoning, refusals, audio, images, transcripts){
    const output = Array.isArray(messages) && messages.length
      ? messages.map((m) => m.text || '').join('\n\n')
      : 'No assistant output yet.';
    document.getElementById('assistantOutput').textContent = output;
    const reasonEl = document.getElementById('refusals');
    const reasons = [];
    if (Array.isArray(reasoning) && reasoning.length) {
      reasons.push('Reasoning: ' + reasoning.join(' '));
    }
    if (Array.isArray(refusals) && refusals.length) {
      reasons.push('Refusal: ' + refusals.join(' '));
    }
    reasonEl.textContent = reasons.join(' \u2022 ');
    renderArtifacts(audio || [], images || [], transcripts || []);
  }

  function renderArtifacts(audioSegments, imageArtifacts, transcripts){
    const audioContainer = document.getElementById('audioArtifacts');
    if (audioContainer) {
      if (Array.isArray(audioSegments) && audioSegments.length) {
        audioContainer.classList.remove('muted');
        audioContainer.innerHTML = audioSegments
          .map((segment, index) => {
            const label = escape(segment.itemId || `segment_${index + 1}`);
            const source = segment.audioBase64 ? `data:audio/${segment.format || 'wav'};base64,${segment.audioBase64}` : '';
            const audioHtml = source
              ? `<audio controls preload="none" src="${source}"></audio>`
              : '<div class="muted">No audio payload archived.</div>';
            const transcriptHtml = segment.transcript
              ? `<div class="muted" style="margin-top:4px">Transcript: ${escape(segment.transcript)}</div>`
              : '';
            return `<div class="artifact"><div class="artifact-label">${label}</div>${audioHtml}${transcriptHtml}</div>`;
          })
          .join('');
      } else {
        audioContainer.classList.add('muted');
        audioContainer.textContent = 'No audio captured.';
      }
    }

    const imageContainer = document.getElementById('imageArtifacts');
    if (imageContainer) {
      if (Array.isArray(imageArtifacts) && imageArtifacts.length) {
        imageContainer.classList.remove('muted');
        imageContainer.innerHTML = imageArtifacts
          .map((artifact, index) => {
            const label = escape(artifact.itemId || `image_${index + 1}`);
            const source = artifact.imageUrl
              ? artifact.imageUrl
              : artifact.b64JSON
              ? `data:image/png;base64,${artifact.b64JSON}`
              : '';
            const imageHtml = source
              ? `<img src="${source}" alt="${label}" style="max-width:100%;border:1px solid #eee;border-radius:6px"/>`
              : '<div class="muted">No image payload archived.</div>';
            const meta = [];
            if (artifact.size) meta.push(`Size: ${escape(artifact.size)}`);
            if (artifact.background !== undefined && artifact.background !== null) meta.push(`Background: ${escape(String(artifact.background))}`);
            if (artifact.createdAt) meta.push(`Created: ${new Date(artifact.createdAt).toLocaleString()}`);
            const metaHtml = meta.length ? `<div class="muted" style="margin-top:4px">${meta.join(' \u2022 ')}</div>` : '';
            return `<div class="artifact"><div class="artifact-label">${label}</div>${imageHtml}${metaHtml}</div>`;
          })
          .join('');
      } else {
        imageContainer.classList.add('muted');
        imageContainer.textContent = 'No images generated.';
      }
    }

    const transcriptContainer = document.getElementById('inputTranscripts');
    if (transcriptContainer) {
      if (Array.isArray(transcripts) && transcripts.length) {
        transcriptContainer.classList.remove('muted');
        transcriptContainer.innerHTML = transcripts
          .map((entry, index) => {
            const label = escape(entry.itemId || `input_${index + 1}`);
            return `<div class="artifact"><div class="artifact-label">${label}</div><div>${escape(entry.transcript)}</div></div>`;
          })
          .join('');
      } else {
        transcriptContainer.classList.add('muted');
        transcriptContainer.textContent = 'No input transcripts recorded.';
      }
    }
  }

  function renderEvents(events){
    const tbody = document.querySelector('#eventTable tbody');
    if (!tbody) return;
    if (!Array.isArray(events) || events.length === 0) {
      tbody.innerHTML = '<tr><td colspan="3" class="muted">No events recorded.</td></tr>';
      document.getElementById('eventsRaw').textContent = '[]';
      return;
    }
    tbody.innerHTML = events.map((event) => {
      const time = event.occurredAt ? new Date(event.occurredAt).toLocaleTimeString() : '';
      return `<tr>
        <td>${event.sequence}</td>
        <td>${escape(event.type)}</td>
        <td class="muted">${time}</td>
      </tr>`;
    }).join('');
    document.getElementById('eventsRaw').textContent = JSON.stringify(events, null, 2);
  }

  function renderModeratorNotes(notes){
    const list = document.getElementById('moderatorNotes');
    if (!list) return;
    if (!Array.isArray(notes) || notes.length === 0) {
      list.innerHTML = '<li class="muted">No moderator notes recorded.</li>';
      return;
    }
    list.innerHTML = notes.map((note) => `<li><strong>${escape(note.reviewer)}</strong> <span class="badge">${escape(note.disposition)}</span><br/><span class="muted">${new Date(note.recordedAt).toLocaleString()}</span><div>${escape(note.note)}</div></li>`).join('');
  }

  function renderIncidents(incidents){
    const tbody = document.querySelector('#incidentTable tbody');
    if (!tbody) return;
    if (!Array.isArray(incidents) || incidents.length === 0) {
      tbody.innerHTML = '<tr><td colspan="3" class="muted">No incidents recorded for this run.</td></tr>';
      return;
    }
    tbody.innerHTML = incidents.map((incident) => `<tr>
      <td>${escape(incident.status)}</td>
      <td>${escape(incident.type)}</td>
      <td class="muted">${incident.occurredAt ? new Date(incident.occurredAt).toLocaleString() : '—'}</td>
    </tr>`).join('');
  }

  function renderDelegations(records){
    const tbody = document.querySelector('#delegationTable tbody');
    if (!tbody) return;
    if (!Array.isArray(records) || records.length === 0) {
      tbody.innerHTML = '<tr><td colspan="4" class="muted">No delegation events recorded.</td></tr>';
      return;
    }
    tbody.innerHTML = records
      .map((record) => `<tr>
        <td>${escape(record.toolName || 'unknown')}</td>
        <td><span class="badge ${record.status === 'completed' ? 'ok' : record.status === 'failed' ? 'err' : 'warn'}">${escape(record.status)}</span></td>
        <td class="muted">${record.requestedAt ? new Date(record.requestedAt).toLocaleString() : '—'}</td>
        <td class="muted">${record.completedAt ? new Date(record.completedAt).toLocaleString() : '—'}</td>
      </tr>`)
      .join('');
  }

  async function refresh(){
    try {
      const res = await fetch(`/responses/runs/${runId}`, { headers: { 'Accept': 'application/json' }, credentials: 'same-origin' });
      if (!res.ok) return;
      const data = await res.json();
      renderMetadata(data.run || {});
      renderOutput(
        data.bufferedMessages || [],
        data.reasoning || [],
        data.refusals || [],
        data.outputAudio || [],
        data.outputImages || [],
        data.inputTranscripts || [],
      );
      renderEvents(data.events || []);
      renderIncidents(data.incidents || []);
      renderDelegations(data.delegations || []);
    } catch {}
  }

  async function retryRun(){
    if (!confirm('Retry this run using the archived request?')) return;
    const res = await fetch(`/responses/runs/${runId}/retry`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      credentials: 'same-origin',
      body: JSON.stringify({ metadata: { retried_via_ui: 'true' } })
    });
    if (!res.ok) {
      alert('Failed to retry run');
      return;
    }
    const data = await res.json();
    window.location.href = `/ui/responses/${data.runId}`;
  }

  (function init(){
    if (preloaded.run) {
      renderMetadata(preloaded.run);
    }
    if (Array.isArray(preloaded.bufferedMessages) || Array.isArray(preloaded.reasoning) || Array.isArray(preloaded.refusals)) {
      renderOutput(
        preloaded.bufferedMessages || [],
        preloaded.reasoning || [],
        preloaded.refusals || [],
        preloaded.outputAudio || [],
        preloaded.outputImages || [],
        preloaded.inputTranscripts || [],
      );
    }
    if (Array.isArray(preloaded.events)) {
      renderEvents(preloaded.events);
    }
    if (Array.isArray(preloaded.incidents)) {
      renderIncidents(preloaded.incidents);
    }
    if (Array.isArray(preloaded.delegations)) {
      renderDelegations(preloaded.delegations);
    }
    refresh();
    setInterval(refresh, 4000);

    const form = document.getElementById('noteForm');
    if (form) {
      form.addEventListener('submit', submitNote);
    }
  })();

  async function submitNote(ev){
    ev.preventDefault();
    const reviewerEl = document.getElementById('noteReviewer');
    const noteEl = document.getElementById('noteText');
    const dispositionEl = document.getElementById('noteDisposition');
    if (!(reviewerEl instanceof HTMLInputElement) || !(noteEl instanceof HTMLTextAreaElement) || !(dispositionEl instanceof HTMLSelectElement)) {
      return;
    }
    const reviewer = reviewerEl.value.trim();
    const note = noteEl.value.trim();
    const disposition = dispositionEl.value;
    if (!reviewer || !note) return alert('Reviewer and note are required.');
    const res = await fetch(`/responses/runs/${runId}/moderation-notes`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      credentials: 'same-origin',
      body: JSON.stringify({ reviewer, note, disposition }),
    });
    if (!res.ok) {
      alert('Failed to record note');
      return;
    }
    reviewerEl.value = '';
    noteEl.value = '';
    refresh();
  }
</script>
</body></html>
