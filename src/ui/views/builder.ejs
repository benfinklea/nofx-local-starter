<!doctype html>
<html>
<head>
  <meta charset="utf-8"/>
  <title>NOFX - Builder</title>
  <link rel="stylesheet" href="/ui/static/style.css"/>
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600&display=swap"/>
</head>
<body>
  <div class="header"><div class="inner">
    <div class="brand"><a href="/ui/runs">NOFX</a></div>
    <div class="nav">
      <a href="/ui/runs">Runs</a>
      <a href="/ui/runs/new">New Run</a>
      <a href="/ui/responses">Responses</a>
      <a href="/ui/builder" class="active">Agent Builder</a>
      <a href="/ui/models">Models</a>
      <a href="/ui/settings">Settings</a>
      <a href="/ui/dev">Dev</a>
    </div>
  </div></div>
  <div class="container">
    <div class="section-title" style="margin-top:18px"><h1>Agent Builder</h1><span class="tip" data-tip="Design Responses API templates, deployment channels, and rollback history.">?</span></div>
    <p class="muted" style="margin-top:4px">Seeded templates are pre-configured with guardrails. Toggle deployment targets and inspect rollback history before publishing.</p>

    <div id="templateList" class="card-grid" style="margin-top:18px"></div>

    <section class="card" style="margin-top:20px">
      <div class="hd"><h2>Recent Responses Runs</h2></div>
      <div class="bd">
        <div class="muted" style="margin-bottom:6px">Latest runs executed through the Responses API orchestration.</div>
        <table id="responsesRunsTable">
          <thead><tr><th>ID</th><th>Status</th><th>Model</th><th>Created</th></tr></thead>
          <tbody></tbody>
        </table>
      </div>
    </section>

    <section class="card" style="margin-top:20px">
      <div class="hd"><h2>Create a Template</h2></div>
      <div class="bd">
        <div class="grid">
          <div class="col-6"><label>Name<input id="new_name" placeholder="Daily Focus Coach"/></label></div>
          <div class="col-6"><label>Model<select id="new_model"><option value="gpt-4.1-mini">gpt-4.1-mini</option><option value="gpt-4o">gpt-4o</option></select></label></div>
        </div>
        <label>Description<textarea id="new_description" rows="2" placeholder="Summarise priorities and recommend next actions"></textarea></label>
        <label>Instructions<textarea id="new_instructions" rows="3" placeholder="Provide three prioritized tasks with rationale"></textarea></label>
        <label>Input Parts (newline separated)<textarea id="new_input" rows="3" placeholder="context:Context: {{context}}\nnotes:Notes: {{notes}}"></textarea></label>
        <div class="grid" style="margin-top:10px">
          <div class="col-4"><label class="nowrap"><input type="checkbox" id="new_channel_slack"/> Slack</label></div>
          <div class="col-4"><label class="nowrap"><input type="checkbox" id="new_channel_email" checked/> Email</label></div>
          <div class="col-4"><label class="nowrap"><input type="checkbox" id="new_channel_inapp" checked/> In-App</label></div>
        </div>
        <button class="btn primary" style="margin-top:12px" onclick="createTemplate()">Create Template</button>
        <div id="new_status" class="muted" style="margin-top:6px"></div>
      </div>
    </section>
  </div>

  <dialog id="historyDialog">
    <h3 id="historyTitle">Template History</h3>
    <div id="historyBody" class="muted" style="max-height:320px;overflow:auto"></div>
    <form method="dialog" style="margin-top:12px;text-align:right"><button class="btn">Close</button></form>
  </dialog>

  <dialog id="compileDialog">
    <h3 id="compileTitle">Compile Preview</h3>
    <pre id="compileBody" style="background:#111;padding:12px;border-radius:8px;max-height:360px;overflow:auto"></pre>
    <form method="dialog" style="margin-top:12px;text-align:right"><button class="btn">Close</button></form>
  </dialog>

  <script>
    const preloaded = <%- JSON.stringify(preloaded || {}) %>;

    function parseVariablesInput(raw){
      const parsed = {};
      if (!raw) return parsed;
      raw.split(',').forEach(pair => {
        const [k, v] = pair.split('=').map(part => part?.trim()).filter(Boolean);
        if (k) parsed[k] = v || '';
      });
      return parsed;
    }

    async function refreshTemplates(){
      try {
        const res = await fetch('/builder/templates', { headers: { 'Accept': 'application/json' }, credentials: 'same-origin' });
        if (!res.ok) throw new Error('Failed to load templates');
        const data = await res.json();
        renderTemplates(data.templates || []);
      } catch (err) {
        document.getElementById('templateList').innerHTML = `<div class="card"><div class="bd">${err instanceof Error ? err.message : 'Failed to load templates'}</div></div>`;
      }
    }

    function renderTemplates(templates){
      const list = document.getElementById('templateList');
      if (!templates.length) {
        list.innerHTML = '<div class="card"><div class="bd">No templates yet.</div></div>';
        return;
      }
      list.innerHTML = templates.map(t => {
        const channels = t.deployments?.production || t.channels || { slack: false, email: false, inApp: true };
        return `<section class="card">
          <div class="hd" style="display:flex;justify-content:space-between;align-items:center">
            <div><h2>${t.name}</h2><div class="muted">${t.description || ''}</div></div>
            <button class="btn small" onclick="showHistory('${t.id}', '${encodeURIComponent(t.name)}')">History</button>
          </div>
          <div class="bd">
            <div class="muted" style="margin-bottom:4px">Deploy to:</div>
            <div style="display:flex;gap:12px">
              ${renderChannelToggle(t.id, 'slack', channels.slack)}
              ${renderChannelToggle(t.id, 'email', channels.email)}
              ${renderChannelToggle(t.id, 'inApp', channels.inApp)}
            </div>
            <div class="muted" style="margin-top:10px">Model: ${t.model}</div>
            <div style="margin-top:10px;display:flex;gap:8px;flex-wrap:wrap">
              <button class="btn small" onclick="openCompile('${t.id}', '${encodeURIComponent(t.name)}')">Compile Preview</button>
              <button class="btn primary small" onclick="runTemplate('${t.id}', '${encodeURIComponent(t.name)}')">Run Template</button>
            </div>
          </div>
        </section>`;
      }).join('');
    }

    function renderResponsesRuns(runs){
      const table = document.querySelector('#responsesRunsTable tbody');
      if (!table) return;
      if (!Array.isArray(runs) || runs.length === 0) {
        table.innerHTML = '<tr><td colspan="4" class="muted">No responses runs yet.</td></tr>';
        return;
      }
      table.innerHTML = runs.slice(0, 10).map((run) => {
        const status = String(run.status || 'queued').toLowerCase();
        const badgeClass = status === 'completed' || status === 'succeeded' ? 'ok' : (status === 'failed' ? 'err' : (status === 'in_progress' || status === 'queued' ? 'warn' : ''));
        const created = run.createdAt ? new Date(run.createdAt).toLocaleString() : '';
        return `<tr>
          <td><code><a href="/ui/responses/${run.runId}">${run.runId}</a></code></td>
          <td><span class="badge ${badgeClass}">${run.status}</span></td>
          <td>${run.model || '—'}</td>
          <td class="muted">${created}</td>
        </tr>`;
      }).join('');
    }

    async function refreshResponsesRuns(){
      try {
        const res = await fetch('/responses/runs', { headers: { 'Accept': 'application/json' }, credentials: 'same-origin' });
        if (!res.ok) return;
        const data = await res.json();
        renderResponsesRuns(data.runs || []);
      } catch {}
    }

    function renderChannelToggle(id, channel, enabled){
      const label = channel === 'inApp' ? 'In-App' : channel.charAt(0).toUpperCase() + channel.slice(1);
      return `<label class="nowrap" style="display:inline-flex;gap:6px;align-items:center">
        <input type="checkbox" ${enabled ? 'checked' : ''} onchange="toggleChannel('${id}','${channel}',this.checked)"/>
        ${label}
      </label>`;
    }

    async function toggleChannel(id, channel, enabled){
      await fetch(`/builder/templates/${id}/deploy`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        credentials: 'same-origin',
        body: JSON.stringify({ environment: 'production', channel, enabled })
      });
      await refreshTemplates();
    }

    async function showHistory(id, nameEncoded){
      const res = await fetch(`/builder/templates/${id}/history`, { credentials: 'same-origin' });
      if (!res.ok) return;
      const data = await res.json();
      const modal = document.getElementById('historyDialog');
      document.getElementById('historyTitle').textContent = decodeURIComponent(nameEncoded) + ' — History';
      const body = document.getElementById('historyBody');
      const entries = data.history || [];
      body.innerHTML = entries
        .map(entry => `<div style="margin-bottom:12px"><strong>Version ${entry.version}</strong><div class="muted">${new Date(entry.updatedAt).toLocaleString()}</div><div>${entry.description || ''}</div></div>`)
        .join('');
      modal.showModal();
    }

    async function openCompile(id, nameEncoded){
      const variables = prompt('Provide variables as key=value comma separated (e.g. context=Launch,notes=Budget)');
      if (variables === null) return;
      const parsed = parseVariablesInput(variables);
      const res = await fetch(`/builder/templates/${id}/compile`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        credentials: 'same-origin',
        body: JSON.stringify({ tenantId: 'ui-preview', variables: parsed })
      });
      if (!res.ok) return;
      const data = await res.json();
      document.getElementById('compileTitle').textContent = decodeURIComponent(nameEncoded) + ' — Compile Result';
      document.getElementById('compileBody').textContent = JSON.stringify(data, null, 2);
      document.getElementById('compileDialog').showModal();
    }

    async function runTemplate(id, nameEncoded){
      const variables = prompt('Provide variables as key=value comma separated (e.g. context=Launch,notes=Budget)');
      if (variables === null) return;
      const parsed = parseVariablesInput(variables);
      const res = await fetch(`/builder/templates/${id}/run`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        credentials: 'same-origin',
        body: JSON.stringify({ tenantId: 'tenant-ui', variables: parsed })
      });
      if (!res.ok) {
        alert('Failed to execute template');
        return;
      }
      const data = await res.json();
      alert('Template run started. Redirecting to timeline.');
      window.location.href = `/ui/responses/${data.runId}`;
    }

    async function createTemplate(){
      const name = document.getElementById('new_name').value.trim();
      const instructions = document.getElementById('new_instructions').value.trim();
      const inputLines = document.getElementById('new_input').value.trim().split(/\n+/).filter(Boolean);
      if (!name || !instructions || inputLines.length === 0) {
        document.getElementById('new_status').textContent = 'Name, instructions, and input parts are required.';
        return;
      }
      const input = inputLines.map(line => {
        const [id, rest] = line.split(':');
        return { id: (id || '').trim(), type: 'input_text', text: rest ? rest.trim() : '' };
      }).filter(part => part.id && part.text);
      const payload = {
        name,
        description: document.getElementById('new_description').value.trim(),
        instructions,
        model: document.getElementById('new_model').value,
        input,
        channels: {
          slack: document.getElementById('new_channel_slack').checked,
          email: document.getElementById('new_channel_email').checked,
          inApp: document.getElementById('new_channel_inapp').checked,
        }
      };
      const res = await fetch('/builder/templates', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        credentials: 'same-origin',
        body: JSON.stringify(payload)
      });
      if (!res.ok) {
        document.getElementById('new_status').textContent = 'Failed to create template.';
        return;
      }
      document.getElementById('new_status').textContent = 'Template created!';
      document.getElementById('new_name').value = '';
      document.getElementById('new_description').value = '';
      document.getElementById('new_instructions').value = '';
      document.getElementById('new_input').value = '';
      refreshTemplates();
      refreshResponsesRuns();
    }

    (function init(){
      if (Array.isArray(preloaded.templates)) {
        renderTemplates(preloaded.templates);
      } else {
        refreshTemplates();
      }
      if (Array.isArray(preloaded.responsesRuns)) {
        renderResponsesRuns(preloaded.responsesRuns);
      } else {
        renderResponsesRuns([]);
      }
      refreshResponsesRuns();
      setInterval(refreshResponsesRuns, 6000);
    })();
  </script>
</body>
</html>
