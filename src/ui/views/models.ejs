<!doctype html><html><head>
<meta charset="utf-8"/><title>NOFX - Models</title>
<link rel="stylesheet" href="/ui/static/style.css"/>
</head><body>
<h1>Models</h1>
<p><a href="/ui/settings">Back to Settings</a></p>
<p>
  <button onclick="importVendor('openai')">Import from OpenAI</button>
  <button onclick="importVendor('anthropic')">Seed Anthropic</button>
  <input id="anthropicList" placeholder="opus-4.1, sonnet-4, claude-3-5-sonnet-latest" style="width:360px"/>
  <button onclick="seedList('anthropic','anthropicList')">Seed List</button>
  <br/>
  <button onclick="importVendor('gemini')">Seed Gemini</button>
  <input id="geminiList" placeholder="gemini-2.5-pro, gemini-2.5-flash, gemini-2.5-flash-lite" style="width:360px"/>
  <button onclick="seedList('gemini','geminiList')">Seed List</button>
  <span id="importStatus"></span>
  <small style="color:#666; display:block; margin-top:4px;">OpenAI import requires OPENAI_API_KEY in .env.</small>
  <small style="color:#666; display:block;">You can add other vendors manually below.</small>
</p>
<table id="models">
  <tr><th>Provider</th><th>Name</th><th>Display</th><th>Kind</th><th>Base URL</th><th>In/1M</th><th>Out/1M</th><th>Context</th><th>Active</th><th></th></tr>
</table>
<h2>Add / Update</h2>
<div>
  <label>Provider <input id="m_provider" placeholder="openai|anthropic|gemini|grok|local"/></label>
  <label>Name <input id="m_name" placeholder="gpt-4o-mini"/></label>
  <label>Display <input id="m_display" placeholder="OpenAI GPT-4o mini"/></label>
  <label>Kind
    <select id="m_kind">
      <option>openai</option>
      <option>anthropic</option>
      <option>gemini</option>
      <option>openai-compatible</option>
      <option>http</option>
    </select>
  </label>
  <label>Base URL <input id="m_base" placeholder="http://localhost:11434/v1/chat/completions"/></label>
  <label>Input/1M <input id="m_in" type="number" step="0.01" min="0"/></label>
  <label>Output/1M <input id="m_out" type="number" step="0.01" min="0"/></label>
  <label>Context <input id="m_ctx" type="number" step="1" min="0"/></label>
  <label>Max Output <input id="m_max" type="number" step="1" min="0"/></label>
  <label><input id="m_active" type="checkbox" checked/> Active</label>
  <button onclick="saveModel()">Save</button>
  <span id="status"></span>
  <p style="color:#666">Secrets are not stored here. Set env vars like LLM_<PROVIDER>_API_KEY.</p>
</div>

<script>
async function load(){
  const rsp = await fetch('/models');
  if (rsp.status === 401) { window.location.href = '/ui/login'; return; }
  const data = await rsp.json();
  const t = document.getElementById('models');
  while (t.rows.length > 1) t.deleteRow(1);
  (data.models||[]).forEach(m => addRow(m));
}
function addRow(m){
  const t = document.getElementById('models');
  const tr = document.createElement('tr');
  tr.innerHTML = `
    <td>${escape(m.provider)}</td>
    <td>${escape(m.name)}</td>
    <td>${escape(m.display_name||'')}</td>
    <td>${escape(m.kind)}</td>
    <td>${escape(m.base_url||'')}</td>
    <td>${m.input_per_1m ?? ''}</td>
    <td>${m.output_per_1m ?? ''}</td>
    <td>${m.context_tokens ?? ''}</td>
    <td>${m.active? 'yes':'no'}</td>
    <td><button onclick="del('${m.id}')">Delete</button></td>
  `;
  t.appendChild(tr);
}
async function saveModel(){
  const body = {
    provider: val('m_provider').toLowerCase(),
    name: val('m_name'),
    display_name: val('m_display'),
    kind: val('m_kind'),
    base_url: val('m_base')||undefined,
    input_per_1m: num('m_in'),
    output_per_1m: num('m_out'),
    context_tokens: num('m_ctx'),
    max_output_tokens: num('m_max'),
    active: document.getElementById('m_active').checked
  };
  const rsp = await fetch('/models', { method:'POST', headers:{'Content-Type':'application/json'}, body: JSON.stringify(body) });
  document.getElementById('status').textContent = rsp.ok ? 'Saved' : 'Error';
  if (rsp.ok) load();
}
async function del(id){
  const rsp = await fetch('/models/' + id, { method:'DELETE' });
  if (rsp.ok) load();
}
function val(id){ return document.getElementById(id).value.trim(); }
function num(id){ const v = Number(val(id)); return isFinite(v)?v:undefined; }
function escape(s){ return String(s).replaceAll('&','&amp;').replaceAll('<','&lt;').replaceAll('>','&gt;'); }
async function importVendor(v){
  const rsp = await fetch('/models/import/' + v, { method:'POST' });
  if (rsp.status === 401) { window.location.href='/ui/login'; return; }
  const data = await rsp.json();
  document.getElementById('importStatus').textContent = rsp.ok ? `Imported ${data.imported||0}` : (data.error||'Error');
  if (rsp.ok) load();
}
async function seedList(v, inputId){
  const names = document.getElementById(inputId).value;
  if (!names) return;
  const rsp = await fetch('/models/import/' + v, { method:'POST', headers:{'Content-Type':'application/json'}, body: JSON.stringify({ names }) });
  if (rsp.status === 401) { window.location.href='/ui/login'; return; }
  const data = await rsp.json();
  document.getElementById('importStatus').textContent = rsp.ok ? `Imported ${data.imported||0}` : (data.error||'Error');
  if (rsp.ok) load();
}
load();
</script>
</body></html>
