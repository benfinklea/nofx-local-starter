<!doctype html><html><head>
<meta charset="utf-8"/><title>NOFX - Models</title>
<link rel="stylesheet" href="/ui/static/style.css"/>
</head><body>
<div class="header"><div class="inner">
  <div class="brand"><a href="/ui/runs">NOFX</a></div>
  <div class="nav">
    <a href="/ui/runs">Runs</a>
    <a href="/ui/models">Models</a>
    <a href="/ui/settings">Settings</a>
  </div>
</div></div>

<div class="container">
  <div class="section-title"><h1 style="margin:12px 0">Models</h1><span class="tip" data-tip="Manage models and pricing per 1M tokens. These populate routing dropdowns.">?</span></div>
  <div class="card"><div class="bd">
    <div style="display:flex;gap:10px;flex-wrap:wrap;align-items:center;margin-bottom:10px">
      <button class="btn" onclick="importOpenAI()">Import from OpenAI</button>
      <label style="display:inline-flex;align-items:center;gap:6px"><input type="checkbox" id="openaiRec" checked/> Recommended only</label>
      <input id="openaiFilter" placeholder="filter contains (comma separated)" style="width:260px"/>
      <input id="openaiExclude" placeholder="exclude contains (comma separated)" style="width:260px"/>
      <button class="btn" onclick="importVendor('anthropic')">Seed Anthropic</button>
      <input id="anthropicList" placeholder="opus-4.1, sonnet-4, claude-3-5-sonnet-latest" style="width:360px"/>
      <button class="btn" onclick="seedList('anthropic','anthropicList')">Seed List</button>
    </div>
    <div style="display:flex;gap:10px;flex-wrap:wrap;align-items:center;margin-bottom:12px">
      <button class="btn" onclick="importVendor('gemini')">Seed Gemini</button>
      <input id="geminiList" placeholder="gemini-2.5-pro, gemini-2.5-flash, gemini-2.5-flash-lite" style="width:360px"/>
      <button class="btn" onclick="seedList('gemini','geminiList')">Seed List</button>
      <span id="importStatus" class="muted"></span>
    </div>
    <small class="muted">OpenAI import requires OPENAI_API_KEY in .env.</small>
  </div></div>

  <div class="card" style="margin-top:16px"><div class="hd">Add / Update</div><div class="bd">
    <label>Provider <input id="m_provider" placeholder="openai|anthropic|gemini|grok|local"/></label>
    <div id="warn_provider" class="warn-text" style="display:none">Tip: provider helps group models (e.g., openai, anthropic, gemini)</div>
    <label>Name <input id="m_name" placeholder="gpt-4o-mini"/></label>
    <div id="warn_name" class="warn-text" style="display:none">Tip: name should match the provider's model identifier</div>
    <label>Display <input id="m_display" placeholder="OpenAI GPT-4o mini"/></label>
    <label>Kind
      <select id="m_kind">
        <option>openai</option>
        <option>anthropic</option>
        <option>gemini</option>
        <option>openai-compatible</option>
        <option>http</option>
      </select>
    </label>
    <label>Base URL <input id="m_base" placeholder="http://localhost:11434/v1/chat/completions"/></label>
    <div class="grid">
      <div class="col-6"><label>Input/1M <input id="m_in" type="number" step="0.01" min="0"/></label></div>
      <div class="col-6"><label>Output/1M <input id="m_out" type="number" step="0.01" min="0"/></label></div>
    </div>
    <div id="warn_pricing" class="warn-text" style="display:none">Optional: add pricing to enable cost estimates.</div>
    <div class="grid">
      <div class="col-6"><label>Context <input id="m_ctx" type="number" step="1" min="0"/></label></div>
      <div class="col-6"><label>Max Output <input id="m_max" type="number" step="1" min="0"/></label></div>
    </div>
    <label><input id="m_active" type="checkbox" checked/> Active</label>
    <button class="btn primary" onclick="saveModel()">Save</button>
    <span id="status" class="muted" style="margin-left:8px"></span>
    <p class="muted" style="margin-top:10px">Secrets are not stored here. Set env vars like LLM_&lt;PROVIDER&gt;_API_KEY.</p>
  </div></div>

  <div class="card" style="margin-top:16px"><div class="hd">Model List</div><div class="bd">
    <table id="models">
      <tr><th>Provider</th><th>Name</th><th>Display</th><th>Kind</th><th>Base URL</th><th>In/1M</th><th>Out/1M</th><th>Pricing</th><th>Context</th><th>Active</th><th></th></tr>
    </table>
  </div></div>
</div>

<script>
async function load(){
  const rsp = await fetch('/models');
  if (rsp.status === 401) { window.location.href = '/ui/login'; return; }
  const data = await rsp.json();
  window._models = data.models||[];
  const t = document.getElementById('models');
  while (t.rows.length > 1) t.deleteRow(1);
  _models.forEach((m, i) => addRow(m, i));
}
function addRow(m, idx){
  const t = document.getElementById('models');
  const tr = document.createElement('tr');
  const hasPricing = (m.input_per_1m != null && m.input_per_1m > 0) || (m.output_per_1m != null && m.output_per_1m > 0);
  tr.innerHTML = `
    <td>${escape(m.provider)}</td>
    <td>${escape(m.name)}</td>
    <td>${escape(m.display_name||'')}</td>
    <td>${escape(m.kind)}</td>
    <td>${escape(m.base_url||'')}</td>
    <td>${m.input_per_1m ?? ''}</td>
    <td>${m.output_per_1m ?? ''}</td>
    <td>${hasPricing ? '<span class="badge ok">priced</span>' : '<span class="badge warn">missing</span>'}</td>
    <td>${m.context_tokens ?? ''}</td>
    <td>${m.active? 'yes':'no'}</td>
    <td>
      <button class="btn small" onclick="edit(${idx})">Edit</button>
      <button class="btn small danger" onclick="del('${m.id}')">Delete</button>
    </td>
  `;
  t.appendChild(tr);
}
async function saveModel(){
  const body = {
    provider: val('m_provider').toLowerCase(),
    name: val('m_name'),
    display_name: val('m_display'),
    kind: val('m_kind'),
    base_url: val('m_base')||undefined,
    input_per_1m: num('m_in'),
    output_per_1m: num('m_out'),
    context_tokens: num('m_ctx'),
    max_output_tokens: num('m_max'),
    active: document.getElementById('m_active').checked
  };
  const rsp = await fetch('/models', { method:'POST', headers:{'Content-Type':'application/json'}, body: JSON.stringify(body) });
  document.getElementById('status').textContent = rsp.ok ? 'Saved' : 'Error';
  if (rsp.ok) load();
}
function validate(){
  const provider = document.getElementById('m_provider');
  const name = document.getElementById('m_name');
  const inP = document.getElementById('m_in');
  const outP = document.getElementById('m_out');
  const warnProvider = document.getElementById('warn_provider');
  const warnName = document.getElementById('warn_name');
  const warnPricing = document.getElementById('warn_pricing');
  const providerEmpty = !provider.value.trim();
  const nameEmpty = !name.value.trim();
  provider.classList.toggle('input-warn', providerEmpty);
  name.classList.toggle('input-warn', nameEmpty);
  warnProvider.style.display = providerEmpty ? 'block' : 'none';
  warnName.style.display = nameEmpty ? 'block' : 'none';
  const hasPricing = (!!inP.value && Number(inP.value) >= 0) || (!!outP.value && Number(outP.value) >= 0);
  warnPricing.style.display = hasPricing ? 'none' : 'block';
}
['m_provider','m_name','m_in','m_out'].forEach(id=>{
  const el = document.getElementById(id);
  if (el) el.addEventListener('input', validate);
});
function edit(i){
  const m = (_models||[])[i];
  if (!m) return;
  document.getElementById('m_provider').value = m.provider || '';
  document.getElementById('m_name').value = m.name || '';
  document.getElementById('m_display').value = m.display_name || '';
  document.getElementById('m_kind').value = m.kind || 'openai';
  document.getElementById('m_base').value = m.base_url || '';
  document.getElementById('m_in').value = m.input_per_1m ?? '';
  document.getElementById('m_out').value = m.output_per_1m ?? '';
  document.getElementById('m_ctx').value = m.context_tokens ?? '';
  document.getElementById('m_max').value = m.max_output_tokens ?? '';
  document.getElementById('m_active').checked = m.active !== false;
  document.getElementById('status').textContent = 'Loaded model for edit â€” click Save to update';
  window.scrollTo({ top: 0, behavior: 'smooth' });
}
async function del(id){
  const rsp = await fetch('/models/' + id, { method:'DELETE' });
  if (rsp.ok) load();
}
function val(id){ return document.getElementById(id).value.trim(); }
function num(id){ const v = Number(val(id)); return isFinite(v)?v:undefined; }
function escape(s){ return String(s).replaceAll('&','&amp;').replaceAll('<','&lt;').replaceAll('>','&gt;'); }
async function importVendor(v){
  const rsp = await fetch('/models/import/' + v, { method:'POST' });
  if (rsp.status === 401) { window.location.href='/ui/login'; return; }
  const data = await rsp.json();
  document.getElementById('importStatus').textContent = rsp.ok ? `Imported ${data.imported||0}` : (data.error||'Error');
  if (rsp.ok) load();
}
async function importOpenAI(){
  const body = {
    recommendedOnly: document.getElementById('openaiRec').checked,
    filter: document.getElementById('openaiFilter').value,
    exclude: document.getElementById('openaiExclude').value
  };
  const rsp = await fetch('/models/import/openai', { method:'POST', headers:{'Content-Type':'application/json'}, body: JSON.stringify(body) });
  if (rsp.status === 401) { window.location.href='/ui/login'; return; }
  const data = await rsp.json();
  document.getElementById('importStatus').textContent = rsp.ok ? `Imported ${data.imported||0}` : (data.error||'Error');
  if (rsp.ok) load();
}
async function seedList(v, inputId){
  const names = document.getElementById(inputId).value;
  if (!names) return;
  const rsp = await fetch('/models/import/' + v, { method:'POST', headers:{'Content-Type':'application/json'}, body: JSON.stringify({ names }) });
  if (rsp.status === 401) { window.location.href='/ui/login'; return; }
  const data = await rsp.json();
  document.getElementById('importStatus').textContent = rsp.ok ? `Imported ${data.imported||0}` : (data.error||'Error');
  if (rsp.ok) load();
}
load();
</script>
</body></html>
