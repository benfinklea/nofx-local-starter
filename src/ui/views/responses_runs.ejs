<!doctype html><html><head>
<meta charset="utf-8"/><title>NOFX - Responses Runs</title>
<link rel="stylesheet" href="/ui/static/style.css"/>
</head><body>
<div class="header"><div class="inner">
  <div class="brand"><a href="/ui/runs">NOFX</a></div>
  <div class="nav">
    <a href="/ui/runs">Runs</a>
    <a href="/ui/builder">Builder</a>
    <a href="/ui/responses" class="active">Responses</a>
    <a href="/ui/models">Models</a>
    <a href="/ui/settings">Settings</a>
  </div>
</div></div>
<div class="container">
  <div class="section-title" style="margin:16px 0 12px 0"><h1>Responses Runs</h1><span class="tip" data-tip="Runs executed via the Responses API orchestration layer. Click a row to inspect the archived timeline.">?</span></div>
  <div class="grid" style="margin-bottom:16px">
    <div class="col-12">
      <div class="card"><div class="bd" style="display:flex;gap:18px;flex-wrap:wrap">
        <div class="metric"><div class="k">Total Runs</div><div class="v" id="summary_total">0</div></div>
        <div class="metric"><div class="k">Failures (24h)</div><div class="v" id="summary_failures">0</div></div>
        <div class="metric"><div class="k">Last Run</div><div class="v" id="summary_last">—</div></div>
        <div class="metric"><div class="k">Avg Tokens</div><div class="v" id="summary_avg_tokens">0</div></div>
        <div class="metric"><div class="k">Rate Limit Remaining</div><div class="v" id="summary_rate">—</div></div>
        <div class="metric"><div class="k">Total Refusals</div><div class="v" id="summary_refusals">0</div></div>
        <div class="metric"><div class="k">Open Incidents</div><div class="v" id="summary_incidents">0</div></div>
        <div class="metric"><div class="k">Total Estimated Cost</div><div class="v" id="summary_cost">$0.00</div></div>
      </div></div>
    </div>
  </div>
  <div class="grid" style="gap:16px;margin-bottom:16px">
    <div class="col-6">
      <div class="card"><div class="hd">Rate Limit Watch</div><div class="bd">
        <table id="rateLimitTable"><thead><tr><th>Tenant</th><th>Remaining Requests</th><th>Remaining Tokens</th><th>Last Seen</th></tr></thead><tbody></tbody></table>
      </div></div>
    </div>
    <div class="col-6">
      <div class="card"><div class="hd">Open Incidents</div><div class="bd">
        <table id="incidentsTable"><thead><tr><th>Run</th><th>Type</th><th>Observed</th><th>Status</th></tr></thead><tbody></tbody></table>
      </div></div>
    </div>
  </div>
  <div class="card" style="margin-bottom:16px"><div class="hd">Tenant Usage</div><div class="bd">
    <table id="tenantTable"><thead><tr><th>Tenant</th><th>Runs</th><th>Total Tokens</th><th>Avg Tokens</th><th>Refusals</th><th>Last Run</th><th>Estimated Cost</th><th>Regions</th></tr></thead><tbody></tbody></table>
  </div></div>
  <div class="card"><div class="bd">
    <table id="responsesTable">
      <thead><tr><th>ID</th><th>Status</th><th>Model</th><th>Created</th></tr></thead>
      <tbody></tbody>
    </table>
  </div></div>
</div>
<script>
  const preloaded = <%- JSON.stringify(preloaded || {}) %>;

  function renderRows(runs){
    const tbody = document.querySelector('#responsesTable tbody');
    if (!tbody) return;
    if (!Array.isArray(runs) || runs.length === 0) {
      tbody.innerHTML = '<tr><td colspan="4" class="muted">No responses runs yet.</td></tr>';
      return;
    }
    tbody.innerHTML = runs.map((run) => {
      const status = String(run.status || 'queued').toLowerCase();
      const badgeClass = status === 'completed' || status === 'succeeded' ? 'ok' : (status === 'failed' ? 'err' : (status === 'in_progress' || status === 'queued' ? 'warn' : ''));
      const created = run.createdAt ? new Date(run.createdAt).toLocaleString() : '';
      return `<tr>
        <td><code><a href="/ui/responses/${run.runId}">${run.runId}</a></code></td>
        <td><span class="badge ${badgeClass}">${run.status}</span></td>
        <td>${run.model || '—'}</td>
        <td class="muted">${created}</td>
      </tr>`;
    }).join('');
  }

  async function refresh(){
    try {
      const res = await fetch('/responses/runs', { headers: { 'Accept': 'application/json' }, credentials: 'same-origin' });
      if (!res.ok) return;
      const data = await res.json();
      renderRows(data.runs || []);
    } catch {}
  }

  function applySummary(data){
    if (!data) return;
    document.getElementById('summary_total').textContent = data.totalRuns ?? 0;
    document.getElementById('summary_failures').textContent = data.failuresLast24h ?? 0;
    document.getElementById('summary_last').textContent = data.lastRunAt ? new Date(data.lastRunAt).toLocaleString() : '—';
    document.getElementById('summary_avg_tokens').textContent = data.averageTokensPerRun ? data.averageTokensPerRun.toFixed(1) : '0';
    const remaining = data.lastRateLimits?.remainingRequests ?? data.lastRateLimits?.remainingTokens;
    document.getElementById('summary_rate').textContent = typeof remaining === 'number' ? String(remaining) : '—';
    document.getElementById('summary_refusals').textContent = data.totalRefusals ?? 0;
    document.getElementById('summary_incidents').textContent = data.openIncidents ?? 0;
    document.getElementById('summary_cost').textContent = formatCurrency(data.totalEstimatedCost ?? 0);
    renderRateLimits(data.rateLimitTenants || []);
    renderIncidents(data.incidentDetails || []);
    renderTenantRollup(data.tenantRollup || []);
  }

  async function refreshSummary(){
    try {
      const res = await fetch('/responses/ops/summary', { headers: { 'Accept': 'application/json' }, credentials: 'same-origin' });
      if (!res.ok) return;
      const data = await res.json();
      applySummary(data);
    } catch {}
  }

  function renderRateLimits(items){
    const tbody = document.querySelector('#rateLimitTable tbody');
    if (!tbody) return;
    if (!Array.isArray(items) || items.length === 0) {
      tbody.innerHTML = '<tr><td colspan="4" class="muted">No rate limit telemetry yet.</td></tr>';
      return;
    }
    tbody.innerHTML = items.map((item) => {
      const latest = item.latest || {};
      const observed = latest.observedAt ? new Date(latest.observedAt).toLocaleTimeString() : '—';
      const reqPct = formatPct(item.remainingRequestsPct);
      const tokPct = formatPct(item.remainingTokensPct);
      const alertClass = item.alert ? 'badge err' : 'badge ok';
      const alertLabel = item.alert ? item.alert.toUpperCase() : 'HEALTHY';
      return `<tr>
        <td><code>${escape(item.tenantId)}</code></td>
        <td>${reqPct}</td>
        <td>${tokPct}</td>
        <td>${observed} <span class="badge ${alertClass}" style="margin-left:6px">${alertLabel}</span></td>
      </tr>`;
    }).join('');
  }

  function renderIncidents(items){
    const tbody = document.querySelector('#incidentsTable tbody');
    if (!tbody) return;
    if (!Array.isArray(items) || items.length === 0) {
      tbody.innerHTML = '<tr><td colspan="4" class="muted">No open incidents.</td></tr>';
      return;
    }
    tbody.innerHTML = items.map((item) => {
      const time = item.occurredAt ? new Date(item.occurredAt).toLocaleTimeString() : '—';
      return `<tr>
        <td><code><a href="/ui/responses/${item.runId}">${item.runId}</a></code></td>
        <td>${escape(item.type)}</td>
        <td class="muted">${time}</td>
        <td>${escape(item.status)}</td>
      </tr>`;
    }).join('');
  }

  function renderTenantRollup(items){
    const tbody = document.querySelector('#tenantTable tbody');
    if (!tbody) return;
    if (!Array.isArray(items) || items.length === 0) {
      tbody.innerHTML = '<tr><td colspan="6" class="muted">No tenant usage recorded.</td></tr>';
      return;
    }
    tbody.innerHTML = items.map((item) => {
      return `<tr>
        <td><code>${escape(item.tenantId)}</code></td>
        <td>${item.runCount}</td>
        <td>${item.totalTokens}</td>
        <td>${item.averageTokensPerRun.toFixed(1)}</td>
        <td>${item.refusalCount}</td>
        <td class="muted">${item.lastRunAt ? new Date(item.lastRunAt).toLocaleString() : '—'}</td>
        <td>${formatCurrency(item.estimatedCost)}</td>
        <td>${escape((item.regions || []).join(', ') || '—')}</td>
      </tr>`;
    }).join('');
  }

  function formatPct(value){
    if (typeof value !== 'number' || Number.isNaN(value)) return '—';
    return `${Math.round(value * 100)}%`;
  }

  function formatCurrency(value){
    const amount = typeof value === 'number' && !Number.isNaN(value) ? value : 0;
    return `$${amount.toFixed(2)}`;
  }

  (function init(){
    if (Array.isArray(preloaded.runs)) {
      renderRows(preloaded.runs);
    } else {
      renderRows([]);
    }
    if (preloaded.summary) {
      applySummary(preloaded.summary);
    }
    refresh();
    refreshSummary();
    setInterval(refresh, 5000);
    setInterval(refreshSummary, 7000);
  })();
</script>
</body></html>
